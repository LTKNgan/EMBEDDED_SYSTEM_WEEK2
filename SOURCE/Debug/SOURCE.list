
SOURCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007318  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb8  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a458  0800a458  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a458  0800a458  0001a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a460  0800a460  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a464  0800a464  0001a464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000003b4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d6d7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000397d  00000000  00000000  0003d71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00041098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001548  00000000  00000000  00042728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000050d1  00000000  00000000  00043c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c747  00000000  00000000  00048d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfced  00000000  00000000  00065488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145175  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e20  00000000  00000000  001451c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007488 	.word	0x08007488

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007488 	.word	0x08007488

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f003 f999 	bl	8003800 <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f003 f98c 	bl	8003800 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f003 f987 	bl	8003800 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f004 fa9e 	bl	8004a3a <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	20000030 	.word	0x20000030
 80005a8:	200002d4 	.word	0x200002d4
 80005ac:	20000048 	.word	0x20000048

080005b0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4802      	ldr	r0, [pc, #8]	; (80005c0 <buzzer_init+0x10>)
 80005b8:	f004 ff80 	bl	80054bc <HAL_TIM_PWM_Start>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200001a0 	.word	0x200001a0

080005c4 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005c8:	201e      	movs	r0, #30
 80005ca:	f001 fd73 	bl	80020b4 <DEC2BCD>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <ds3231_init+0x80>)
 80005d4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005d6:	2016      	movs	r0, #22
 80005d8:	f001 fd6c 	bl	80020b4 <DEC2BCD>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <ds3231_init+0x80>)
 80005e2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005e4:	2015      	movs	r0, #21
 80005e6:	f001 fd65 	bl	80020b4 <DEC2BCD>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <ds3231_init+0x80>)
 80005f0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005f2:	2006      	movs	r0, #6
 80005f4:	f001 fd5e 	bl	80020b4 <DEC2BCD>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <ds3231_init+0x80>)
 80005fe:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000600:	200f      	movs	r0, #15
 8000602:	f001 fd57 	bl	80020b4 <DEC2BCD>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <ds3231_init+0x80>)
 800060c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800060e:	2009      	movs	r0, #9
 8000610:	f001 fd50 	bl	80020b4 <DEC2BCD>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <ds3231_init+0x80>)
 800061a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 800061c:	2017      	movs	r0, #23
 800061e:	f001 fd49 	bl	80020b4 <DEC2BCD>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <ds3231_init+0x80>)
 8000628:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800062a:	2332      	movs	r3, #50	; 0x32
 800062c:	2203      	movs	r2, #3
 800062e:	21d0      	movs	r1, #208	; 0xd0
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <ds3231_init+0x84>)
 8000632:	f003 fa43 	bl	8003abc <HAL_I2C_IsDeviceReady>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d000      	beq.n	800063e <ds3231_init+0x7a>
		while(1);
 800063c:	e7fe      	b.n	800063c <ds3231_init+0x78>
	};
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000070 	.word	0x20000070
 8000648:	200000b4 	.word	0x200000b4

0800064c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <LCD_WR_REG+0x1c>)
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	8013      	strh	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	600ffffe 	.word	0x600ffffe

0800066c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <LCD_WR_DATA+0x1c>)
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	8053      	strh	r3, [r2, #2]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	600ffffe 	.word	0x600ffffe

0800068c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <LCD_RD_DATA+0x20>)
 8000694:	885b      	ldrh	r3, [r3, #2]
 8000696:	b29b      	uxth	r3, r3
 8000698:	80fb      	strh	r3, [r7, #6]
	return ram;
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	600ffffe 	.word	0x600ffffe

080006b0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4604      	mov	r4, r0
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4623      	mov	r3, r4
 80006c0:	80fb      	strh	r3, [r7, #6]
 80006c2:	4603      	mov	r3, r0
 80006c4:	80bb      	strh	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]
 80006ca:	4613      	mov	r3, r2
 80006cc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80006ce:	202a      	movs	r0, #42	; 0x2a
 80006d0:	f7ff ffbc 	bl	800064c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ffc6 	bl	800066c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffc0 	bl	800066c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80006ec:	887b      	ldrh	r3, [r7, #2]
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffba 	bl	800066c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80006f8:	887b      	ldrh	r3, [r7, #2]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffb4 	bl	800066c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000704:	202b      	movs	r0, #43	; 0x2b
 8000706:	f7ff ffa1 	bl	800064c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800070a:	88bb      	ldrh	r3, [r7, #4]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29b      	uxth	r3, r3
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffab 	bl	800066c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000716:	88bb      	ldrh	r3, [r7, #4]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	b29b      	uxth	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ffa5 	bl	800066c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000722:	883b      	ldrh	r3, [r7, #0]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	b29b      	uxth	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff9f 	bl	800066c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800072e:	883b      	ldrh	r3, [r7, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	b29b      	uxth	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff99 	bl	800066c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800073a:	202c      	movs	r0, #44	; 0x2c
 800073c:	f7ff ff86 	bl	800064c <LCD_WR_REG>
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <lcd_Clear+0x60>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <lcd_Clear+0x60>)
 800075c:	885b      	ldrh	r3, [r3, #2]
 800075e:	3b01      	subs	r3, #1
 8000760:	b29b      	uxth	r3, r3
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff ffa3 	bl	80006b0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800076a:	2300      	movs	r3, #0
 800076c:	81fb      	strh	r3, [r7, #14]
 800076e:	e011      	b.n	8000794 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000770:	2300      	movs	r3, #0
 8000772:	81bb      	strh	r3, [r7, #12]
 8000774:	e006      	b.n	8000784 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff77 	bl	800066c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800077e:	89bb      	ldrh	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	81bb      	strh	r3, [r7, #12]
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <lcd_Clear+0x60>)
 8000786:	885b      	ldrh	r3, [r3, #2]
 8000788:	89ba      	ldrh	r2, [r7, #12]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3f3      	bcc.n	8000776 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	3301      	adds	r3, #1
 8000792:	81fb      	strh	r3, [r7, #14]
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <lcd_Clear+0x60>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	89fa      	ldrh	r2, [r7, #14]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3e8      	bcc.n	8000770 <lcd_Clear+0x28>
		}
	}
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000078 	.word	0x20000078

080007ac <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	460b      	mov	r3, r1
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	88b9      	ldrh	r1, [r7, #4]
 80007c4:	88f8      	ldrh	r0, [r7, #6]
 80007c6:	f7ff ff73 	bl	80006b0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff4d 	bl	800066c <LCD_WR_DATA>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	70fb      	strb	r3, [r7, #3]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000802:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000806:	085b      	lsrs	r3, r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	f003 0307 	and.w	r3, r3, #7
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4413      	add	r3, r2
 8000826:	b29a      	uxth	r2, r3
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800082c:	b29b      	uxth	r3, r3
 800082e:	fb12 f303 	smulbb	r3, r2, r3
 8000832:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	3b20      	subs	r3, #32
 8000838:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	b29a      	uxth	r2, r3
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	4413      	add	r3, r2
 8000842:	b29b      	uxth	r3, r3
 8000844:	3b01      	subs	r3, #1
 8000846:	b29c      	uxth	r4, r3
 8000848:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800084c:	b29a      	uxth	r2, r3
 800084e:	88bb      	ldrh	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	b29b      	uxth	r3, r3
 8000854:	3b01      	subs	r3, #1
 8000856:	b29b      	uxth	r3, r3
 8000858:	88b9      	ldrh	r1, [r7, #4]
 800085a:	88f8      	ldrh	r0, [r7, #6]
 800085c:	4622      	mov	r2, r4
 800085e:	f7ff ff27 	bl	80006b0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000862:	2300      	movs	r3, #0
 8000864:	827b      	strh	r3, [r7, #18]
 8000866:	e07a      	b.n	800095e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000868:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800086c:	2b0c      	cmp	r3, #12
 800086e:	d028      	beq.n	80008c2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000870:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000874:	2b10      	cmp	r3, #16
 8000876:	d108      	bne.n	800088a <lcd_ShowChar+0xae>
 8000878:	78fa      	ldrb	r2, [r7, #3]
 800087a:	8a7b      	ldrh	r3, [r7, #18]
 800087c:	493c      	ldr	r1, [pc, #240]	; (8000970 <lcd_ShowChar+0x194>)
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	440a      	add	r2, r1
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	75fb      	strb	r3, [r7, #23]
 8000888:	e01b      	b.n	80008c2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800088a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800088e:	2b18      	cmp	r3, #24
 8000890:	d10b      	bne.n	80008aa <lcd_ShowChar+0xce>
 8000892:	78fa      	ldrb	r2, [r7, #3]
 8000894:	8a79      	ldrh	r1, [r7, #18]
 8000896:	4837      	ldr	r0, [pc, #220]	; (8000974 <lcd_ShowChar+0x198>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	4403      	add	r3, r0
 80008a2:	440b      	add	r3, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	75fb      	strb	r3, [r7, #23]
 80008a8:	e00b      	b.n	80008c2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80008aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008ae:	2b20      	cmp	r3, #32
 80008b0:	d15a      	bne.n	8000968 <lcd_ShowChar+0x18c>
 80008b2:	78fa      	ldrb	r2, [r7, #3]
 80008b4:	8a7b      	ldrh	r3, [r7, #18]
 80008b6:	4930      	ldr	r1, [pc, #192]	; (8000978 <lcd_ShowChar+0x19c>)
 80008b8:	0192      	lsls	r2, r2, #6
 80008ba:	440a      	add	r2, r1
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	75bb      	strb	r3, [r7, #22]
 80008c6:	e044      	b.n	8000952 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80008c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d120      	bne.n	8000912 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80008d0:	7dfa      	ldrb	r2, [r7, #23]
 80008d2:	7dbb      	ldrb	r3, [r7, #22]
 80008d4:	fa42 f303 	asr.w	r3, r2, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d004      	beq.n	80008ea <lcd_ShowChar+0x10e>
 80008e0:	883b      	ldrh	r3, [r7, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fec2 	bl	800066c <LCD_WR_DATA>
 80008e8:	e003      	b.n	80008f2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80008ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff febd 	bl	800066c <LCD_WR_DATA>
				m++;
 80008f2:	7d7b      	ldrb	r3, [r7, #21]
 80008f4:	3301      	adds	r3, #1
 80008f6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80008f8:	7d7b      	ldrb	r3, [r7, #21]
 80008fa:	7bfa      	ldrb	r2, [r7, #15]
 80008fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000900:	fb02 f201 	mul.w	r2, r2, r1
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d11f      	bne.n	800094c <lcd_ShowChar+0x170>
				{
					m=0;
 800090c:	2300      	movs	r3, #0
 800090e:	757b      	strb	r3, [r7, #21]
					break;
 8000910:	e022      	b.n	8000958 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000912:	7dfa      	ldrb	r2, [r7, #23]
 8000914:	7dbb      	ldrb	r3, [r7, #22]
 8000916:	fa42 f303 	asr.w	r3, r2, r3
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	2b00      	cmp	r3, #0
 8000920:	d005      	beq.n	800092e <lcd_ShowChar+0x152>
 8000922:	883a      	ldrh	r2, [r7, #0]
 8000924:	88b9      	ldrh	r1, [r7, #4]
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff3f 	bl	80007ac <lcd_DrawPoint>
				x++;
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	3301      	adds	r3, #1
 8000932:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	8a3b      	ldrh	r3, [r7, #16]
 8000938:	1ad2      	subs	r2, r2, r3
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	429a      	cmp	r2, r3
 800093e:	d105      	bne.n	800094c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000940:	8a3b      	ldrh	r3, [r7, #16]
 8000942:	80fb      	strh	r3, [r7, #6]
					y++;
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	3301      	adds	r3, #1
 8000948:	80bb      	strh	r3, [r7, #4]
					break;
 800094a:	e005      	b.n	8000958 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800094c:	7dbb      	ldrb	r3, [r7, #22]
 800094e:	3301      	adds	r3, #1
 8000950:	75bb      	strb	r3, [r7, #22]
 8000952:	7dbb      	ldrb	r3, [r7, #22]
 8000954:	2b07      	cmp	r3, #7
 8000956:	d9b7      	bls.n	80008c8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000958:	8a7b      	ldrh	r3, [r7, #18]
 800095a:	3301      	adds	r3, #1
 800095c:	827b      	strh	r3, [r7, #18]
 800095e:	8a7a      	ldrh	r2, [r7, #18]
 8000960:	89bb      	ldrh	r3, [r7, #12]
 8000962:	429a      	cmp	r2, r3
 8000964:	d380      	bcc.n	8000868 <lcd_ShowChar+0x8c>
 8000966:	e000      	b.n	800096a <lcd_ShowChar+0x18e>
		else return;
 8000968:	bf00      	nop
				}
			}
		}
	}
}
 800096a:	371c      	adds	r7, #28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	080074b8 	.word	0x080074b8
 8000974:	08007aa8 	.word	0x08007aa8
 8000978:	08008c78 	.word	0x08008c78

0800097c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <lcd_SetDir+0x44>)
 8000998:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800099c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <lcd_SetDir+0x44>)
 80009a0:	22f0      	movs	r2, #240	; 0xf0
 80009a2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80009a4:	e006      	b.n	80009b4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <lcd_SetDir+0x44>)
 80009a8:	22f0      	movs	r2, #240	; 0xf0
 80009aa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <lcd_SetDir+0x44>)
 80009ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009b2:	805a      	strh	r2, [r3, #2]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	20000078 	.word	0x20000078

080009c4 <lcd_init>:


void lcd_init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	48aa      	ldr	r0, [pc, #680]	; (8000c78 <lcd_init+0x2b4>)
 80009d0:	f002 ff16 	bl	8003800 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80009d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d8:	f001 fc2c 	bl	8002234 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e2:	48a5      	ldr	r0, [pc, #660]	; (8000c78 <lcd_init+0x2b4>)
 80009e4:	f002 ff0c 	bl	8003800 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80009e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ec:	f001 fc22 	bl	8002234 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff ffc3 	bl	800097c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80009f6:	20d3      	movs	r0, #211	; 0xd3
 80009f8:	f7ff fe28 	bl	800064c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80009fc:	f7ff fe46 	bl	800068c <LCD_RD_DATA>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b9d      	ldr	r3, [pc, #628]	; (8000c7c <lcd_init+0x2b8>)
 8000a06:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000a08:	f7ff fe40 	bl	800068c <LCD_RD_DATA>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b9a      	ldr	r3, [pc, #616]	; (8000c7c <lcd_init+0x2b8>)
 8000a12:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000a14:	f7ff fe3a 	bl	800068c <LCD_RD_DATA>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b97      	ldr	r3, [pc, #604]	; (8000c7c <lcd_init+0x2b8>)
 8000a1e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000a20:	4b96      	ldr	r3, [pc, #600]	; (8000c7c <lcd_init+0x2b8>)
 8000a22:	889b      	ldrh	r3, [r3, #4]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b94      	ldr	r3, [pc, #592]	; (8000c7c <lcd_init+0x2b8>)
 8000a2a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000a2c:	f7ff fe2e 	bl	800068c <LCD_RD_DATA>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b91      	ldr	r3, [pc, #580]	; (8000c7c <lcd_init+0x2b8>)
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b8f      	ldr	r3, [pc, #572]	; (8000c7c <lcd_init+0x2b8>)
 8000a3e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000a40:	20cf      	movs	r0, #207	; 0xcf
 8000a42:	f7ff fe03 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fe10 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000a4c:	20c1      	movs	r0, #193	; 0xc1
 8000a4e:	f7ff fe0d 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000a52:	2030      	movs	r0, #48	; 0x30
 8000a54:	f7ff fe0a 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000a58:	20ed      	movs	r0, #237	; 0xed
 8000a5a:	f7ff fdf7 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000a5e:	2064      	movs	r0, #100	; 0x64
 8000a60:	f7ff fe04 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f7ff fe01 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000a6a:	2012      	movs	r0, #18
 8000a6c:	f7ff fdfe 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000a70:	2081      	movs	r0, #129	; 0x81
 8000a72:	f7ff fdfb 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000a76:	20e8      	movs	r0, #232	; 0xe8
 8000a78:	f7ff fde8 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000a7c:	2085      	movs	r0, #133	; 0x85
 8000a7e:	f7ff fdf5 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000a82:	2010      	movs	r0, #16
 8000a84:	f7ff fdf2 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000a88:	207a      	movs	r0, #122	; 0x7a
 8000a8a:	f7ff fdef 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000a8e:	20cb      	movs	r0, #203	; 0xcb
 8000a90:	f7ff fddc 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000a94:	2039      	movs	r0, #57	; 0x39
 8000a96:	f7ff fde9 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000a9a:	202c      	movs	r0, #44	; 0x2c
 8000a9c:	f7ff fde6 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fde3 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000aa6:	2034      	movs	r0, #52	; 0x34
 8000aa8:	f7ff fde0 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f7ff fddd 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ab2:	20f7      	movs	r0, #247	; 0xf7
 8000ab4:	f7ff fdca 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000ab8:	2020      	movs	r0, #32
 8000aba:	f7ff fdd7 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000abe:	20ea      	movs	r0, #234	; 0xea
 8000ac0:	f7ff fdc4 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fdd1 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fdce 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000ad0:	20c0      	movs	r0, #192	; 0xc0
 8000ad2:	f7ff fdbb 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000ad6:	201b      	movs	r0, #27
 8000ad8:	f7ff fdc8 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000adc:	20c1      	movs	r0, #193	; 0xc1
 8000ade:	f7ff fdb5 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fdc2 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000ae8:	20c5      	movs	r0, #197	; 0xc5
 8000aea:	f7ff fdaf 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000aee:	2030      	movs	r0, #48	; 0x30
 8000af0:	f7ff fdbc 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000af4:	2030      	movs	r0, #48	; 0x30
 8000af6:	f7ff fdb9 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000afa:	20c7      	movs	r0, #199	; 0xc7
 8000afc:	f7ff fda6 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000b00:	20b7      	movs	r0, #183	; 0xb7
 8000b02:	f7ff fdb3 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000b06:	2036      	movs	r0, #54	; 0x36
 8000b08:	f7ff fda0 	bl	800064c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000b0c:	2008      	movs	r0, #8
 8000b0e:	f7ff fdad 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000b12:	203a      	movs	r0, #58	; 0x3a
 8000b14:	f7ff fd9a 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000b18:	2055      	movs	r0, #85	; 0x55
 8000b1a:	f7ff fda7 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000b1e:	20b1      	movs	r0, #177	; 0xb1
 8000b20:	f7ff fd94 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fda1 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000b2a:	201a      	movs	r0, #26
 8000b2c:	f7ff fd9e 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000b30:	20b6      	movs	r0, #182	; 0xb6
 8000b32:	f7ff fd8b 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000b36:	200a      	movs	r0, #10
 8000b38:	f7ff fd98 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000b3c:	20a2      	movs	r0, #162	; 0xa2
 8000b3e:	f7ff fd95 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000b42:	20f2      	movs	r0, #242	; 0xf2
 8000b44:	f7ff fd82 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fd8f 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000b4e:	2026      	movs	r0, #38	; 0x26
 8000b50:	f7ff fd7c 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fd89 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000b5a:	20e0      	movs	r0, #224	; 0xe0
 8000b5c:	f7ff fd76 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000b60:	200f      	movs	r0, #15
 8000b62:	f7ff fd83 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000b66:	202a      	movs	r0, #42	; 0x2a
 8000b68:	f7ff fd80 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000b6c:	2028      	movs	r0, #40	; 0x28
 8000b6e:	f7ff fd7d 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000b72:	2008      	movs	r0, #8
 8000b74:	f7ff fd7a 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000b78:	200e      	movs	r0, #14
 8000b7a:	f7ff fd77 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000b7e:	2008      	movs	r0, #8
 8000b80:	f7ff fd74 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000b84:	2054      	movs	r0, #84	; 0x54
 8000b86:	f7ff fd71 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000b8a:	20a9      	movs	r0, #169	; 0xa9
 8000b8c:	f7ff fd6e 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000b90:	2043      	movs	r0, #67	; 0x43
 8000b92:	f7ff fd6b 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000b96:	200a      	movs	r0, #10
 8000b98:	f7ff fd68 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f7ff fd65 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fd62 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fd5f 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fd5c 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fd59 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000bba:	20e1      	movs	r0, #225	; 0xe1
 8000bbc:	f7ff fd46 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fd53 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000bc6:	2015      	movs	r0, #21
 8000bc8:	f7ff fd50 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000bcc:	2017      	movs	r0, #23
 8000bce:	f7ff fd4d 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f7ff fd4a 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000bd8:	2011      	movs	r0, #17
 8000bda:	f7ff fd47 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000bde:	2006      	movs	r0, #6
 8000be0:	f7ff fd44 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000be4:	202b      	movs	r0, #43	; 0x2b
 8000be6:	f7ff fd41 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000bea:	2056      	movs	r0, #86	; 0x56
 8000bec:	f7ff fd3e 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000bf0:	203c      	movs	r0, #60	; 0x3c
 8000bf2:	f7ff fd3b 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f7ff fd38 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000bfc:	2010      	movs	r0, #16
 8000bfe:	f7ff fd35 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f7ff fd32 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000c08:	203f      	movs	r0, #63	; 0x3f
 8000c0a:	f7ff fd2f 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000c0e:	203f      	movs	r0, #63	; 0x3f
 8000c10:	f7ff fd2c 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000c14:	200f      	movs	r0, #15
 8000c16:	f7ff fd29 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000c1a:	202b      	movs	r0, #43	; 0x2b
 8000c1c:	f7ff fd16 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fd23 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fd20 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fd1d 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000c32:	203f      	movs	r0, #63	; 0x3f
 8000c34:	f7ff fd1a 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000c38:	202a      	movs	r0, #42	; 0x2a
 8000c3a:	f7ff fd07 	bl	800064c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fd14 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fd11 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fd0e 	bl	800066c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000c50:	20ef      	movs	r0, #239	; 0xef
 8000c52:	f7ff fd0b 	bl	800066c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000c56:	2011      	movs	r0, #17
 8000c58:	f7ff fcf8 	bl	800064c <LCD_WR_REG>
	HAL_Delay(120);
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f001 fae9 	bl	8002234 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000c62:	2029      	movs	r0, #41	; 0x29
 8000c64:	f7ff fcf2 	bl	800064c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <lcd_init+0x2bc>)
 8000c70:	f002 fdc6 	bl	8003800 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	20000078 	.word	0x20000078
 8000c80:	40020000 	.word	0x40020000

08000c84 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b08b      	sub	sp, #44	; 0x2c
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	60ba      	str	r2, [r7, #8]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4603      	mov	r3, r0
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	460b      	mov	r3, r1
 8000c94:	81bb      	strh	r3, [r7, #12]
 8000c96:	4613      	mov	r3, r2
 8000c98:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8000ca2:	e048      	b.n	8000d36 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d145      	bne.n	8000d36 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8000caa:	89fa      	ldrh	r2, [r7, #14]
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <lcd_ShowStr+0xc4>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cb6:	085b      	lsrs	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	1acb      	subs	r3, r1, r3
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dc3f      	bgt.n	8000d40 <lcd_ShowStr+0xbc>
 8000cc0:	89ba      	ldrh	r2, [r7, #12]
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <lcd_ShowStr+0xc4>)
 8000cc4:	885b      	ldrh	r3, [r3, #2]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ccc:	1acb      	subs	r3, r1, r3
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dc36      	bgt.n	8000d40 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b80      	cmp	r3, #128	; 0x80
 8000cd8:	d902      	bls.n	8000ce0 <lcd_ShowStr+0x5c>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	75fb      	strb	r3, [r7, #23]
 8000cde:	e02a      	b.n	8000d36 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b0d      	cmp	r3, #13
 8000ce6:	d10b      	bne.n	8000d00 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8000ce8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	89bb      	ldrh	r3, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8000cf4:	8abb      	ldrh	r3, [r7, #20]
 8000cf6:	81fb      	strh	r3, [r7, #14]
					str++;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	e017      	b.n	8000d30 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	88fc      	ldrh	r4, [r7, #6]
 8000d06:	89b9      	ldrh	r1, [r7, #12]
 8000d08:	89f8      	ldrh	r0, [r7, #14]
 8000d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	f7ff fd5e 	bl	80007dc <lcd_ShowChar>
					x+=sizey/2;
 8000d20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d24:	085b      	lsrs	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1b2      	bne.n	8000ca4 <lcd_ShowStr+0x20>
 8000d3e:	e000      	b.n	8000d42 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8000d40:	bf00      	nop
			}
		}
	}
}
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	20000078 	.word	0x20000078

08000d4c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <led7_init+0x14>)
 8000d56:	f002 fd53 	bl	8003800 <HAL_GPIO_WritePin>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021800 	.word	0x40021800

08000d64 <led7_Scan>:

void led7_Scan(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000d68:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <led7_Scan+0x104>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <led7_Scan+0x104>)
 8000d72:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000d74:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <led7_Scan+0x108>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a3d      	ldr	r2, [pc, #244]	; (8000e70 <led7_Scan+0x10c>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <led7_Scan+0x104>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <led7_Scan+0x104>)
 8000d8e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <led7_Scan+0x108>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d847      	bhi.n	8000e28 <led7_Scan+0xc4>
 8000d98:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <led7_Scan+0x3c>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000dcf 	.word	0x08000dcf
 8000da8:	08000ded 	.word	0x08000ded
 8000dac:	08000e0b 	.word	0x08000e0b
	case 0:
		spi_buffer |= 0x00b0;
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <led7_Scan+0x104>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <led7_Scan+0x104>)
 8000dbc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <led7_Scan+0x104>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <led7_Scan+0x104>)
 8000dca:	801a      	strh	r2, [r3, #0]
		break;
 8000dcc:	e02d      	b.n	8000e2a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <led7_Scan+0x104>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <led7_Scan+0x104>)
 8000dda:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <led7_Scan+0x104>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	f023 0320 	bic.w	r3, r3, #32
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <led7_Scan+0x104>)
 8000de8:	801a      	strh	r2, [r3, #0]
		break;
 8000dea:	e01e      	b.n	8000e2a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <led7_Scan+0x104>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <led7_Scan+0x104>)
 8000df8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <led7_Scan+0x104>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	f023 0310 	bic.w	r3, r3, #16
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <led7_Scan+0x104>)
 8000e06:	801a      	strh	r2, [r3, #0]
		break;
 8000e08:	e00f      	b.n	8000e2a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <led7_Scan+0x104>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <led7_Scan+0x104>)
 8000e16:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <led7_Scan+0x104>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <led7_Scan+0x104>)
 8000e24:	801a      	strh	r2, [r3, #0]
		break;
 8000e26:	e000      	b.n	8000e2a <led7_Scan+0xc6>
	default:
		break;
 8000e28:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <led7_Scan+0x108>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	425a      	negs	r2, r3
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	f002 0203 	and.w	r2, r2, #3
 8000e3a:	bf58      	it	pl
 8000e3c:	4253      	negpl	r3, r2
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <led7_Scan+0x108>)
 8000e40:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <led7_Scan+0x110>)
 8000e48:	f002 fcda 	bl	8003800 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2202      	movs	r2, #2
 8000e50:	4905      	ldr	r1, [pc, #20]	; (8000e68 <led7_Scan+0x104>)
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <led7_Scan+0x114>)
 8000e54:	f003 fcb5 	bl	80047c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <led7_Scan+0x110>)
 8000e5e:	f002 fccf 	bl	8003800 <HAL_GPIO_WritePin>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000034 	.word	0x20000034
 8000e70:	20000000 	.word	0x20000000
 8000e74:	40021800 	.word	0x40021800
 8000e78:	200002d4 	.word	0x200002d4

08000e7c <lightProcess>:

#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <lightProcess+0x58>)
 8000e82:	8b5b      	ldrh	r3, [r3, #26]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d113      	bne.n	8000eb0 <lightProcess+0x34>
		light_status = 1 - light_status;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <lightProcess+0x5c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f1c3 0301 	rsb	r3, r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <lightProcess+0x5c>)
 8000e94:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <lightProcess+0x5c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d104      	bne.n	8000ea8 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <lightProcess+0x60>)
 8000ea2:	f001 f891 	bl	8001fc8 <uart_EspSendBytes>
 8000ea6:	e003      	b.n	8000eb0 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <lightProcess+0x64>)
 8000eac:	f001 f88c 	bl	8001fc8 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <lightProcess+0x5c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d105      	bne.n	8000ec4 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2120      	movs	r1, #32
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <lightProcess+0x68>)
 8000ebe:	f002 fc9f 	bl	8003800 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 8000ec2:	e004      	b.n	8000ece <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <lightProcess+0x68>)
 8000eca:	f002 fc99 	bl	8003800 <HAL_GPIO_WritePin>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000048 	.word	0x20000048
 8000ed8:	20000038 	.word	0x20000038
 8000edc:	080074a0 	.word	0x080074a0
 8000ee0:	080074a4 	.word	0x080074a4
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <test_Esp>:

void test_Esp(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 8000eee:	f001 f8c7 	bl	8002080 <uart_EspCheck>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d104      	bne.n	8000f02 <test_Esp+0x1a>
 8000ef8:	2101      	movs	r1, #1
 8000efa:	480a      	ldr	r0, [pc, #40]	; (8000f24 <test_Esp+0x3c>)
 8000efc:	f001 f864 	bl	8001fc8 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 8000f00:	e00c      	b.n	8000f1c <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 8000f02:	2300      	movs	r3, #0
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2318      	movs	r3, #24
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <test_Esp+0x40>)
 8000f14:	2132      	movs	r1, #50	; 0x32
 8000f16:	200a      	movs	r0, #10
 8000f18:	f7ff feb4 	bl	8000c84 <lcd_ShowStr>
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	080074a8 	.word	0x080074a8
 8000f28:	080074ac 	.word	0x080074ac

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	; 0x38
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f001 f90d 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f82d 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f000 fae1 	bl	8001500 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f3e:	f000 f9d1 	bl	80012e4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f42:	f000 f949 	bl	80011d8 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000f46:	f000 fbfd 	bl	8001744 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 fa65 	bl	8001418 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000f4e:	f000 fab7 	bl	80014c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f52:	f000 f889 	bl	8001068 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f56:	f000 f911 	bl	800117c <MX_I2C1_Init>
  MX_TIM13_Init();
 8000f5a:	f000 fa0f 	bl	800137c <MX_TIM13_Init>
  MX_TIM1_Init();
 8000f5e:	f000 f971 	bl	8001244 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000f62:	f000 fa83 	bl	800146c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000f66:	f000 fc67 	bl	8001838 <system_init>
  lcd_Clear(BLACK);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fbec 	bl	8000748 <lcd_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!flag_timer2);
 8000f70:	bf00      	nop
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <main+0x64>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0fb      	beq.n	8000f72 <main+0x46>
	  flag_timer2 = 0;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <main+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8000f80:	f7ff faaa 	bl	80004d8 <button_Scan>
	  test_Esp();
 8000f84:	f7ff ffb0 	bl	8000ee8 <test_Esp>
	  lightProcess();
 8000f88:	f7ff ff78 	bl	8000e7c <lightProcess>
	  while (!flag_timer2);
 8000f8c:	e7f0      	b.n	8000f70 <main+0x44>
 8000f8e:	bf00      	nop
 8000f90:	2000003a 	.word	0x2000003a

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 fa68 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <SystemClock_Config+0xcc>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <SystemClock_Config+0xcc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <SystemClock_Config+0xd0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a21      	ldr	r2, [pc, #132]	; (8001064 <SystemClock_Config+0xd0>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <SystemClock_Config+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001004:	2308      	movs	r3, #8
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001008:	23a8      	movs	r3, #168	; 0xa8
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fed5 	bl	8003dc8 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001024:	f000 fc32 	bl	800188c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800103a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2105      	movs	r1, #5
 8001046:	4618      	mov	r0, r3
 8001048:	f003 f936 	bl	80042b8 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001052:	f000 fc1b 	bl	800188c <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <MX_ADC1_Init+0x108>)
 800107c:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <MX_ADC1_Init+0x10c>)
 800107e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <MX_ADC1_Init+0x108>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <MX_ADC1_Init+0x108>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800108c:	4b38      	ldr	r3, [pc, #224]	; (8001170 <MX_ADC1_Init+0x108>)
 800108e:	2201      	movs	r2, #1
 8001090:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001092:	4b37      	ldr	r3, [pc, #220]	; (8001170 <MX_ADC1_Init+0x108>)
 8001094:	2200      	movs	r2, #0
 8001096:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <MX_ADC1_Init+0x108>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b33      	ldr	r3, [pc, #204]	; (8001170 <MX_ADC1_Init+0x108>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <MX_ADC1_Init+0x108>)
 80010a8:	4a33      	ldr	r2, [pc, #204]	; (8001178 <MX_ADC1_Init+0x110>)
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <MX_ADC1_Init+0x108>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <MX_ADC1_Init+0x108>)
 80010b4:	2205      	movs	r2, #5
 80010b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <MX_ADC1_Init+0x108>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_ADC1_Init+0x108>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c6:	482a      	ldr	r0, [pc, #168]	; (8001170 <MX_ADC1_Init+0x108>)
 80010c8:	f001 f8d8 	bl	800227c <HAL_ADC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 fbdb 	bl	800188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010d6:	2308      	movs	r3, #8
 80010d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4822      	ldr	r0, [pc, #136]	; (8001170 <MX_ADC1_Init+0x108>)
 80010e8:	f001 fa3a 	bl	8002560 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010f2:	f000 fbcb 	bl	800188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f6:	2309      	movs	r3, #9
 80010f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <MX_ADC1_Init+0x108>)
 8001104:	f001 fa2c 	bl	8002560 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800110e:	f000 fbbd 	bl	800188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001112:	230a      	movs	r3, #10
 8001114:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <MX_ADC1_Init+0x108>)
 8001120:	f001 fa1e 	bl	8002560 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800112a:	f000 fbaf 	bl	800188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800112e:	230b      	movs	r3, #11
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001132:	2304      	movs	r3, #4
 8001134:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_ADC1_Init+0x108>)
 800113c:	f001 fa10 	bl	8002560 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001146:	f000 fba1 	bl	800188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800114a:	230c      	movs	r3, #12
 800114c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800114e:	2305      	movs	r3, #5
 8001150:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_ADC1_Init+0x108>)
 8001158:	f001 fa02 	bl	8002560 <HAL_ADC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001162:	f000 fb93 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000158 	.word	0x20000158
 8001174:	40012000 	.word	0x40012000
 8001178:	0f000001 	.word	0x0f000001

0800117c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_I2C1_Init+0x50>)
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <MX_I2C1_Init+0x54>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_I2C1_Init+0x50>)
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_I2C1_Init+0x58>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_I2C1_Init+0x50>)
 800119a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_I2C1_Init+0x50>)
 80011ba:	f002 fb3b 	bl	8003834 <HAL_I2C_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 fb62 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200000b4 	.word	0x200000b4
 80011d0:	40005400 	.word	0x40005400
 80011d4:	000186a0 	.word	0x000186a0

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI1_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0x64>)
 800122a:	f003 fa41 	bl	80046b0 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 fb2a 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200002d4 	.word	0x200002d4
 8001240:	40013000 	.word	0x40013000

08001244 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM1_Init+0x98>)
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <MX_TIM1_Init+0x9c>)
 8001264:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_TIM1_Init+0x98>)
 8001268:	2253      	movs	r2, #83	; 0x53
 800126a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_TIM1_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM1_Init+0x98>)
 8001274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001278:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_TIM1_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_TIM1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM1_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_TIM1_Init+0x98>)
 800128e:	f003 fffb 	bl	8005288 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001298:	f000 faf8 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_TIM1_Init+0x98>)
 80012aa:	f004 fb99 	bl	80059e0 <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012b4:	f000 faea 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_TIM1_Init+0x98>)
 80012c6:	f004 ff8b 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012d0:	f000 fadc 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000028c 	.word	0x2000028c
 80012e0:	40010000 	.word	0x40010000

080012e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_TIM2_Init+0x94>)
 8001302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_TIM2_Init+0x94>)
 800130a:	f240 3247 	movw	r2, #839	; 0x347
 800130e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_TIM2_Init+0x94>)
 8001318:	2263      	movs	r2, #99	; 0x63
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_TIM2_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_TIM2_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM2_Init+0x94>)
 800132a:	f003 ffad 	bl	8005288 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001334:	f000 faaa 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_TIM2_Init+0x94>)
 8001346:	f004 fb4b 	bl	80059e0 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001350:	f000 fa9c 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_TIM2_Init+0x94>)
 8001362:	f004 ff3d 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800136c:	f000 fa8e 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000032c 	.word	0x2000032c

0800137c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_TIM13_Init+0x94>)
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <MX_TIM13_Init+0x98>)
 8001398:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_TIM13_Init+0x94>)
 800139c:	f240 3247 	movw	r2, #839	; 0x347
 80013a0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_TIM13_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_TIM13_Init+0x94>)
 80013aa:	2263      	movs	r2, #99	; 0x63
 80013ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_TIM13_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_TIM13_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013ba:	4815      	ldr	r0, [pc, #84]	; (8001410 <MX_TIM13_Init+0x94>)
 80013bc:	f003 ff64 	bl	8005288 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80013c6:	f000 fa61 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_TIM13_Init+0x94>)
 80013cc:	f004 f81c 	bl	8005408 <HAL_TIM_PWM_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80013d6:	f000 fa59 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	; 0x60
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM13_Init+0x94>)
 80013f2:	f004 fa33 	bl	800585c <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80013fc:	f000 fa46 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM13_Init+0x94>)
 8001402:	f000 fc45 	bl	8001c90 <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001a0 	.word	0x200001a0
 8001414:	40001c00 	.word	0x40001c00

08001418 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_USART1_UART_Init+0x50>)
 8001420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART1_UART_Init+0x4c>)
 8001450:	f004 ff56 	bl	8006300 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800145a:	f000 fa17 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200001e8 	.word	0x200001e8
 8001468:	40011000 	.word	0x40011000

0800146c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <MX_USART2_UART_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART2_UART_Init+0x4c>)
 80014a4:	f004 ff2c 	bl	8006300 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ae:	f000 f9ed 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000374 	.word	0x20000374
 80014bc:	40004400 	.word	0x40004400

080014c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_DMA_Init+0x3c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <MX_DMA_Init+0x3c>)
 80014d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_DMA_Init+0x3c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2038      	movs	r0, #56	; 0x38
 80014e8:	f001 fbb5 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014ec:	2038      	movs	r0, #56	; 0x38
 80014ee:	f001 fbce 	bl	8002c8e <HAL_NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	4b83      	ldr	r3, [pc, #524]	; (8001728 <MX_GPIO_Init+0x228>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a82      	ldr	r2, [pc, #520]	; (8001728 <MX_GPIO_Init+0x228>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b80      	ldr	r3, [pc, #512]	; (8001728 <MX_GPIO_Init+0x228>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	623b      	str	r3, [r7, #32]
 8001530:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	4b7c      	ldr	r3, [pc, #496]	; (8001728 <MX_GPIO_Init+0x228>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a7b      	ldr	r2, [pc, #492]	; (8001728 <MX_GPIO_Init+0x228>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b79      	ldr	r3, [pc, #484]	; (8001728 <MX_GPIO_Init+0x228>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	4b75      	ldr	r3, [pc, #468]	; (8001728 <MX_GPIO_Init+0x228>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a74      	ldr	r2, [pc, #464]	; (8001728 <MX_GPIO_Init+0x228>)
 8001558:	f043 0320 	orr.w	r3, r3, #32
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <MX_GPIO_Init+0x228>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0320 	and.w	r3, r3, #32
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <MX_GPIO_Init+0x228>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a6d      	ldr	r2, [pc, #436]	; (8001728 <MX_GPIO_Init+0x228>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <MX_GPIO_Init+0x228>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b67      	ldr	r3, [pc, #412]	; (8001728 <MX_GPIO_Init+0x228>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a66      	ldr	r2, [pc, #408]	; (8001728 <MX_GPIO_Init+0x228>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b64      	ldr	r3, [pc, #400]	; (8001728 <MX_GPIO_Init+0x228>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b60      	ldr	r3, [pc, #384]	; (8001728 <MX_GPIO_Init+0x228>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a5f      	ldr	r2, [pc, #380]	; (8001728 <MX_GPIO_Init+0x228>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <MX_GPIO_Init+0x228>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b59      	ldr	r3, [pc, #356]	; (8001728 <MX_GPIO_Init+0x228>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a58      	ldr	r2, [pc, #352]	; (8001728 <MX_GPIO_Init+0x228>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <MX_GPIO_Init+0x228>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b52      	ldr	r3, [pc, #328]	; (8001728 <MX_GPIO_Init+0x228>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a51      	ldr	r2, [pc, #324]	; (8001728 <MX_GPIO_Init+0x228>)
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <MX_GPIO_Init+0x228>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2170      	movs	r1, #112	; 0x70
 80015fa:	484c      	ldr	r0, [pc, #304]	; (800172c <MX_GPIO_Init+0x22c>)
 80015fc:	f002 f900 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001606:	484a      	ldr	r0, [pc, #296]	; (8001730 <MX_GPIO_Init+0x230>)
 8001608:	f002 f8fa 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001612:	4848      	ldr	r0, [pc, #288]	; (8001734 <MX_GPIO_Init+0x234>)
 8001614:	f002 f8f4 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800161e:	4846      	ldr	r0, [pc, #280]	; (8001738 <MX_GPIO_Init+0x238>)
 8001620:	f002 f8ee 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162a:	4844      	ldr	r0, [pc, #272]	; (800173c <MX_GPIO_Init+0x23c>)
 800162c:	f002 f8e8 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2108      	movs	r1, #8
 8001634:	4842      	ldr	r0, [pc, #264]	; (8001740 <MX_GPIO_Init+0x240>)
 8001636:	f002 f8e3 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800163a:	2370      	movs	r3, #112	; 0x70
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	4836      	ldr	r0, [pc, #216]	; (800172c <MX_GPIO_Init+0x22c>)
 8001652:	f001 ff39 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001656:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	4830      	ldr	r0, [pc, #192]	; (8001730 <MX_GPIO_Init+0x230>)
 8001670:	f001 ff2a 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8001674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	482a      	ldr	r0, [pc, #168]	; (8001734 <MX_GPIO_Init+0x234>)
 800168a:	f001 ff1d 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <MX_GPIO_Init+0x234>)
 80016a8:	f001 ff0e 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80016ac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	481c      	ldr	r0, [pc, #112]	; (8001738 <MX_GPIO_Init+0x238>)
 80016c6:	f001 feff 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_PEN_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80016ca:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	4814      	ldr	r0, [pc, #80]	; (8001730 <MX_GPIO_Init+0x230>)
 80016e0:	f001 fef2 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80016e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	480f      	ldr	r0, [pc, #60]	; (800173c <MX_GPIO_Init+0x23c>)
 80016fe:	f001 fee3 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001702:	2308      	movs	r3, #8
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <MX_GPIO_Init+0x240>)
 800171a:	f001 fed5 	bl	80034c8 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3738      	adds	r7, #56	; 0x38
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40021000 	.word	0x40021000
 8001730:	40020800 	.word	0x40020800
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020c00 	.word	0x40020c00

08001744 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	; 0x38
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <MX_FSMC_Init+0xec>)
 8001772:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001776:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <MX_FSMC_Init+0xec>)
 800177a:	4a2e      	ldr	r2, [pc, #184]	; (8001834 <MX_FSMC_Init+0xf0>)
 800177c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800177e:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <MX_FSMC_Init+0xec>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <MX_FSMC_Init+0xec>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <MX_FSMC_Init+0xec>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_FSMC_Init+0xec>)
 8001792:	2210      	movs	r2, #16
 8001794:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <MX_FSMC_Init+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_FSMC_Init+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <MX_FSMC_Init+0xec>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_FSMC_Init+0xec>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <MX_FSMC_Init+0xec>)
 80017b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_FSMC_Init+0xec>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_FSMC_Init+0xec>)
 80017be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_FSMC_Init+0xec>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_FSMC_Init+0xec>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_FSMC_Init+0xec>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80017d6:	230f      	movs	r3, #15
 80017d8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80017da:	230f      	movs	r3, #15
 80017dc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80017de:	233c      	movs	r3, #60	; 0x3c
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80017e6:	2310      	movs	r3, #16
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80017ea:	2311      	movs	r3, #17
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80017f2:	2308      	movs	r3, #8
 80017f4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80017f6:	230f      	movs	r3, #15
 80017f8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80017fa:	2309      	movs	r3, #9
 80017fc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001802:	2310      	movs	r3, #16
 8001804:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001806:	2311      	movs	r3, #17
 8001808:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800180e:	463a      	mov	r2, r7
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_FSMC_Init+0xec>)
 8001818:	f003 fcf2 	bl	8005200 <HAL_SRAM_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001822:	f000 f833 	bl	800188c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001826:	bf00      	nop
 8001828:	3738      	adds	r7, #56	; 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000108 	.word	0x20000108
 8001834:	a0000104 	.word	0xa0000104

08001838 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2120      	movs	r1, #32
 8001840:	4811      	ldr	r0, [pc, #68]	; (8001888 <system_init+0x50>)
 8001842:	f001 ffdd 	bl	8003800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2140      	movs	r1, #64	; 0x40
 800184a:	480f      	ldr	r0, [pc, #60]	; (8001888 <system_init+0x50>)
 800184c:	f001 ffd8 	bl	8003800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2110      	movs	r1, #16
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <system_init+0x50>)
 8001856:	f001 ffd3 	bl	8003800 <HAL_GPIO_WritePin>

	timer_init();
 800185a:	f000 f82b 	bl	80018b4 <timer_init>
	led7_init();
 800185e:	f7ff fa75 	bl	8000d4c <led7_init>
	button_init();
 8001862:	f7fe fe2d 	bl	80004c0 <button_init>
	lcd_init();
 8001866:	f7ff f8ad 	bl	80009c4 <lcd_init>
	ds3231_init();
 800186a:	f7fe feab 	bl	80005c4 <ds3231_init>
	uart_init_rs232();
 800186e:	f000 fb8f 	bl	8001f90 <uart_init_rs232>
	sensor_init();
 8001872:	f000 f811 	bl	8001898 <sensor_init>
	buzzer_init();
 8001876:	f7fe fe9b 	bl	80005b0 <buzzer_init>
	uart_init_esp();
 800187a:	f000 fb97 	bl	8001fac <uart_init_esp>
	setTimer2(50);
 800187e:	2032      	movs	r0, #50	; 0x32
 8001880:	f000 f822 	bl	80018c8 <setTimer2>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 800189c:	2205      	movs	r2, #5
 800189e:	4903      	ldr	r1, [pc, #12]	; (80018ac <sensor_init+0x14>)
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <sensor_init+0x18>)
 80018a2:	f000 fd2f 	bl	8002304 <HAL_ADC_Start_DMA>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200003b8 	.word	0x200003b8
 80018b0:	20000158 	.word	0x20000158

080018b4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <timer_init+0x10>)
 80018ba:	f003 fd35 	bl	8005328 <HAL_TIM_Base_Start_IT>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000032c 	.word	0x2000032c

080018c8 <setTimer2>:

void setTimer2(uint16_t duration){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <setTimer2+0x2c>)
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <setTimer2+0x2c>)
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <setTimer2+0x30>)
 80018de:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <setTimer2+0x34>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	801a      	strh	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000003e 	.word	0x2000003e
 80018f8:	2000003c 	.word	0x2000003c
 80018fc:	2000003a 	.word	0x2000003a

08001900 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001910:	d116      	bne.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d012      	beq.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001924:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d108      	bne.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x40>
				flag_timer2 = 1;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001930:	2201      	movs	r2, #1
 8001932:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800193a:	801a      	strh	r2, [r3, #0]
				led7_Scan();
 800193c:	f7ff fa12 	bl	8000d64 <led7_Scan>
			}
		}

	}
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000003c 	.word	0x2000003c
 800194c:	2000003a 	.word	0x2000003a
 8001950:	2000003e 	.word	0x2000003e

08001954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_MspInit+0x4c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x4c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a3c      	ldr	r2, [pc, #240]	; (8001ab4 <HAL_ADC_MspInit+0x110>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d171      	bne.n	8001aaa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a33      	ldr	r2, [pc, #204]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a2c      	ldr	r2, [pc, #176]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_ADC_MspInit+0x114>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4823      	ldr	r0, [pc, #140]	; (8001abc <HAL_ADC_MspInit+0x118>)
 8001a2e:	f001 fd4b 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a32:	2303      	movs	r3, #3
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a36:	2303      	movs	r3, #3
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <HAL_ADC_MspInit+0x11c>)
 8001a46:	f001 fd3f 	bl	80034c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <HAL_ADC_MspInit+0x124>)
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001a90:	f001 f918 	bl	8002cc4 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001a9a:	f7ff fef7 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_ADC_MspInit+0x120>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40012000 	.word	0x40012000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	2000022c 	.word	0x2000022c
 8001ac8:	40026410 	.word	0x40026410

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_I2C_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <HAL_I2C_MspInit+0x8c>)
 8001b26:	f001 fccf 	bl	80034c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40005400 	.word	0x40005400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400

08001b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_SPI_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_SPI_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bb6:	2338      	movs	r3, #56	; 0x38
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_SPI_MspInit+0x8c>)
 8001bd2:	f001 fc79 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40013000 	.word	0x40013000
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020400 	.word	0x40020400

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_TIM_Base_MspInit+0x98>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a20      	ldr	r2, [pc, #128]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001c1a:	e02e      	b.n	8001c7a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c24:	d116      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201c      	movs	r0, #28
 8001c48:	f001 f805 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c4c:	201c      	movs	r0, #28
 8001c4e:	f001 f81e 	bl	8002c8e <HAL_NVIC_EnableIRQ>
}
 8001c52:	e012      	b.n	8001c7a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_TIM_Base_MspInit+0xa0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10d      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_TIM_Base_MspInit+0x9c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40010000 	.word	0x40010000
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40001c00 	.word	0x40001c00

08001c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <HAL_TIM_MspPostInit+0x68>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_TIM_MspPostInit+0x6c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_TIM_MspPostInit+0x6c>)
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_TIM_MspPostInit+0x6c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001ce0:	2309      	movs	r3, #9
 8001ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <HAL_TIM_MspPostInit+0x70>)
 8001cec:	f001 fbec 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40001c00 	.word	0x40001c00
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40021400 	.word	0x40021400

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <HAL_UART_MspInit+0x108>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d135      	bne.n	8001d92 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d70:	2307      	movs	r3, #7
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4826      	ldr	r0, [pc, #152]	; (8001e14 <HAL_UART_MspInit+0x110>)
 8001d7c:	f001 fba4 	bl	80034c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2025      	movs	r0, #37	; 0x25
 8001d86:	f000 ff66 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d8a:	2025      	movs	r0, #37	; 0x25
 8001d8c:	f000 ff7f 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d90:	e038      	b.n	8001e04 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <HAL_UART_MspInit+0x114>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d133      	bne.n	8001e04 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_UART_MspInit+0x10c>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de4:	2307      	movs	r3, #7
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <HAL_UART_MspInit+0x110>)
 8001df0:	f001 fb6a 	bl	80034c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2026      	movs	r0, #38	; 0x26
 8001dfa:	f000 ff2c 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dfe:	2026      	movs	r0, #38	; 0x26
 8001e00:	f000 ff45 	bl	8002c8e <HAL_NVIC_EnableIRQ>
}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	; 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40004400 	.word	0x40004400

08001e1c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <HAL_FSMC_MspInit+0x88>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d131      	bne.n	8001e9c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_FSMC_MspInit+0x88>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_FSMC_MspInit+0x8c>)
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_FSMC_MspInit+0x8c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6393      	str	r3, [r2, #56]	; 0x38
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_FSMC_MspInit+0x8c>)
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001e5a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001e5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <HAL_FSMC_MspInit+0x90>)
 8001e76:	f001 fb27 	bl	80034c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e7a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001e7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <HAL_FSMC_MspInit+0x94>)
 8001e96:	f001 fb17 	bl	80034c8 <HAL_GPIO_Init>
 8001e9a:	e000      	b.n	8001e9e <HAL_FSMC_MspInit+0x82>
    return;
 8001e9c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000040 	.word	0x20000040
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40020c00 	.word	0x40020c00

08001eb4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ebc:	f7ff ffae 	bl	8001e1c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <NMI_Handler+0x4>

08001ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <HardFault_Handler+0x4>

08001ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <MemManage_Handler+0x4>

08001eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f14:	f000 f96e 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <TIM2_IRQHandler+0x10>)
 8001f22:	f003 fb93 	bl	800564c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000032c 	.word	0x2000032c

08001f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <USART1_IRQHandler+0x10>)
 8001f36:	f004 faf3 	bl	8006520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200001e8 	.word	0x200001e8

08001f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <USART2_IRQHandler+0x10>)
 8001f4a:	f004 fae9 	bl	8006520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000374 	.word	0x20000374

08001f58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <DMA2_Stream0_IRQHandler+0x10>)
 8001f5e:	f001 f849 	bl	8002ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000022c 	.word	0x2000022c

08001f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <uart_init_rs232>:
uint8_t msg[100];

uint8_t receive_buffer1 = 0, receive_buffer2 = 0;
uint8_t check_esp = 0;

void uart_init_rs232(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001f94:	2201      	movs	r2, #1
 8001f96:	4903      	ldr	r1, [pc, #12]	; (8001fa4 <uart_init_rs232+0x14>)
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <uart_init_rs232+0x18>)
 8001f9a:	f004 fa90 	bl	80064be <HAL_UART_Receive_IT>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000044 	.word	0x20000044
 8001fa8:	200001e8 	.word	0x200001e8

08001fac <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <uart_init_esp+0x14>)
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <uart_init_esp+0x18>)
 8001fb6:	f004 fa82 	bl	80064be <HAL_UART_Receive_IT>
//	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000045 	.word	0x20000045
 8001fc4:	20000374 	.word	0x20000374

08001fc8 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <uart_EspSendBytes+0x20>)
 8001fdc:	f004 f9dd 	bl	800639a <HAL_UART_Transmit>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000374 	.word	0x20000374

08001fec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_UART_RxCpltCallback+0x74>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10a      	bne.n	8002014 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001ffe:	230a      	movs	r3, #10
 8002000:	2201      	movs	r2, #1
 8002002:	4918      	ldr	r1, [pc, #96]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 8002004:	4818      	ldr	r0, [pc, #96]	; (8002068 <HAL_UART_RxCpltCallback+0x7c>)
 8002006:	f004 f9c8 	bl	800639a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800200a:	2201      	movs	r2, #1
 800200c:	4915      	ldr	r1, [pc, #84]	; (8002064 <HAL_UART_RxCpltCallback+0x78>)
 800200e:	4816      	ldr	r0, [pc, #88]	; (8002068 <HAL_UART_RxCpltCallback+0x7c>)
 8002010:	f004 fa55 	bl	80064be <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_UART_RxCpltCallback+0x80>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d11b      	bne.n	8002056 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_UART_RxCpltCallback+0x84>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b4f      	cmp	r3, #79	; 0x4f
 8002024:	d103      	bne.n	800202e <HAL_UART_RxCpltCallback+0x42>
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_UART_RxCpltCallback+0x88>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e00e      	b.n	800204c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_UART_RxCpltCallback+0x84>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b61      	cmp	r3, #97	; 0x61
 8002034:	d103      	bne.n	800203e <HAL_UART_RxCpltCallback+0x52>
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_UART_RxCpltCallback+0x8c>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e006      	b.n	800204c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_UART_RxCpltCallback+0x84>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b41      	cmp	r3, #65	; 0x41
 8002044:	d102      	bne.n	800204c <HAL_UART_RxCpltCallback+0x60>
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_UART_RxCpltCallback+0x8c>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800204c:	2201      	movs	r2, #1
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <HAL_UART_RxCpltCallback+0x84>)
 8002050:	480a      	ldr	r0, [pc, #40]	; (800207c <HAL_UART_RxCpltCallback+0x90>)
 8002052:	f004 fa34 	bl	80064be <HAL_UART_Receive_IT>
	}
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40011000 	.word	0x40011000
 8002064:	20000044 	.word	0x20000044
 8002068:	200001e8 	.word	0x200001e8
 800206c:	40004400 	.word	0x40004400
 8002070:	20000045 	.word	0x20000045
 8002074:	20000046 	.word	0x20000046
 8002078:	20000038 	.word	0x20000038
 800207c:	20000374 	.word	0x20000374

08002080 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	if(check_esp == 1) {
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <uart_EspCheck+0x2c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <uart_EspCheck+0x1a>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 800208c:	2201      	movs	r2, #1
 800208e:	2110      	movs	r1, #16
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <uart_EspCheck+0x30>)
 8002092:	f001 fbb5 	bl	8003800 <HAL_GPIO_WritePin>
		return 1;
 8002096:	2301      	movs	r3, #1
 8002098:	e005      	b.n	80020a6 <uart_EspCheck+0x26>
	}
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2110      	movs	r1, #16
 800209e:	4804      	ldr	r0, [pc, #16]	; (80020b0 <uart_EspCheck+0x30>)
 80020a0:	f001 fbae 	bl	8003800 <HAL_GPIO_WritePin>
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000046 	.word	0x20000046
 80020b0:	40021000 	.word	0x40021000

080020b4 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <DEC2BCD+0x44>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	b258      	sxtb	r0, r3
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <DEC2BCD+0x44>)
 80020d2:	fba3 1302 	umull	r1, r3, r3, r2
 80020d6:	08d9      	lsrs	r1, r3, #3
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4303      	orrs	r3, r0
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	cccccccd 	.word	0xcccccccd

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002118:	4c0b      	ldr	r4, [pc, #44]	; (8002148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002126:	f7ff ff21 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212a:	f005 f981 	bl	8007430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7fe fefd 	bl	8000f2c <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002140:	0800a468 	.word	0x0800a468
  ldr r2, =_sbss
 8002144:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002148:	200003c8 	.word	0x200003c8

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 fd61 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	200f      	movs	r0, #15
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff fbe6 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fd79 	bl	8002caa <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f000 fd41 	bl	8002c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000010 	.word	0x20000010
 80021f0:	2000000c 	.word	0x2000000c

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000010 	.word	0x20000010
 8002218:	200003c4 	.word	0x200003c4

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200003c4 	.word	0x200003c4

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000010 	.word	0x20000010

0800227c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e033      	b.n	80022fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fb82 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022c2:	f023 0302 	bic.w	r3, r3, #2
 80022c6:	f043 0202 	orr.w	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa68 	bl	80027a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ea:	e001      	b.n	80022f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Start_DMA+0x1e>
 800231e:	2302      	movs	r3, #2
 8002320:	e0e9      	b.n	80024f6 <HAL_ADC_Start_DMA+0x1f2>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d018      	beq.n	800236a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002348:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_ADC_Start_DMA+0x1fc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6d      	ldr	r2, [pc, #436]	; (8002504 <HAL_ADC_Start_DMA+0x200>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9a      	lsrs	r2, r3, #18
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800235c:	e002      	b.n	8002364 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3b01      	subs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f9      	bne.n	800235e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002378:	d107      	bne.n	800238a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 80a1 	bne.w	80024dc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d8:	d106      	bne.n	80023e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f023 0206 	bic.w	r2, r3, #6
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
 80023e6:	e002      	b.n	80023ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f6:	4b44      	ldr	r3, [pc, #272]	; (8002508 <HAL_ADC_Start_DMA+0x204>)
 80023f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a43      	ldr	r2, [pc, #268]	; (800250c <HAL_ADC_Start_DMA+0x208>)
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4a42      	ldr	r2, [pc, #264]	; (8002510 <HAL_ADC_Start_DMA+0x20c>)
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	4a41      	ldr	r2, [pc, #260]	; (8002514 <HAL_ADC_Start_DMA+0x210>)
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800241a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800242a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	334c      	adds	r3, #76	; 0x4c
 8002446:	4619      	mov	r1, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f000 fce8 	bl	8002e20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2b00      	cmp	r3, #0
 800245a:	d12a      	bne.n	80024b2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <HAL_ADC_Start_DMA+0x214>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d015      	beq.n	8002492 <HAL_ADC_Start_DMA+0x18e>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2c      	ldr	r2, [pc, #176]	; (800251c <HAL_ADC_Start_DMA+0x218>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d105      	bne.n	800247c <HAL_ADC_Start_DMA+0x178>
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_ADC_Start_DMA+0x204>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_ADC_Start_DMA+0x21c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d136      	bne.n	80024f4 <HAL_ADC_Start_DMA+0x1f0>
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_ADC_Start_DMA+0x204>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d130      	bne.n	80024f4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d129      	bne.n	80024f4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e020      	b.n	80024f4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_ADC_Start_DMA+0x214>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d11b      	bne.n	80024f4 <HAL_ADC_Start_DMA+0x1f0>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d114      	bne.n	80024f4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	e00b      	b.n	80024f4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000008 	.word	0x20000008
 8002504:	431bde83 	.word	0x431bde83
 8002508:	40012300 	.word	0x40012300
 800250c:	0800299d 	.word	0x0800299d
 8002510:	08002a57 	.word	0x08002a57
 8002514:	08002a73 	.word	0x08002a73
 8002518:	40012000 	.word	0x40012000
 800251c:	40012100 	.word	0x40012100
 8002520:	40012200 	.word	0x40012200

08002524 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1c>
 8002578:	2302      	movs	r3, #2
 800257a:	e105      	b.n	8002788 <HAL_ADC_ConfigChannel+0x228>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b09      	cmp	r3, #9
 800258a:	d925      	bls.n	80025d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	2207      	movs	r2, #7
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43da      	mvns	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	400a      	ands	r2, r1
 80025b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68d9      	ldr	r1, [r3, #12]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4403      	add	r3, r0
 80025ca:	3b1e      	subs	r3, #30
 80025cc:	409a      	lsls	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	e022      	b.n	800261e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	2207      	movs	r2, #7
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	4618      	mov	r0, r3
 800260e:	4603      	mov	r3, r0
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4403      	add	r3, r0
 8002614:	409a      	lsls	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d824      	bhi.n	8002670 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b05      	subs	r3, #5
 8002638:	221f      	movs	r2, #31
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b05      	subs	r3, #5
 8002662:	fa00 f203 	lsl.w	r2, r0, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
 800266e:	e04c      	b.n	800270a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d824      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b23      	subs	r3, #35	; 0x23
 800268a:	221f      	movs	r2, #31
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43da      	mvns	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	400a      	ands	r2, r1
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b23      	subs	r3, #35	; 0x23
 80026b4:	fa00 f203 	lsl.w	r2, r0, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
 80026c0:	e023      	b.n	800270a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b41      	subs	r3, #65	; 0x41
 80026d4:	221f      	movs	r2, #31
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	400a      	ands	r2, r1
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b41      	subs	r3, #65	; 0x41
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <HAL_ADC_ConfigChannel+0x234>)
 800270c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_ADC_ConfigChannel+0x238>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d109      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1cc>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b12      	cmp	r3, #18
 800271e:	d105      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_ADC_ConfigChannel+0x238>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d123      	bne.n	800277e <HAL_ADC_ConfigChannel+0x21e>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b10      	cmp	r3, #16
 800273c:	d003      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x1e6>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b11      	cmp	r3, #17
 8002744:	d11b      	bne.n	800277e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d111      	bne.n	800277e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_ADC_ConfigChannel+0x23c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <HAL_ADC_ConfigChannel+0x240>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	0c9a      	lsrs	r2, r3, #18
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002770:	e002      	b.n	8002778 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f9      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40012300 	.word	0x40012300
 8002798:	40012000 	.word	0x40012000
 800279c:	20000008 	.word	0x20000008
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ac:	4b79      	ldr	r3, [pc, #484]	; (8002994 <ADC_Init+0x1f0>)
 80027ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	021a      	lsls	r2, r3, #8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	4a58      	ldr	r2, [pc, #352]	; (8002998 <ADC_Init+0x1f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800284a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800286c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	e00f      	b.n	80028a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0202 	bic.w	r2, r2, #2
 80028b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7e1b      	ldrb	r3, [r3, #24]
 80028bc:	005a      	lsls	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	3b01      	subs	r3, #1
 80028fc:	035a      	lsls	r2, r3, #13
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	e007      	b.n	8002918 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002916:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	3b01      	subs	r3, #1
 8002934:	051a      	lsls	r2, r3, #20
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800294c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800295a:	025a      	lsls	r2, r3, #9
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	029a      	lsls	r2, r3, #10
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40012300 	.word	0x40012300
 8002998:	0f000001 	.word	0x0f000001

0800299c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d13c      	bne.n	8002a30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d12b      	bne.n	8002a28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d127      	bne.n	8002a28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d119      	bne.n	8002a28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0220 	bic.w	r2, r2, #32
 8002a02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fd7b 	bl	8002524 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a2e:	e00e      	b.n	8002a4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fd85 	bl	800254c <HAL_ADC_ErrorCallback>
}
 8002a42:	e004      	b.n	8002a4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff fd67 	bl	8002538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f043 0204 	orr.w	r2, r3, #4
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff fd5a 	bl	800254c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0b      	blt.n	8002b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <__NVIC_EnableIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff8e 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff29 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff ff3e 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff8e 	bl	8002b94 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff31 	bl	8002b04 <__NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffa2 	bl	8002bfc <SysTick_Config>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff faa4 	bl	800221c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e099      	b.n	8002e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d00:	e00f      	b.n	8002d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d02:	f7ff fa8b 	bl	800221c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d908      	bls.n	8002d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e078      	b.n	8002e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e8      	bne.n	8002d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <HAL_DMA_Init+0x158>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d107      	bne.n	8002d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4313      	orrs	r3, r2
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0307 	bic.w	r3, r3, #7
 8002da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d117      	bne.n	8002de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fb01 	bl	80033d0 <DMA_CheckFifoParam>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002de2:	2301      	movs	r3, #1
 8002de4:	e016      	b.n	8002e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fab8 	bl	8003364 <DMA_CalcBaseAndBitshift>
 8002df4:	4603      	mov	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	223f      	movs	r2, #63	; 0x3f
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	f010803f 	.word	0xf010803f

08002e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Start_IT+0x26>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e040      	b.n	8002ec8 <HAL_DMA_Start_IT+0xa8>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d12f      	bne.n	8002eba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fa4a 	bl	8003308 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	223f      	movs	r2, #63	; 0x3f
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0216 	orr.w	r2, r2, #22
 8002e8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0208 	orr.w	r2, r2, #8
 8002ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e005      	b.n	8002ec6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ede:	f7ff f99d 	bl	800221c <HAL_GetTick>
 8002ee2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d008      	beq.n	8002f02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e052      	b.n	8002fa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0216 	bic.w	r2, r2, #22
 8002f10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_DMA_Abort+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0208 	bic.w	r2, r2, #8
 8002f40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f52:	e013      	b.n	8002f7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f54:	f7ff f962 	bl	800221c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d90c      	bls.n	8002f7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e015      	b.n	8002fa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e4      	bne.n	8002f54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	223f      	movs	r2, #63	; 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00c      	b.n	8002fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_DMA_IRQHandler+0x258>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a92      	ldr	r2, [pc, #584]	; (8003250 <HAL_DMA_IRQHandler+0x25c>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0a9b      	lsrs	r3, r3, #10
 800300c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	2208      	movs	r2, #8
 8003020:	409a      	lsls	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01a      	beq.n	8003060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	2208      	movs	r2, #8
 800304e:	409a      	lsls	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2201      	movs	r2, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2201      	movs	r2, #1
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f043 0202 	orr.w	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	2204      	movs	r2, #4
 800309c:	409a      	lsls	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d012      	beq.n	80030cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2204      	movs	r2, #4
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2210      	movs	r2, #16
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d043      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d03c      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	2210      	movs	r2, #16
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d018      	beq.n	8003136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d108      	bne.n	8003124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d024      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
 8003122:	e01f      	b.n	8003164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01b      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
 8003134:	e016      	b.n	8003164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0208 	bic.w	r2, r2, #8
 8003152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	2220      	movs	r2, #32
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 808e 	beq.w	8003292 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8086 	beq.w	8003292 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	2220      	movs	r2, #32
 800318c:	409a      	lsls	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b05      	cmp	r3, #5
 800319c:	d136      	bne.n	800320c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0216 	bic.w	r2, r2, #22
 80031ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <HAL_DMA_IRQHandler+0x1da>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0208 	bic.w	r2, r2, #8
 80031dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	223f      	movs	r2, #63	; 0x3f
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d07d      	beq.n	80032fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
        }
        return;
 800320a:	e078      	b.n	80032fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01c      	beq.n	8003254 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d108      	bne.n	800323a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	2b00      	cmp	r3, #0
 800322e:	d030      	beq.n	8003292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
 8003238:	e02b      	b.n	8003292 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d027      	beq.n	8003292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4798      	blx	r3
 800324a:	e022      	b.n	8003292 <HAL_DMA_IRQHandler+0x29e>
 800324c:	20000008 	.word	0x20000008
 8003250:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0210 	bic.w	r2, r2, #16
 8003270:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	2b00      	cmp	r3, #0
 8003298:	d032      	beq.n	8003300 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d022      	beq.n	80032ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2205      	movs	r2, #5
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3301      	adds	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d307      	bcc.n	80032da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f2      	bne.n	80032be <HAL_DMA_IRQHandler+0x2ca>
 80032d8:	e000      	b.n	80032dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
 80032fc:	e000      	b.n	8003300 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032fe:	bf00      	nop
    }
  }
}
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop

08003308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003324:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d108      	bne.n	8003348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003346:	e007      	b.n	8003358 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	3b10      	subs	r3, #16
 8003374:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800337e:	4a13      	ldr	r2, [pc, #76]	; (80033cc <DMA_CalcBaseAndBitshift+0x68>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d909      	bls.n	80033a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	1d1a      	adds	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	659a      	str	r2, [r3, #88]	; 0x58
 80033a4:	e007      	b.n	80033b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	aaaaaaab 	.word	0xaaaaaaab
 80033cc:	0800a450 	.word	0x0800a450

080033d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11f      	bne.n	800342a <DMA_CheckFifoParam+0x5a>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d856      	bhi.n	800349e <DMA_CheckFifoParam+0xce>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <DMA_CheckFifoParam+0x28>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	0800341b 	.word	0x0800341b
 8003400:	08003409 	.word	0x08003409
 8003404:	0800349f 	.word	0x0800349f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d046      	beq.n	80034a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003418:	e043      	b.n	80034a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003422:	d140      	bne.n	80034a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003428:	e03d      	b.n	80034a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003432:	d121      	bne.n	8003478 <DMA_CheckFifoParam+0xa8>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d837      	bhi.n	80034aa <DMA_CheckFifoParam+0xda>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <DMA_CheckFifoParam+0x70>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003451 	.word	0x08003451
 8003444:	08003457 	.word	0x08003457
 8003448:	08003451 	.word	0x08003451
 800344c:	08003469 	.word	0x08003469
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      break;
 8003454:	e030      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d025      	beq.n	80034ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003466:	e022      	b.n	80034ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003470:	d11f      	bne.n	80034b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003476:	e01c      	b.n	80034b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d903      	bls.n	8003486 <DMA_CheckFifoParam+0xb6>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d003      	beq.n	800348c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003484:	e018      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
      break;
 800348a:	e015      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00e      	beq.n	80034b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e00b      	b.n	80034b6 <DMA_CheckFifoParam+0xe6>
      break;
 800349e:	bf00      	nop
 80034a0:	e00a      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
 80034a4:	e008      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      break;
 80034a6:	bf00      	nop
 80034a8:	e006      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      break;
 80034aa:	bf00      	nop
 80034ac:	e004      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      break;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <DMA_CheckFifoParam+0xe8>
      break;
 80034b6:	bf00      	nop
    }
  } 
  
  return status; 
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b089      	sub	sp, #36	; 0x24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	e16b      	b.n	80037bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034e4:	2201      	movs	r2, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	f040 815a 	bne.w	80037b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d005      	beq.n	800351a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003516:	2b02      	cmp	r3, #2
 8003518:	d130      	bne.n	800357c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 0201 	and.w	r2, r3, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b03      	cmp	r3, #3
 8003586:	d017      	beq.n	80035b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d123      	bne.n	800360c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	08da      	lsrs	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3208      	adds	r2, #8
 80035cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	220f      	movs	r2, #15
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	69b9      	ldr	r1, [r7, #24]
 8003608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0203 	and.w	r2, r3, #3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80b4 	beq.w	80037b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b60      	ldr	r3, [pc, #384]	; (80037d4 <HAL_GPIO_Init+0x30c>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	4a5f      	ldr	r2, [pc, #380]	; (80037d4 <HAL_GPIO_Init+0x30c>)
 8003658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800365c:	6453      	str	r3, [r2, #68]	; 0x44
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <HAL_GPIO_Init+0x30c>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_GPIO_Init+0x310>)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	089b      	lsrs	r3, r3, #2
 8003670:	3302      	adds	r3, #2
 8003672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	220f      	movs	r2, #15
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_GPIO_Init+0x314>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d02b      	beq.n	80036ee <HAL_GPIO_Init+0x226>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a51      	ldr	r2, [pc, #324]	; (80037e0 <HAL_GPIO_Init+0x318>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d025      	beq.n	80036ea <HAL_GPIO_Init+0x222>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a50      	ldr	r2, [pc, #320]	; (80037e4 <HAL_GPIO_Init+0x31c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01f      	beq.n	80036e6 <HAL_GPIO_Init+0x21e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_GPIO_Init+0x320>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d019      	beq.n	80036e2 <HAL_GPIO_Init+0x21a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4e      	ldr	r2, [pc, #312]	; (80037ec <HAL_GPIO_Init+0x324>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_GPIO_Init+0x216>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4d      	ldr	r2, [pc, #308]	; (80037f0 <HAL_GPIO_Init+0x328>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00d      	beq.n	80036da <HAL_GPIO_Init+0x212>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <HAL_GPIO_Init+0x32c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <HAL_GPIO_Init+0x20e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_GPIO_Init+0x330>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_GPIO_Init+0x20a>
 80036ce:	2307      	movs	r3, #7
 80036d0:	e00e      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036d2:	2308      	movs	r3, #8
 80036d4:	e00c      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036d6:	2306      	movs	r3, #6
 80036d8:	e00a      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036da:	2305      	movs	r3, #5
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036de:	2304      	movs	r3, #4
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036ee:	2300      	movs	r3, #0
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f002 0203 	and.w	r2, r2, #3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x310>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003732:	4a32      	ldr	r2, [pc, #200]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003738:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_GPIO_Init+0x334>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <HAL_GPIO_Init+0x334>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003786:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_GPIO_Init+0x334>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b0:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_GPIO_Init+0x334>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	f67f ae90 	bls.w	80034e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021800 	.word	0x40021800
 80037f8:	40021c00 	.word	0x40021c00
 80037fc:	40013c00 	.word	0x40013c00

08003800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800381c:	e003      	b.n	8003826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	041a      	lsls	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	619a      	str	r2, [r3, #24]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e12b      	b.n	8003a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fe f936 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2224      	movs	r2, #36	; 0x24
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003898:	f000 fee2 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 800389c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a81      	ldr	r2, [pc, #516]	; (8003aa8 <HAL_I2C_Init+0x274>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d807      	bhi.n	80038b8 <HAL_I2C_Init+0x84>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a80      	ldr	r2, [pc, #512]	; (8003aac <HAL_I2C_Init+0x278>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bf94      	ite	ls
 80038b0:	2301      	movls	r3, #1
 80038b2:	2300      	movhi	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e006      	b.n	80038c6 <HAL_I2C_Init+0x92>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a7d      	ldr	r2, [pc, #500]	; (8003ab0 <HAL_I2C_Init+0x27c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	bf94      	ite	ls
 80038c0:	2301      	movls	r3, #1
 80038c2:	2300      	movhi	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0e7      	b.n	8003a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a78      	ldr	r2, [pc, #480]	; (8003ab4 <HAL_I2C_Init+0x280>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9b      	lsrs	r3, r3, #18
 80038d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a6a      	ldr	r2, [pc, #424]	; (8003aa8 <HAL_I2C_Init+0x274>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d802      	bhi.n	8003908 <HAL_I2C_Init+0xd4>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	3301      	adds	r3, #1
 8003906:	e009      	b.n	800391c <HAL_I2C_Init+0xe8>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	4a69      	ldr	r2, [pc, #420]	; (8003ab8 <HAL_I2C_Init+0x284>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	3301      	adds	r3, #1
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	430b      	orrs	r3, r1
 8003922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800392e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	495c      	ldr	r1, [pc, #368]	; (8003aa8 <HAL_I2C_Init+0x274>)
 8003938:	428b      	cmp	r3, r1
 800393a:	d819      	bhi.n	8003970 <HAL_I2C_Init+0x13c>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1e59      	subs	r1, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fbb1 f3f3 	udiv	r3, r1, r3
 800394a:	1c59      	adds	r1, r3, #1
 800394c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003950:	400b      	ands	r3, r1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_I2C_Init+0x138>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1e59      	subs	r1, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fbb1 f3f3 	udiv	r3, r1, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396a:	e051      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 800396c:	2304      	movs	r3, #4
 800396e:	e04f      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <HAL_I2C_Init+0x168>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	440b      	add	r3, r1
 8003986:	fbb0 f3f3 	udiv	r3, r0, r3
 800398a:	3301      	adds	r3, #1
 800398c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e012      	b.n	80039c2 <HAL_I2C_Init+0x18e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1e58      	subs	r0, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	0099      	lsls	r1, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Init+0x196>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e022      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10e      	bne.n	80039f0 <HAL_I2C_Init+0x1bc>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e58      	subs	r0, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	440b      	add	r3, r1
 80039e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ee:	e00f      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e58      	subs	r0, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	0099      	lsls	r1, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	6809      	ldr	r1, [r1, #0]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6911      	ldr	r1, [r2, #16]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	000186a0 	.word	0x000186a0
 8003aac:	001e847f 	.word	0x001e847f
 8003ab0:	003d08ff 	.word	0x003d08ff
 8003ab4:	431bde83 	.word	0x431bde83
 8003ab8:	10624dd3 	.word	0x10624dd3

08003abc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7fe fba6 	bl	800221c <HAL_GetTick>
 8003ad0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	f040 8111 	bne.w	8003d06 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2319      	movs	r3, #25
 8003aea:	2201      	movs	r2, #1
 8003aec:	4988      	ldr	r1, [pc, #544]	; (8003d10 <HAL_I2C_IsDeviceReady+0x254>)
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f912 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	e104      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_I2C_IsDeviceReady+0x50>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0fd      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x24c>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d007      	beq.n	8003b32 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a70      	ldr	r2, [pc, #448]	; (8003d14 <HAL_I2C_IsDeviceReady+0x258>)
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b64:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f8d0 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8c:	d103      	bne.n	8003b96 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0b6      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fb37 	bl	800221c <HAL_GetTick>
 8003bae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bde:	e025      	b.n	8003c2c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003be0:	f7fe fb1c 	bl	800221c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d302      	bcc.n	8003bf6 <HAL_I2C_IsDeviceReady+0x13a>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22a0      	movs	r2, #160	; 0xa0
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2ba0      	cmp	r3, #160	; 0xa0
 8003c36:	d005      	beq.n	8003c44 <HAL_I2C_IsDeviceReady+0x188>
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_I2C_IsDeviceReady+0x188>
 8003c3e:	7dbb      	ldrb	r3, [r7, #22]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0cd      	beq.n	8003be0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d129      	bne.n	8003cae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c68:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2319      	movs	r3, #25
 8003c86:	2201      	movs	r2, #1
 8003c88:	4921      	ldr	r1, [pc, #132]	; (8003d10 <HAL_I2C_IsDeviceReady+0x254>)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f844 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e036      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e02c      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2319      	movs	r3, #25
 8003cce:	2201      	movs	r2, #1
 8003cd0:	490f      	ldr	r1, [pc, #60]	; (8003d10 <HAL_I2C_IsDeviceReady+0x254>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f820 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e012      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	f4ff af32 	bcc.w	8003b56 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	00100002 	.word	0x00100002
 8003d14:	ffff0000 	.word	0xffff0000

08003d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d28:	e025      	b.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d021      	beq.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fe fa73 	bl	800221c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d116      	bne.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e023      	b.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10d      	bne.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	e00c      	b.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	43da      	mvns	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4013      	ands	r3, r2
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf0c      	ite	eq
 8003dae:	2301      	moveq	r3, #1
 8003db0:	2300      	movne	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d0b6      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e264      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d075      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de6:	4ba3      	ldr	r3, [pc, #652]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d00c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df2:	4ba0      	ldr	r3, [pc, #640]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d112      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfe:	4b9d      	ldr	r3, [pc, #628]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0a:	d10b      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	4b99      	ldr	r3, [pc, #612]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05b      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x108>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d157      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e23f      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x74>
 8003e2e:	4b91      	ldr	r3, [pc, #580]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a90      	ldr	r2, [pc, #576]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x98>
 8003e46:	4b8b      	ldr	r3, [pc, #556]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a8a      	ldr	r2, [pc, #552]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b88      	ldr	r3, [pc, #544]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a87      	ldr	r2, [pc, #540]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0xb0>
 8003e60:	4b84      	ldr	r3, [pc, #528]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a83      	ldr	r2, [pc, #524]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b81      	ldr	r3, [pc, #516]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a80      	ldr	r2, [pc, #512]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fe f9cc 	bl	800221c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe f9c8 	bl	800221c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e204      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b76      	ldr	r3, [pc, #472]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0xc0>
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f9b8 	bl	800221c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fe f9b4 	bl	800221c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1f0      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xe8>
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d063      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eea:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d11c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d116      	bne.n	8003f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	4b5c      	ldr	r3, [pc, #368]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e1c4      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4952      	ldr	r1, [pc, #328]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	e03a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f38:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <HAL_RCC_OscConfig+0x2b0>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3e:	f7fe f96d 	bl	800221c <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f46:	f7fe f969 	bl	800221c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1a5      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4940      	ldr	r1, [pc, #256]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
 8003f78:	e015      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_OscConfig+0x2b0>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe f94c 	bl	800221c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fe f948 	bl	800221c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e184      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d030      	beq.n	8004014 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d016      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fba:	4b30      	ldr	r3, [pc, #192]	; (800407c <HAL_RCC_OscConfig+0x2b4>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fe f92c 	bl	800221c <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe f928 	bl	800221c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e164      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x200>
 8003fe6:	e015      	b.n	8004014 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x2b4>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fee:	f7fe f915 	bl	800221c <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff6:	f7fe f911 	bl	800221c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e14d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a0 	beq.w	8004162 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
 8004042:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_OscConfig+0x2b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d121      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <HAL_RCC_OscConfig+0x2b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a07      	ldr	r2, [pc, #28]	; (8004080 <HAL_RCC_OscConfig+0x2b8>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406a:	f7fe f8d7 	bl	800221c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004070:	e011      	b.n	8004096 <HAL_RCC_OscConfig+0x2ce>
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	42470000 	.word	0x42470000
 800407c:	42470e80 	.word	0x42470e80
 8004080:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004084:	f7fe f8ca 	bl	800221c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e106      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_RCC_OscConfig+0x4e4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d106      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2f0>
 80040aa:	4b81      	ldr	r3, [pc, #516]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a80      	ldr	r2, [pc, #512]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	e01c      	b.n	80040f2 <HAL_RCC_OscConfig+0x32a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d10c      	bne.n	80040da <HAL_RCC_OscConfig+0x312>
 80040c0:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a7a      	ldr	r2, [pc, #488]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040c6:	f043 0304 	orr.w	r3, r3, #4
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	4b78      	ldr	r3, [pc, #480]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a77      	ldr	r2, [pc, #476]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	e00b      	b.n	80040f2 <HAL_RCC_OscConfig+0x32a>
 80040da:	4b75      	ldr	r3, [pc, #468]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a74      	ldr	r2, [pc, #464]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a71      	ldr	r2, [pc, #452]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d015      	beq.n	8004126 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fe f88f 	bl	800221c <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fe f88b 	bl	800221c <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e0c5      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	4b65      	ldr	r3, [pc, #404]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ee      	beq.n	8004102 <HAL_RCC_OscConfig+0x33a>
 8004124:	e014      	b.n	8004150 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004126:	f7fe f879 	bl	800221c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fe f875 	bl	800221c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0af      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	4b5a      	ldr	r3, [pc, #360]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ee      	bne.n	800412e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d105      	bne.n	8004162 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004156:	4b56      	ldr	r3, [pc, #344]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a55      	ldr	r2, [pc, #340]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 800415c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 809b 	beq.w	80042a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d05c      	beq.n	8004232 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d141      	bne.n	8004204 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b4c      	ldr	r3, [pc, #304]	; (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe f849 	bl	800221c <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7fe f845 	bl	800221c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e081      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a0:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	019b      	lsls	r3, r3, #6
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	3b01      	subs	r3, #1
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	4937      	ldr	r1, [pc, #220]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fe f81e 	bl	800221c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe f81a 	bl	800221c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e056      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x41c>
 8004202:	e04e      	b.n	80042a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004204:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_OscConfig+0x4ec>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fe f807 	bl	800221c <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004212:	f7fe f803 	bl	800221c <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e03f      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004224:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x44a>
 8004230:	e037      	b.n	80042a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e032      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d028      	beq.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d121      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d11a      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004274:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004276:	4293      	cmp	r3, r2
 8004278:	d111      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	3b01      	subs	r3, #1
 8004288:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d107      	bne.n	800429e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40007000 	.word	0x40007000
 80042b0:	40023800 	.word	0x40023800
 80042b4:	42470060 	.word	0x42470060

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0cc      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b68      	ldr	r3, [pc, #416]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d90c      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b65      	ldr	r3, [pc, #404]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e2:	4b63      	ldr	r3, [pc, #396]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b8      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a58      	ldr	r2, [pc, #352]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a52      	ldr	r2, [pc, #328]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800432e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b50      	ldr	r3, [pc, #320]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	494d      	ldr	r1, [pc, #308]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d044      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d119      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e07f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d003      	beq.n	8004376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	2b03      	cmp	r3, #3
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004376:	4b3f      	ldr	r3, [pc, #252]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e067      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4934      	ldr	r1, [pc, #208]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a8:	f7fd ff38 	bl	800221c <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fd ff34 	bl	800221c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e04f      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d20c      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e032      	b.n	8004466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4916      	ldr	r1, [pc, #88]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	490e      	ldr	r1, [pc, #56]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800443e:	f000 f821 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004442:	4602      	mov	r2, r0
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	490a      	ldr	r1, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x1c0>)
 8004450:	5ccb      	ldrb	r3, [r1, r3]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_ClockConfig+0x1c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd fe98 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00
 8004474:	40023800 	.word	0x40023800
 8004478:	0800a438 	.word	0x0800a438
 800447c:	20000008 	.word	0x20000008
 8004480:	2000000c 	.word	0x2000000c

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800449c:	4b67      	ldr	r3, [pc, #412]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d00d      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x40>
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	f200 80bd 	bhi.w	8004628 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x34>
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x3a>
 80044b6:	e0b7      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b61      	ldr	r3, [pc, #388]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044ba:	60bb      	str	r3, [r7, #8]
       break;
 80044bc:	e0b7      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044c0:	60bb      	str	r3, [r7, #8]
      break;
 80044c2:	e0b4      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b5d      	ldr	r3, [pc, #372]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ce:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04d      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	ea02 0800 	and.w	r8, r2, r0
 80044f2:	ea03 0901 	and.w	r9, r3, r1
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	014b      	lsls	r3, r1, #5
 8004504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004508:	0142      	lsls	r2, r0, #5
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	ebb0 0008 	subs.w	r0, r0, r8
 8004512:	eb61 0109 	sbc.w	r1, r1, r9
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004524:	0182      	lsls	r2, r0, #6
 8004526:	1a12      	subs	r2, r2, r0
 8004528:	eb63 0301 	sbc.w	r3, r3, r1
 800452c:	f04f 0000 	mov.w	r0, #0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	00d9      	lsls	r1, r3, #3
 8004536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800453a:	00d0      	lsls	r0, r2, #3
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	eb12 0208 	adds.w	r2, r2, r8
 8004544:	eb43 0309 	adc.w	r3, r3, r9
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	0259      	lsls	r1, r3, #9
 8004552:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004556:	0250      	lsls	r0, r2, #9
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	461a      	mov	r2, r3
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f7fb fe2e 	bl	80001c8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e04a      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004576:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	461a      	mov	r2, r3
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	ea02 0400 	and.w	r4, r2, r0
 800458e:	ea03 0501 	and.w	r5, r3, r1
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	014b      	lsls	r3, r1, #5
 80045a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045a4:	0142      	lsls	r2, r0, #5
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	1b00      	subs	r0, r0, r4
 80045ac:	eb61 0105 	sbc.w	r1, r1, r5
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	018b      	lsls	r3, r1, #6
 80045ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045be:	0182      	lsls	r2, r0, #6
 80045c0:	1a12      	subs	r2, r2, r0
 80045c2:	eb63 0301 	sbc.w	r3, r3, r1
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	00d9      	lsls	r1, r3, #3
 80045d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d4:	00d0      	lsls	r0, r2, #3
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	1912      	adds	r2, r2, r4
 80045dc:	eb45 0303 	adc.w	r3, r5, r3
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	0299      	lsls	r1, r3, #10
 80045ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045ee:	0290      	lsls	r0, r2, #10
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	f7fb fde2 	bl	80001c8 <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4613      	mov	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	60bb      	str	r3, [r7, #8]
      break;
 8004626:	e002      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800462a:	60bb      	str	r3, [r7, #8]
      break;
 800462c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462e:	68bb      	ldr	r3, [r7, #8]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
 8004640:	00f42400 	.word	0x00f42400
 8004644:	007a1200 	.word	0x007a1200

08004648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_RCC_GetHCLKFreq+0x14>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000008 	.word	0x20000008

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004664:	f7ff fff0 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0a9b      	lsrs	r3, r3, #10
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	0800a448 	.word	0x0800a448

08004688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800468c:	f7ff ffdc 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0b5b      	lsrs	r3, r3, #13
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4903      	ldr	r1, [pc, #12]	; (80046ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40023800 	.word	0x40023800
 80046ac:	0800a448 	.word	0x0800a448

080046b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07b      	b.n	80047ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d009      	beq.n	80046e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	61da      	str	r2, [r3, #28]
 80046da:	e005      	b.n	80046e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fd fa2a 	bl	8001b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	ea42 0103 	orr.w	r1, r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f003 0104 	and.w	r1, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0210 	and.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b088      	sub	sp, #32
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_SPI_Transmit+0x22>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e126      	b.n	8004a32 <HAL_SPI_Transmit+0x270>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ec:	f7fd fd16 	bl	800221c <HAL_GetTick>
 80047f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d002      	beq.n	8004808 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004802:	2302      	movs	r3, #2
 8004804:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004806:	e10b      	b.n	8004a20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x52>
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004818:	e102      	b.n	8004a20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2203      	movs	r2, #3
 800481e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004860:	d10f      	bne.n	8004882 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004880:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d007      	beq.n	80048a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a8:	d14b      	bne.n	8004942 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_SPI_Transmit+0xf6>
 80048b2:	8afb      	ldrh	r3, [r7, #22]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d13e      	bne.n	8004936 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	881a      	ldrh	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048dc:	e02b      	b.n	8004936 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d112      	bne.n	8004912 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	881a      	ldrh	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	1c9a      	adds	r2, r3, #2
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004910:	e011      	b.n	8004936 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004912:	f7fd fc83 	bl	800221c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d803      	bhi.n	800492a <HAL_SPI_Transmit+0x168>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d102      	bne.n	8004930 <HAL_SPI_Transmit+0x16e>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004934:	e074      	b.n	8004a20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ce      	bne.n	80048de <HAL_SPI_Transmit+0x11c>
 8004940:	e04c      	b.n	80049dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_SPI_Transmit+0x18e>
 800494a:	8afb      	ldrh	r3, [r7, #22]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d140      	bne.n	80049d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004976:	e02c      	b.n	80049d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b02      	cmp	r3, #2
 8004984:	d113      	bne.n	80049ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	7812      	ldrb	r2, [r2, #0]
 8004992:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80049ac:	e011      	b.n	80049d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ae:	f7fd fc35 	bl	800221c <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d803      	bhi.n	80049c6 <HAL_SPI_Transmit+0x204>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d102      	bne.n	80049cc <HAL_SPI_Transmit+0x20a>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049d0:	e026      	b.n	8004a20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1cd      	bne.n	8004978 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fbcb 	bl	800517c <SPI_EndRxTxTransaction>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e000      	b.n	8004a20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a30:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b088      	sub	sp, #32
 8004a3e:	af02      	add	r7, sp, #8
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4613      	mov	r3, r2
 8004a48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a56:	d112      	bne.n	8004a7e <HAL_SPI_Receive+0x44>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10e      	bne.n	8004a7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2204      	movs	r2, #4
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f8f1 	bl	8004c5c <HAL_SPI_TransmitReceive>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	e0ea      	b.n	8004c54 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_SPI_Receive+0x52>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0e3      	b.n	8004c54 <HAL_SPI_Receive+0x21a>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a94:	f7fd fbc2 	bl	800221c <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aaa:	e0ca      	b.n	8004c42 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_SPI_Receive+0x7e>
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004abc:	e0c1      	b.n	8004c42 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b04:	d10f      	bne.n	8004b26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d007      	beq.n	8004b44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d162      	bne.n	8004c12 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b4c:	e02e      	b.n	8004bac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d115      	bne.n	8004b88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f103 020c 	add.w	r2, r3, #12
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b86:	e011      	b.n	8004bac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b88:	f7fd fb48 	bl	800221c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d803      	bhi.n	8004ba0 <HAL_SPI_Receive+0x166>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d102      	bne.n	8004ba6 <HAL_SPI_Receive+0x16c>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004baa:	e04a      	b.n	8004c42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1cb      	bne.n	8004b4e <HAL_SPI_Receive+0x114>
 8004bb6:	e031      	b.n	8004c1c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d113      	bne.n	8004bee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bec:	e011      	b.n	8004c12 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bee:	f7fd fb15 	bl	800221c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d803      	bhi.n	8004c06 <HAL_SPI_Receive+0x1cc>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d102      	bne.n	8004c0c <HAL_SPI_Receive+0x1d2>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c10:	e017      	b.n	8004c42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1cd      	bne.n	8004bb8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fa45 	bl	80050b0 <SPI_EndRxTransaction>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
 8004c3e:	e000      	b.n	8004c42 <HAL_SPI_Receive+0x208>
  }

error :
 8004c40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_SPI_TransmitReceive+0x26>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e18a      	b.n	8004f98 <HAL_SPI_TransmitReceive+0x33c>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c8a:	f7fd fac7 	bl	800221c <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d00f      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x70>
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb2:	d107      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <HAL_SPI_TransmitReceive+0x68>
 8004cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d003      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cca:	e15b      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x82>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x82>
 8004cd8:	887b      	ldrh	r3, [r7, #2]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ce4:	e14e      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d003      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	887a      	ldrh	r2, [r7, #2]
 8004d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	887a      	ldrh	r2, [r7, #2]
 8004d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	887a      	ldrh	r2, [r7, #2]
 8004d22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d007      	beq.n	8004d4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d178      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x10a>
 8004d60:	8b7b      	ldrh	r3, [r7, #26]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d166      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	881a      	ldrh	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	1c9a      	adds	r2, r3, #2
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8a:	e053      	b.n	8004e34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d11b      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x176>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d016      	beq.n	8004dd2 <HAL_SPI_TransmitReceive+0x176>
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d113      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	881a      	ldrh	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	1c9a      	adds	r2, r3, #2
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d119      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x1b8>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d014      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	b292      	uxth	r2, r2
 8004df6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	1c9a      	adds	r2, r3, #2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e10:	2301      	movs	r3, #1
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e14:	f7fd fa02 	bl	800221c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d807      	bhi.n	8004e34 <HAL_SPI_TransmitReceive+0x1d8>
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d003      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e32:	e0a7      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1a6      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x130>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1a1      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x130>
 8004e48:	e07c      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x1fc>
 8004e52:	8b7b      	ldrh	r3, [r7, #26]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d16b      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e7e:	e057      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d11c      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x26c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d017      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x26c>
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d114      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d119      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x2ae>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d014      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f06:	2301      	movs	r3, #1
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f0a:	f7fd f987 	bl	800221c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d803      	bhi.n	8004f22 <HAL_SPI_TransmitReceive+0x2c6>
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d102      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x2cc>
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f2e:	e029      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1a2      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x224>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d19d      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f917 	bl	800517c <SPI_EndRxTxTransaction>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d006      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f60:	e010      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	e000      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3730      	adds	r7, #48	; 0x30
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fb0:	f7fd f934 	bl	800221c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fc0:	f7fd f92c 	bl	800221c <HAL_GetTick>
 8004fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fc6:	4b39      	ldr	r3, [pc, #228]	; (80050ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	015b      	lsls	r3, r3, #5
 8004fcc:	0d1b      	lsrs	r3, r3, #20
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd6:	e054      	b.n	8005082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d050      	beq.n	8005082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fe0:	f7fd f91c 	bl	800221c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d13d      	bne.n	8005072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500e:	d111      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005018:	d004      	beq.n	8005024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005022:	d107      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503c:	d10f      	bne.n	800505e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e017      	b.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3b01      	subs	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	429a      	cmp	r2, r3
 800509e:	d19b      	bne.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000008 	.word	0x20000008

080050b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050c4:	d111      	bne.n	80050ea <SPI_EndRxTransaction+0x3a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ce:	d004      	beq.n	80050da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d8:	d107      	bne.n	80050ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f2:	d12a      	bne.n	800514a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fc:	d012      	beq.n	8005124 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	2180      	movs	r1, #128	; 0x80
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ff49 	bl	8004fa0 <SPI_WaitFlagStateUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02d      	beq.n	8005170 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e026      	b.n	8005172 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	2101      	movs	r1, #1
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff36 	bl	8004fa0 <SPI_WaitFlagStateUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e013      	b.n	8005172 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2200      	movs	r2, #0
 8005152:	2101      	movs	r1, #1
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff ff23 	bl	8004fa0 <SPI_WaitFlagStateUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e000      	b.n	8005172 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005188:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <SPI_EndRxTxTransaction+0x7c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <SPI_EndRxTxTransaction+0x80>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	0d5b      	lsrs	r3, r3, #21
 8005194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a6:	d112      	bne.n	80051ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2180      	movs	r1, #128	; 0x80
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff fef4 	bl	8004fa0 <SPI_WaitFlagStateUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e00f      	b.n	80051ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d0f2      	beq.n	80051ce <SPI_EndRxTxTransaction+0x52>
 80051e8:	e000      	b.n	80051ec <SPI_EndRxTxTransaction+0x70>
        break;
 80051ea:	bf00      	nop
  }

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000008 	.word	0x20000008
 80051fc:	165e9f81 	.word	0x165e9f81

08005200 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e034      	b.n	8005280 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7fc fe42 	bl	8001eb4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3308      	adds	r3, #8
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f002 f828 	bl	8007290 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	461a      	mov	r2, r3
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	f002 f872 	bl	8007334 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6858      	ldr	r0, [r3, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	f002 f8a7 	bl	80073b0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	6892      	ldr	r2, [r2, #8]
 800526a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	6892      	ldr	r2, [r2, #8]
 8005276:	f041 0101 	orr.w	r1, r1, #1
 800527a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e041      	b.n	800531e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fc9c 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 fc7a 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e04e      	b.n	80053de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a23      	ldr	r2, [pc, #140]	; (80053ec <HAL_TIM_Base_Start_IT+0xc4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536a:	d01d      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a19      	ldr	r2, [pc, #100]	; (8005400 <HAL_TIM_Base_Start_IT+0xd8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_TIM_Base_Start_IT+0xdc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d111      	bne.n	80053cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d010      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e007      	b.n	80053dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40001800 	.word	0x40001800

08005408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e041      	b.n	800549e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f839 	bl	80054a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 fbba 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <HAL_TIM_PWM_Start+0x24>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e022      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d109      	bne.n	80054fa <HAL_TIM_PWM_Start+0x3e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	e015      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d109      	bne.n	8005514 <HAL_TIM_PWM_Start+0x58>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e008      	b.n	8005526 <HAL_TIM_PWM_Start+0x6a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e07c      	b.n	8005628 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start+0x82>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	e013      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start+0x92>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	e003      	b.n	8005566 <HAL_TIM_PWM_Start+0xaa>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fe10 	bl	8006194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_TIM_PWM_Start+0x174>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_PWM_Start+0xcc>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <HAL_TIM_PWM_Start+0x178>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_TIM_PWM_Start+0xd0>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_TIM_PWM_Start+0xd2>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_TIM_PWM_Start+0x174>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d01d      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_TIM_PWM_Start+0x17c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d018      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_TIM_PWM_Start+0x180>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_TIM_PWM_Start+0x184>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a16      	ldr	r2, [pc, #88]	; (8005634 <HAL_TIM_PWM_Start+0x178>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a18      	ldr	r2, [pc, #96]	; (8005644 <HAL_TIM_PWM_Start+0x188>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x136>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_TIM_PWM_Start+0x18c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d111      	bne.n	8005616 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b06      	cmp	r3, #6
 8005602:	d010      	beq.n	8005626 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005614:	e007      	b.n	8005626 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40010000 	.word	0x40010000
 8005634:	40010400 	.word	0x40010400
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40014000 	.word	0x40014000
 8005648:	40001800 	.word	0x40001800

0800564c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b02      	cmp	r3, #2
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0202 	mvn.w	r2, #2
 8005678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa77 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa69 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fa7a 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0204 	mvn.w	r2, #4
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa4d 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa3f 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fa50 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b08      	cmp	r3, #8
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b08      	cmp	r3, #8
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0208 	mvn.w	r2, #8
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2204      	movs	r2, #4
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa23 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa15 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa26 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b10      	cmp	r3, #16
 800575c:	d122      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b10      	cmp	r3, #16
 800576a:	d11b      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0210 	mvn.w	r2, #16
 8005774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2208      	movs	r2, #8
 800577a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f9f9 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9eb 	bl	8005b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f9fc 	bl	8005b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d10e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0201 	mvn.w	r2, #1
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc f898 	bl	8001900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d10e      	bne.n	80057fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d107      	bne.n	80057fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fd78 	bl	80062ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d10e      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d107      	bne.n	8005828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9c1 	bl	8005baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b20      	cmp	r3, #32
 8005834:	d10e      	bne.n	8005854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b20      	cmp	r3, #32
 8005842:	d107      	bne.n	8005854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0220 	mvn.w	r2, #32
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fd42 	bl	80062d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005876:	2302      	movs	r3, #2
 8005878:	e0ae      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b0c      	cmp	r3, #12
 8005886:	f200 809f 	bhi.w	80059c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058c5 	.word	0x080058c5
 8005894:	080059c9 	.word	0x080059c9
 8005898:	080059c9 	.word	0x080059c9
 800589c:	080059c9 	.word	0x080059c9
 80058a0:	08005905 	.word	0x08005905
 80058a4:	080059c9 	.word	0x080059c9
 80058a8:	080059c9 	.word	0x080059c9
 80058ac:	080059c9 	.word	0x080059c9
 80058b0:	08005947 	.word	0x08005947
 80058b4:	080059c9 	.word	0x080059c9
 80058b8:	080059c9 	.word	0x080059c9
 80058bc:	080059c9 	.word	0x080059c9
 80058c0:	08005987 	.word	0x08005987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fa18 	bl	8005d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0208 	orr.w	r2, r2, #8
 80058de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0204 	bic.w	r2, r2, #4
 80058ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6999      	ldr	r1, [r3, #24]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	619a      	str	r2, [r3, #24]
      break;
 8005902:	e064      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fa68 	bl	8005de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6999      	ldr	r1, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	619a      	str	r2, [r3, #24]
      break;
 8005944:	e043      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fabd 	bl	8005ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0208 	orr.w	r2, r2, #8
 8005960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0204 	bic.w	r2, r2, #4
 8005970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69d9      	ldr	r1, [r3, #28]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	61da      	str	r2, [r3, #28]
      break;
 8005984:	e023      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fb11 	bl	8005fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	021a      	lsls	r2, r3, #8
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	61da      	str	r2, [r3, #28]
      break;
 80059c6:	e002      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	75fb      	strb	r3, [r7, #23]
      break;
 80059cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_ConfigClockSource+0x1c>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e0b4      	b.n	8005b66 <HAL_TIM_ConfigClockSource+0x186>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a34:	d03e      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3a:	f200 8087 	bhi.w	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	f000 8086 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x172>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	d87f      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b70      	cmp	r3, #112	; 0x70
 8005a4e:	d01a      	beq.n	8005a86 <HAL_TIM_ConfigClockSource+0xa6>
 8005a50:	2b70      	cmp	r3, #112	; 0x70
 8005a52:	d87b      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b60      	cmp	r3, #96	; 0x60
 8005a56:	d050      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x11a>
 8005a58:	2b60      	cmp	r3, #96	; 0x60
 8005a5a:	d877      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b50      	cmp	r3, #80	; 0x50
 8005a5e:	d03c      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0xfa>
 8005a60:	2b50      	cmp	r3, #80	; 0x50
 8005a62:	d873      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d058      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x13a>
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d86f      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b30      	cmp	r3, #48	; 0x30
 8005a6e:	d064      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a70:	2b30      	cmp	r3, #48	; 0x30
 8005a72:	d86b      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d060      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d867      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d05c      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d05a      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a84:	e062      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6899      	ldr	r1, [r3, #8]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f000 fb5d 	bl	8006154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	609a      	str	r2, [r3, #8]
      break;
 8005ab2:	e04f      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6899      	ldr	r1, [r3, #8]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f000 fb46 	bl	8006154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ad6:	609a      	str	r2, [r3, #8]
      break;
 8005ad8:	e03c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 faba 	bl	8006060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2150      	movs	r1, #80	; 0x50
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb13 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005af8:	e02c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f000 fad9 	bl	80060be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2160      	movs	r1, #96	; 0x60
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fb03 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005b18:	e01c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 fa9a 	bl	8006060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2140      	movs	r1, #64	; 0x40
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 faf3 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005b38:	e00c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f000 faea 	bl	800611e <TIM_ITRx_SetConfig>
      break;
 8005b4a:	e003      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b50:	e000      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d013      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d00f      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3d      	ldr	r2, [pc, #244]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00b      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3c      	ldr	r2, [pc, #240]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3b      	ldr	r2, [pc, #236]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2f      	ldr	r2, [pc, #188]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d027      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2c      	ldr	r2, [pc, #176]	; (8005cd8 <TIM_Base_SetConfig+0x118>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d023      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <TIM_Base_SetConfig+0x11c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <TIM_Base_SetConfig+0x120>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d017      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <TIM_Base_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <TIM_Base_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <TIM_Base_SetConfig+0x130>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <TIM_Base_SetConfig+0x134>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a24      	ldr	r2, [pc, #144]	; (8005cf8 <TIM_Base_SetConfig+0x138>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <TIM_Base_SetConfig+0x13c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <TIM_Base_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0xf8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d103      	bne.n	8005cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00
 8005ce4:	40010400 	.word	0x40010400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800
 8005cf4:	40001800 	.word	0x40001800
 8005cf8:	40001c00 	.word	0x40001c00
 8005cfc:	40002000 	.word	0x40002000

08005d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f023 0302 	bic.w	r3, r3, #2
 8005d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <TIM_OC1_SetConfig+0xd8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC1_SetConfig+0x64>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <TIM_OC1_SetConfig+0xdc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10c      	bne.n	8005d7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0308 	bic.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <TIM_OC1_SetConfig+0xd8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC1_SetConfig+0x8e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <TIM_OC1_SetConfig+0xdc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d111      	bne.n	8005db2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	621a      	str	r2, [r3, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40010400 	.word	0x40010400

08005de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0210 	bic.w	r2, r3, #16
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0320 	bic.w	r3, r3, #32
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <TIM_OC2_SetConfig+0xe4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_OC2_SetConfig+0x68>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <TIM_OC2_SetConfig+0xe8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d10d      	bne.n	8005e64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a17      	ldr	r2, [pc, #92]	; (8005ec4 <TIM_OC2_SetConfig+0xe4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_OC2_SetConfig+0x94>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <TIM_OC2_SetConfig+0xe8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d113      	bne.n	8005e9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400

08005ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <TIM_OC3_SetConfig+0xe0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC3_SetConfig+0x66>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <TIM_OC3_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10d      	bne.n	8005f4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a16      	ldr	r2, [pc, #88]	; (8005fac <TIM_OC3_SetConfig+0xe0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_OC3_SetConfig+0x92>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <TIM_OC3_SetConfig+0xe4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d113      	bne.n	8005f86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a12      	ldr	r2, [pc, #72]	; (8006058 <TIM_OC4_SetConfig+0xa4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC4_SetConfig+0x68>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a11      	ldr	r2, [pc, #68]	; (800605c <TIM_OC4_SetConfig+0xa8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d109      	bne.n	8006030 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	019b      	lsls	r3, r3, #6
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40010400 	.word	0x40010400

08006060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0201 	bic.w	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800608a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 030a 	bic.w	r3, r3, #10
 800609c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060be:	b480      	push	{r7}
 80060c0:	b087      	sub	sp, #28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0210 	bic.w	r2, r3, #16
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	f043 0307 	orr.w	r3, r3, #7
 8006140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	431a      	orrs	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2201      	movs	r2, #1
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1a      	ldr	r2, [r3, #32]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	401a      	ands	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	fa01 f303 	lsl.w	r3, r1, r3
 80061cc:	431a      	orrs	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e05a      	b.n	80062ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a21      	ldr	r2, [pc, #132]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d022      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006244:	d01d      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a18      	ldr	r2, [pc, #96]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10c      	bne.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4313      	orrs	r3, r2
 8006292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40000c00 	.word	0x40000c00
 80062cc:	40010400 	.word	0x40010400
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40001800 	.word	0x40001800

080062d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e03f      	b.n	8006392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fb fcec 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2224      	movs	r2, #36	; 0x24
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fddb 	bl	8006f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08a      	sub	sp, #40	; 0x28
 800639e:	af02      	add	r7, sp, #8
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d17c      	bne.n	80064b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <HAL_UART_Transmit+0x2c>
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e075      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Transmit+0x3e>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e06e      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2221      	movs	r2, #33	; 0x21
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fb ff15 	bl	800221c <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006408:	d108      	bne.n	800641c <HAL_UART_Transmit+0x82>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	e003      	b.n	8006424 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800642c:	e02a      	b.n	8006484 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	2180      	movs	r1, #128	; 0x80
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fb1f 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e036      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	3302      	adds	r3, #2
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	e007      	b.n	8006476 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	3301      	adds	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1cf      	bne.n	800642e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2200      	movs	r2, #0
 8006496:	2140      	movs	r1, #64	; 0x40
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 faef 	bl	8006a7c <UART_WaitOnFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e006      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d11d      	bne.n	8006514 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_UART_Receive_IT+0x26>
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e016      	b.n	8006516 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Receive_IT+0x38>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e00f      	b.n	8006516 <HAL_UART_Receive_IT+0x58>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	461a      	mov	r2, r3
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fb24 	bl	8006b58 <UART_Start_Receive_IT>
 8006510:	4603      	mov	r3, r0
 8006512:	e000      	b.n	8006516 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b0ba      	sub	sp, #232	; 0xe8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006546:	2300      	movs	r3, #0
 8006548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800654c:	2300      	movs	r3, #0
 800654e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800655e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10f      	bne.n	8006586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <HAL_UART_IRQHandler+0x66>
 8006572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fc03 	bl	8006d8a <UART_Receive_IT>
      return;
 8006584:	e256      	b.n	8006a34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 80de 	beq.w	800674c <HAL_UART_IRQHandler+0x22c>
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80d1 	beq.w	800674c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xae>
 80065b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_UART_IRQHandler+0xd2>
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f043 0202 	orr.w	r2, r3, #2
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_UART_IRQHandler+0xf6>
 80065fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f043 0204 	orr.w	r2, r3, #4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d011      	beq.n	8006646 <HAL_UART_IRQHandler+0x126>
 8006622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d105      	bne.n	800663a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800662e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f043 0208 	orr.w	r2, r3, #8
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 81ed 	beq.w	8006a2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_UART_IRQHandler+0x14e>
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb8e 	bl	8006d8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	bf0c      	ite	eq
 800667c:	2301      	moveq	r3, #1
 800667e:	2300      	movne	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <HAL_UART_IRQHandler+0x17a>
 8006692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04f      	beq.n	800673a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa96 	bl	8006bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d141      	bne.n	8006732 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3314      	adds	r3, #20
 80066d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1d9      	bne.n	80066ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	4a7d      	ldr	r2, [pc, #500]	; (80068fc <HAL_UART_IRQHandler+0x3dc>)
 8006708:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	4618      	mov	r0, r3
 8006710:	f7fc fc4e 	bl	8002fb0 <HAL_DMA_Abort_IT>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d016      	beq.n	8006748 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	e00e      	b.n	8006748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f990 	bl	8006a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e00a      	b.n	8006748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f98c 	bl	8006a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e006      	b.n	8006748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f988 	bl	8006a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006746:	e170      	b.n	8006a2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	bf00      	nop
    return;
 800674a:	e16e      	b.n	8006a2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	2b01      	cmp	r3, #1
 8006752:	f040 814a 	bne.w	80069ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8143 	beq.w	80069ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 813c 	beq.w	80069ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	f040 80b4 	bne.w	8006900 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8140 	beq.w	8006a2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f080 8139 	bcs.w	8006a2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ce:	f000 8088 	beq.w	80068e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800680a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1d9      	bne.n	80067d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3314      	adds	r3, #20
 8006824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800682e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3314      	adds	r3, #20
 800683e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006842:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006846:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800684a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e1      	bne.n	800681e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800686a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3314      	adds	r3, #20
 800687a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800687e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800688c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e3      	bne.n	800685a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b2:	f023 0310 	bic.w	r3, r3, #16
 80068b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	330c      	adds	r3, #12
 80068c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80068c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e3      	bne.n	80068a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fc faf7 	bl	8002ed0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f8b6 	bl	8006a64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068f8:	e099      	b.n	8006a2e <HAL_UART_IRQHandler+0x50e>
 80068fa:	bf00      	nop
 80068fc:	08006c93 	.word	0x08006c93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006908:	b29b      	uxth	r3, r3
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 808b 	beq.w	8006a32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800691c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8086 	beq.w	8006a32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	330c      	adds	r3, #12
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800693c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800694a:	647a      	str	r2, [r7, #68]	; 0x44
 800694c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e3      	bne.n	8006926 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3314      	adds	r3, #20
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	623b      	str	r3, [r7, #32]
   return(result);
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3314      	adds	r3, #20
 800697e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006982:	633a      	str	r2, [r7, #48]	; 0x30
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e3      	bne.n	800695e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0310 	bic.w	r3, r3, #16
 80069ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069c8:	61fa      	str	r2, [r7, #28]
 80069ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	69b9      	ldr	r1, [r7, #24]
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	617b      	str	r3, [r7, #20]
   return(result);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e3      	bne.n	80069a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f83e 	bl	8006a64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069e8:	e023      	b.n	8006a32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_UART_IRQHandler+0x4ea>
 80069f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f959 	bl	8006cba <UART_Transmit_IT>
    return;
 8006a08:	e014      	b.n	8006a34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00e      	beq.n	8006a34 <HAL_UART_IRQHandler+0x514>
 8006a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d008      	beq.n	8006a34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f999 	bl	8006d5a <UART_EndTransmit_IT>
    return;
 8006a28:	e004      	b.n	8006a34 <HAL_UART_IRQHandler+0x514>
    return;
 8006a2a:	bf00      	nop
 8006a2c:	e002      	b.n	8006a34 <HAL_UART_IRQHandler+0x514>
      return;
 8006a2e:	bf00      	nop
 8006a30:	e000      	b.n	8006a34 <HAL_UART_IRQHandler+0x514>
      return;
 8006a32:	bf00      	nop
  }
}
 8006a34:	37e8      	adds	r7, #232	; 0xe8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop

08006a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b090      	sub	sp, #64	; 0x40
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8c:	e050      	b.n	8006b30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d04c      	beq.n	8006b30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <UART_WaitOnFlagUntilTimeout+0x30>
 8006a9c:	f7fb fbbe 	bl	800221c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d241      	bcs.n	8006b30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006acc:	637a      	str	r2, [r7, #52]	; 0x34
 8006ace:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e5      	bne.n	8006aac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	613b      	str	r3, [r7, #16]
   return(result);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b00:	623a      	str	r2, [r7, #32]
 8006b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	69f9      	ldr	r1, [r7, #28]
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e5      	bne.n	8006ae0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e00f      	b.n	8006b50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d09f      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3740      	adds	r7, #64	; 0x40
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	88fa      	ldrh	r2, [r7, #6]
 8006b76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2222      	movs	r2, #34	; 0x22
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b9c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0201 	orr.w	r2, r2, #1
 8006bac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0220 	orr.w	r2, r2, #32
 8006bbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b095      	sub	sp, #84	; 0x54
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf4:	643a      	str	r2, [r7, #64]	; 0x40
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e5      	bne.n	8006bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f023 0301 	bic.w	r3, r3, #1
 8006c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3314      	adds	r3, #20
 8006c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e5      	bne.n	8006c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d119      	bne.n	8006c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f023 0310 	bic.w	r3, r3, #16
 8006c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c64:	61ba      	str	r2, [r7, #24]
 8006c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6979      	ldr	r1, [r7, #20]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	613b      	str	r3, [r7, #16]
   return(result);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c86:	bf00      	nop
 8006c88:	3754      	adds	r7, #84	; 0x54
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fecf 	bl	8006a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b21      	cmp	r3, #33	; 0x21
 8006ccc:	d13e      	bne.n	8006d4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd6:	d114      	bne.n	8006d02 <UART_Transmit_IT+0x48>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d110      	bne.n	8006d02 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	1c9a      	adds	r2, r3, #2
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	621a      	str	r2, [r3, #32]
 8006d00:	e008      	b.n	8006d14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	1c59      	adds	r1, r3, #1
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6211      	str	r1, [r2, #32]
 8006d0c:	781a      	ldrb	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	4619      	mov	r1, r3
 8006d22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10f      	bne.n	8006d48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fe5e 	bl	8006a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b08c      	sub	sp, #48	; 0x30
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b22      	cmp	r3, #34	; 0x22
 8006d9c:	f040 80ab 	bne.w	8006ef6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d117      	bne.n	8006dda <UART_Receive_IT+0x50>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d113      	bne.n	8006dda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	1c9a      	adds	r2, r3, #2
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8006dd8:	e026      	b.n	8006e28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dec:	d007      	beq.n	8006dfe <UART_Receive_IT+0x74>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <UART_Receive_IT+0x82>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	e008      	b.n	8006e1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4619      	mov	r1, r3
 8006e36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d15a      	bne.n	8006ef2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0220 	bic.w	r2, r2, #32
 8006e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695a      	ldr	r2, [r3, #20]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d135      	bne.n	8006ee8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	330c      	adds	r3, #12
 8006e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	613b      	str	r3, [r7, #16]
   return(result);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f023 0310 	bic.w	r3, r3, #16
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	623a      	str	r2, [r7, #32]
 8006ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	69f9      	ldr	r1, [r7, #28]
 8006ea8:	6a3a      	ldr	r2, [r7, #32]
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e5      	bne.n	8006e82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d10a      	bne.n	8006eda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff fdbf 	bl	8006a64 <HAL_UARTEx_RxEventCallback>
 8006ee6:	e002      	b.n	8006eee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fb f87f 	bl	8001fec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e002      	b.n	8006ef8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e000      	b.n	8006ef8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ef6:	2302      	movs	r3, #2
  }
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3730      	adds	r7, #48	; 0x30
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	b09f      	sub	sp, #124	; 0x7c
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f16:	68d9      	ldr	r1, [r3, #12]
 8006f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	ea40 0301 	orr.w	r3, r0, r1
 8006f20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	431a      	orrs	r2, r3
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f44:	f021 010c 	bic.w	r1, r1, #12
 8006f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5e:	6999      	ldr	r1, [r3, #24]
 8006f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	ea40 0301 	orr.w	r3, r0, r1
 8006f68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4bc5      	ldr	r3, [pc, #788]	; (8007284 <UART_SetConfig+0x384>)
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d004      	beq.n	8006f7e <UART_SetConfig+0x7e>
 8006f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4bc3      	ldr	r3, [pc, #780]	; (8007288 <UART_SetConfig+0x388>)
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d103      	bne.n	8006f86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f7e:	f7fd fb83 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8006f82:	6778      	str	r0, [r7, #116]	; 0x74
 8006f84:	e002      	b.n	8006f8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f86:	f7fd fb6b 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8006f8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f94:	f040 80b6 	bne.w	8007104 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9a:	461c      	mov	r4, r3
 8006f9c:	f04f 0500 	mov.w	r5, #0
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	462b      	mov	r3, r5
 8006fa4:	1891      	adds	r1, r2, r2
 8006fa6:	6439      	str	r1, [r7, #64]	; 0x40
 8006fa8:	415b      	adcs	r3, r3
 8006faa:	647b      	str	r3, [r7, #68]	; 0x44
 8006fac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fb0:	1912      	adds	r2, r2, r4
 8006fb2:	eb45 0303 	adc.w	r3, r5, r3
 8006fb6:	f04f 0000 	mov.w	r0, #0
 8006fba:	f04f 0100 	mov.w	r1, #0
 8006fbe:	00d9      	lsls	r1, r3, #3
 8006fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fc4:	00d0      	lsls	r0, r2, #3
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	1911      	adds	r1, r2, r4
 8006fcc:	6639      	str	r1, [r7, #96]	; 0x60
 8006fce:	416b      	adcs	r3, r5
 8006fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8006fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	1891      	adds	r1, r2, r2
 8006fde:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fe0:	415b      	adcs	r3, r3
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fe8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006fec:	f7f9 f8ec 	bl	80001c8 <__aeabi_uldivmod>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4ba5      	ldr	r3, [pc, #660]	; (800728c <UART_SetConfig+0x38c>)
 8006ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	011e      	lsls	r6, r3, #4
 8006ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007000:	461c      	mov	r4, r3
 8007002:	f04f 0500 	mov.w	r5, #0
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	1891      	adds	r1, r2, r2
 800700c:	6339      	str	r1, [r7, #48]	; 0x30
 800700e:	415b      	adcs	r3, r3
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
 8007012:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007016:	1912      	adds	r2, r2, r4
 8007018:	eb45 0303 	adc.w	r3, r5, r3
 800701c:	f04f 0000 	mov.w	r0, #0
 8007020:	f04f 0100 	mov.w	r1, #0
 8007024:	00d9      	lsls	r1, r3, #3
 8007026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800702a:	00d0      	lsls	r0, r2, #3
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	1911      	adds	r1, r2, r4
 8007032:	65b9      	str	r1, [r7, #88]	; 0x58
 8007034:	416b      	adcs	r3, r5
 8007036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	461a      	mov	r2, r3
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	1891      	adds	r1, r2, r2
 8007044:	62b9      	str	r1, [r7, #40]	; 0x28
 8007046:	415b      	adcs	r3, r3
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800704a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800704e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007052:	f7f9 f8b9 	bl	80001c8 <__aeabi_uldivmod>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4b8c      	ldr	r3, [pc, #560]	; (800728c <UART_SetConfig+0x38c>)
 800705c:	fba3 1302 	umull	r1, r3, r3, r2
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	3332      	adds	r3, #50	; 0x32
 800706e:	4a87      	ldr	r2, [pc, #540]	; (800728c <UART_SetConfig+0x38c>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800707c:	441e      	add	r6, r3
 800707e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007080:	4618      	mov	r0, r3
 8007082:	f04f 0100 	mov.w	r1, #0
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	1894      	adds	r4, r2, r2
 800708c:	623c      	str	r4, [r7, #32]
 800708e:	415b      	adcs	r3, r3
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
 8007092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007096:	1812      	adds	r2, r2, r0
 8007098:	eb41 0303 	adc.w	r3, r1, r3
 800709c:	f04f 0400 	mov.w	r4, #0
 80070a0:	f04f 0500 	mov.w	r5, #0
 80070a4:	00dd      	lsls	r5, r3, #3
 80070a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070aa:	00d4      	lsls	r4, r2, #3
 80070ac:	4622      	mov	r2, r4
 80070ae:	462b      	mov	r3, r5
 80070b0:	1814      	adds	r4, r2, r0
 80070b2:	653c      	str	r4, [r7, #80]	; 0x50
 80070b4:	414b      	adcs	r3, r1
 80070b6:	657b      	str	r3, [r7, #84]	; 0x54
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	461a      	mov	r2, r3
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	1891      	adds	r1, r2, r2
 80070c4:	61b9      	str	r1, [r7, #24]
 80070c6:	415b      	adcs	r3, r3
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070d2:	f7f9 f879 	bl	80001c8 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4b6c      	ldr	r3, [pc, #432]	; (800728c <UART_SetConfig+0x38c>)
 80070dc:	fba3 1302 	umull	r1, r3, r3, r2
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	2164      	movs	r1, #100	; 0x64
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	3332      	adds	r3, #50	; 0x32
 80070ee:	4a67      	ldr	r2, [pc, #412]	; (800728c <UART_SetConfig+0x38c>)
 80070f0:	fba2 2303 	umull	r2, r3, r2, r3
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f003 0207 	and.w	r2, r3, #7
 80070fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4432      	add	r2, r6
 8007100:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007102:	e0b9      	b.n	8007278 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007106:	461c      	mov	r4, r3
 8007108:	f04f 0500 	mov.w	r5, #0
 800710c:	4622      	mov	r2, r4
 800710e:	462b      	mov	r3, r5
 8007110:	1891      	adds	r1, r2, r2
 8007112:	6139      	str	r1, [r7, #16]
 8007114:	415b      	adcs	r3, r3
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800711c:	1912      	adds	r2, r2, r4
 800711e:	eb45 0303 	adc.w	r3, r5, r3
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	00d9      	lsls	r1, r3, #3
 800712c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007130:	00d0      	lsls	r0, r2, #3
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	eb12 0804 	adds.w	r8, r2, r4
 800713a:	eb43 0905 	adc.w	r9, r3, r5
 800713e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4618      	mov	r0, r3
 8007144:	f04f 0100 	mov.w	r1, #0
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	008b      	lsls	r3, r1, #2
 8007152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007156:	0082      	lsls	r2, r0, #2
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 f834 	bl	80001c8 <__aeabi_uldivmod>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4b49      	ldr	r3, [pc, #292]	; (800728c <UART_SetConfig+0x38c>)
 8007166:	fba3 2302 	umull	r2, r3, r3, r2
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	011e      	lsls	r6, r3, #4
 800716e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007170:	4618      	mov	r0, r3
 8007172:	f04f 0100 	mov.w	r1, #0
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	1894      	adds	r4, r2, r2
 800717c:	60bc      	str	r4, [r7, #8]
 800717e:	415b      	adcs	r3, r3
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007186:	1812      	adds	r2, r2, r0
 8007188:	eb41 0303 	adc.w	r3, r1, r3
 800718c:	f04f 0400 	mov.w	r4, #0
 8007190:	f04f 0500 	mov.w	r5, #0
 8007194:	00dd      	lsls	r5, r3, #3
 8007196:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800719a:	00d4      	lsls	r4, r2, #3
 800719c:	4622      	mov	r2, r4
 800719e:	462b      	mov	r3, r5
 80071a0:	1814      	adds	r4, r2, r0
 80071a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80071a4:	414b      	adcs	r3, r1
 80071a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f04f 0100 	mov.w	r1, #0
 80071b2:	f04f 0200 	mov.w	r2, #0
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	008b      	lsls	r3, r1, #2
 80071bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071c0:	0082      	lsls	r2, r0, #2
 80071c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80071c6:	f7f8 ffff 	bl	80001c8 <__aeabi_uldivmod>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4b2f      	ldr	r3, [pc, #188]	; (800728c <UART_SetConfig+0x38c>)
 80071d0:	fba3 1302 	umull	r1, r3, r3, r2
 80071d4:	095b      	lsrs	r3, r3, #5
 80071d6:	2164      	movs	r1, #100	; 0x64
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	3332      	adds	r3, #50	; 0x32
 80071e2:	4a2a      	ldr	r2, [pc, #168]	; (800728c <UART_SetConfig+0x38c>)
 80071e4:	fba2 2303 	umull	r2, r3, r2, r3
 80071e8:	095b      	lsrs	r3, r3, #5
 80071ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071ee:	441e      	add	r6, r3
 80071f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f2:	4618      	mov	r0, r3
 80071f4:	f04f 0100 	mov.w	r1, #0
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	1894      	adds	r4, r2, r2
 80071fe:	603c      	str	r4, [r7, #0]
 8007200:	415b      	adcs	r3, r3
 8007202:	607b      	str	r3, [r7, #4]
 8007204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007208:	1812      	adds	r2, r2, r0
 800720a:	eb41 0303 	adc.w	r3, r1, r3
 800720e:	f04f 0400 	mov.w	r4, #0
 8007212:	f04f 0500 	mov.w	r5, #0
 8007216:	00dd      	lsls	r5, r3, #3
 8007218:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800721c:	00d4      	lsls	r4, r2, #3
 800721e:	4622      	mov	r2, r4
 8007220:	462b      	mov	r3, r5
 8007222:	eb12 0a00 	adds.w	sl, r2, r0
 8007226:	eb43 0b01 	adc.w	fp, r3, r1
 800722a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	4618      	mov	r0, r3
 8007230:	f04f 0100 	mov.w	r1, #0
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	008b      	lsls	r3, r1, #2
 800723e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007242:	0082      	lsls	r2, r0, #2
 8007244:	4650      	mov	r0, sl
 8007246:	4659      	mov	r1, fp
 8007248:	f7f8 ffbe 	bl	80001c8 <__aeabi_uldivmod>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4b0e      	ldr	r3, [pc, #56]	; (800728c <UART_SetConfig+0x38c>)
 8007252:	fba3 1302 	umull	r1, r3, r3, r2
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	2164      	movs	r1, #100	; 0x64
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	3332      	adds	r3, #50	; 0x32
 8007264:	4a09      	ldr	r2, [pc, #36]	; (800728c <UART_SetConfig+0x38c>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4432      	add	r2, r6
 8007276:	609a      	str	r2, [r3, #8]
}
 8007278:	bf00      	nop
 800727a:	377c      	adds	r7, #124	; 0x7c
 800727c:	46bd      	mov	sp, r7
 800727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007282:	bf00      	nop
 8007284:	40011000 	.word	0x40011000
 8007288:	40011400 	.word	0x40011400
 800728c:	51eb851f 	.word	0x51eb851f

08007290 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4b20      	ldr	r3, [pc, #128]	; (8007330 <FSMC_NORSRAM_Init+0xa0>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80072ba:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80072c0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80072c6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80072cc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80072d2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80072d8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80072de:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80072e4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80072ea:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80072f0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80072f6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80072fc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d103      	bne.n	8007314 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007312:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	fff00080 	.word	0xfff00080

08007334 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007356:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007362:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800736a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007372:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	3b01      	subs	r3, #1
 800737a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800737c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	3b02      	subs	r3, #2
 8007384:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007386:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800738c:	4313      	orrs	r3, r2
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6979      	ldr	r1, [r7, #20]
 800739c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
	...

080073b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073c8:	d122      	bne.n	8007410 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4b15      	ldr	r3, [pc, #84]	; (800742c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80073d8:	4013      	ands	r3, r2
 80073da:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073e6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80073ee:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80073f6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80073fc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6979      	ldr	r1, [r7, #20]
 800740a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800740e:	e005      	b.n	800741c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	cff00000 	.word	0xcff00000

08007430 <__libc_init_array>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	4d0d      	ldr	r5, [pc, #52]	; (8007468 <__libc_init_array+0x38>)
 8007434:	4c0d      	ldr	r4, [pc, #52]	; (800746c <__libc_init_array+0x3c>)
 8007436:	1b64      	subs	r4, r4, r5
 8007438:	10a4      	asrs	r4, r4, #2
 800743a:	2600      	movs	r6, #0
 800743c:	42a6      	cmp	r6, r4
 800743e:	d109      	bne.n	8007454 <__libc_init_array+0x24>
 8007440:	4d0b      	ldr	r5, [pc, #44]	; (8007470 <__libc_init_array+0x40>)
 8007442:	4c0c      	ldr	r4, [pc, #48]	; (8007474 <__libc_init_array+0x44>)
 8007444:	f000 f820 	bl	8007488 <_init>
 8007448:	1b64      	subs	r4, r4, r5
 800744a:	10a4      	asrs	r4, r4, #2
 800744c:	2600      	movs	r6, #0
 800744e:	42a6      	cmp	r6, r4
 8007450:	d105      	bne.n	800745e <__libc_init_array+0x2e>
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	f855 3b04 	ldr.w	r3, [r5], #4
 8007458:	4798      	blx	r3
 800745a:	3601      	adds	r6, #1
 800745c:	e7ee      	b.n	800743c <__libc_init_array+0xc>
 800745e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007462:	4798      	blx	r3
 8007464:	3601      	adds	r6, #1
 8007466:	e7f2      	b.n	800744e <__libc_init_array+0x1e>
 8007468:	0800a460 	.word	0x0800a460
 800746c:	0800a460 	.word	0x0800a460
 8007470:	0800a460 	.word	0x0800a460
 8007474:	0800a464 	.word	0x0800a464

08007478 <memset>:
 8007478:	4402      	add	r2, r0
 800747a:	4603      	mov	r3, r0
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	f803 1b01 	strb.w	r1, [r3], #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
