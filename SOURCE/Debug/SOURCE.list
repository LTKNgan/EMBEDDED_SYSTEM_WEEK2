
SOURCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000307c  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a914  0800a914  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a91c  0800a91c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000003ac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e12b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b2d  00000000  00000000  0003e1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00041d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  000433b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000540b  00000000  00000000  00044908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc72  00000000  00000000  00049d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e01e7  00000000  00000000  00066985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146b6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006250  00000000  00000000  00146bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007880 	.word	0x08007880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007880 	.word	0x08007880

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <button_init+0x14>)
 8000582:	f003 fa1d 	bl	80039c0 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020c00 	.word	0x40020c00

08000590 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	4802      	ldr	r0, [pc, #8]	; (80005a0 <buzzer_init+0x10>)
 8000598:	f004 fd58 	bl	800504c <HAL_TIM_PWM_Start>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200001ec 	.word	0x200001ec

080005a4 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005a8:	201e      	movs	r0, #30
 80005aa:	f001 fe63 	bl	8002274 <DEC2BCD>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <ds3231_init+0x80>)
 80005b4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005b6:	2016      	movs	r0, #22
 80005b8:	f001 fe5c 	bl	8002274 <DEC2BCD>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <ds3231_init+0x80>)
 80005c2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005c4:	2015      	movs	r0, #21
 80005c6:	f001 fe55 	bl	8002274 <DEC2BCD>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <ds3231_init+0x80>)
 80005d0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005d2:	2006      	movs	r0, #6
 80005d4:	f001 fe4e 	bl	8002274 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <ds3231_init+0x80>)
 80005de:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005e0:	200f      	movs	r0, #15
 80005e2:	f001 fe47 	bl	8002274 <DEC2BCD>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <ds3231_init+0x80>)
 80005ec:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80005ee:	2009      	movs	r0, #9
 80005f0:	f001 fe40 	bl	8002274 <DEC2BCD>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <ds3231_init+0x80>)
 80005fa:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80005fc:	2017      	movs	r0, #23
 80005fe:	f001 fe39 	bl	8002274 <DEC2BCD>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <ds3231_init+0x80>)
 8000608:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800060a:	2332      	movs	r3, #50	; 0x32
 800060c:	2203      	movs	r2, #3
 800060e:	21d0      	movs	r1, #208	; 0xd0
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <ds3231_init+0x84>)
 8000612:	f003 fb33 	bl	8003c7c <HAL_I2C_IsDeviceReady>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d000      	beq.n	800061e <ds3231_init+0x7a>
		while(1);
 800061c:	e7fe      	b.n	800061c <ds3231_init+0x78>
	};
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000bc 	.word	0x200000bc
 8000628:	20000100 	.word	0x20000100

0800062c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <LCD_WR_REG+0x1c>)
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	8013      	strh	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	600ffffe 	.word	0x600ffffe

0800064c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <LCD_WR_DATA+0x1c>)
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	8053      	strh	r3, [r2, #2]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	600ffffe 	.word	0x600ffffe

0800066c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <LCD_RD_DATA+0x20>)
 8000674:	885b      	ldrh	r3, [r3, #2]
 8000676:	b29b      	uxth	r3, r3
 8000678:	80fb      	strh	r3, [r7, #6]
	return ram;
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	b29b      	uxth	r3, r3
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	600ffffe 	.word	0x600ffffe

08000690 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	4603      	mov	r3, r0
 80006a4:	80bb      	strh	r3, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	807b      	strh	r3, [r7, #2]
 80006aa:	4613      	mov	r3, r2
 80006ac:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80006ae:	202a      	movs	r0, #42	; 0x2a
 80006b0:	f7ff ffbc 	bl	800062c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffc6 	bl	800064c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffc0 	bl	800064c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffba 	bl	800064c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	b29b      	uxth	r3, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb4 	bl	800064c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80006e4:	202b      	movs	r0, #43	; 0x2b
 80006e6:	f7ff ffa1 	bl	800062c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffab 	bl	800064c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ffa5 	bl	800064c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000702:	883b      	ldrh	r3, [r7, #0]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff9f 	bl	800064c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800070e:	883b      	ldrh	r3, [r7, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	b29b      	uxth	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff99 	bl	800064c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800071a:	202c      	movs	r0, #44	; 0x2c
 800071c:	f7ff ff86 	bl	800062c <LCD_WR_REG>
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <lcd_Clear+0x60>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	3b01      	subs	r3, #1
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <lcd_Clear+0x60>)
 800073c:	885b      	ldrh	r3, [r3, #2]
 800073e:	3b01      	subs	r3, #1
 8000740:	b29b      	uxth	r3, r3
 8000742:	2100      	movs	r1, #0
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff ffa3 	bl	8000690 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800074a:	2300      	movs	r3, #0
 800074c:	81fb      	strh	r3, [r7, #14]
 800074e:	e011      	b.n	8000774 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000750:	2300      	movs	r3, #0
 8000752:	81bb      	strh	r3, [r7, #12]
 8000754:	e006      	b.n	8000764 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff77 	bl	800064c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800075e:	89bb      	ldrh	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	81bb      	strh	r3, [r7, #12]
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <lcd_Clear+0x60>)
 8000766:	885b      	ldrh	r3, [r3, #2]
 8000768:	89ba      	ldrh	r2, [r7, #12]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3f3      	bcc.n	8000756 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	3301      	adds	r3, #1
 8000772:	81fb      	strh	r3, [r7, #14]
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <lcd_Clear+0x60>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	89fa      	ldrh	r2, [r7, #14]
 800077a:	429a      	cmp	r2, r3
 800077c:	d3e8      	bcc.n	8000750 <lcd_Clear+0x28>
		}
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000c4 	.word	0x200000c4

0800078c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
 8000796:	460b      	mov	r3, r1
 8000798:	80bb      	strh	r3, [r7, #4]
 800079a:	4613      	mov	r3, r2
 800079c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800079e:	88bb      	ldrh	r3, [r7, #4]
 80007a0:	88fa      	ldrh	r2, [r7, #6]
 80007a2:	88b9      	ldrh	r1, [r7, #4]
 80007a4:	88f8      	ldrh	r0, [r7, #6]
 80007a6:	f7ff ff73 	bl	8000690 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff4d 	bl	800064c <LCD_WR_DATA>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4604      	mov	r4, r0
 80007c4:	4608      	mov	r0, r1
 80007c6:	4611      	mov	r1, r2
 80007c8:	461a      	mov	r2, r3
 80007ca:	4623      	mov	r3, r4
 80007cc:	80fb      	strh	r3, [r7, #6]
 80007ce:	4603      	mov	r3, r0
 80007d0:	80bb      	strh	r3, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
 80007d6:	4613      	mov	r3, r2
 80007d8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80007da:	2300      	movs	r3, #0
 80007dc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80007e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007e6:	085b      	lsrs	r3, r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4413      	add	r3, r2
 8000806:	b29a      	uxth	r2, r3
 8000808:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800080c:	b29b      	uxth	r3, r3
 800080e:	fb12 f303 	smulbb	r3, r2, r3
 8000812:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	3b20      	subs	r3, #32
 8000818:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	b29a      	uxth	r2, r3
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	4413      	add	r3, r2
 8000822:	b29b      	uxth	r3, r3
 8000824:	3b01      	subs	r3, #1
 8000826:	b29c      	uxth	r4, r3
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800082c:	b29a      	uxth	r2, r3
 800082e:	88bb      	ldrh	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	b29b      	uxth	r3, r3
 8000834:	3b01      	subs	r3, #1
 8000836:	b29b      	uxth	r3, r3
 8000838:	88b9      	ldrh	r1, [r7, #4]
 800083a:	88f8      	ldrh	r0, [r7, #6]
 800083c:	4622      	mov	r2, r4
 800083e:	f7ff ff27 	bl	8000690 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000842:	2300      	movs	r3, #0
 8000844:	827b      	strh	r3, [r7, #18]
 8000846:	e07a      	b.n	800093e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000848:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800084c:	2b0c      	cmp	r3, #12
 800084e:	d028      	beq.n	80008a2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000850:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000854:	2b10      	cmp	r3, #16
 8000856:	d108      	bne.n	800086a <lcd_ShowChar+0xae>
 8000858:	78fa      	ldrb	r2, [r7, #3]
 800085a:	8a7b      	ldrh	r3, [r7, #18]
 800085c:	493c      	ldr	r1, [pc, #240]	; (8000950 <lcd_ShowChar+0x194>)
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	440a      	add	r2, r1
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	e01b      	b.n	80008a2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800086a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800086e:	2b18      	cmp	r3, #24
 8000870:	d10b      	bne.n	800088a <lcd_ShowChar+0xce>
 8000872:	78fa      	ldrb	r2, [r7, #3]
 8000874:	8a79      	ldrh	r1, [r7, #18]
 8000876:	4837      	ldr	r0, [pc, #220]	; (8000954 <lcd_ShowChar+0x198>)
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	4403      	add	r3, r0
 8000882:	440b      	add	r3, r1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	75fb      	strb	r3, [r7, #23]
 8000888:	e00b      	b.n	80008a2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800088a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800088e:	2b20      	cmp	r3, #32
 8000890:	d15a      	bne.n	8000948 <lcd_ShowChar+0x18c>
 8000892:	78fa      	ldrb	r2, [r7, #3]
 8000894:	8a7b      	ldrh	r3, [r7, #18]
 8000896:	4930      	ldr	r1, [pc, #192]	; (8000958 <lcd_ShowChar+0x19c>)
 8000898:	0192      	lsls	r2, r2, #6
 800089a:	440a      	add	r2, r1
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	75bb      	strb	r3, [r7, #22]
 80008a6:	e044      	b.n	8000932 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80008a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d120      	bne.n	80008f2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80008b0:	7dfa      	ldrb	r2, [r7, #23]
 80008b2:	7dbb      	ldrb	r3, [r7, #22]
 80008b4:	fa42 f303 	asr.w	r3, r2, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d004      	beq.n	80008ca <lcd_ShowChar+0x10e>
 80008c0:	883b      	ldrh	r3, [r7, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fec2 	bl	800064c <LCD_WR_DATA>
 80008c8:	e003      	b.n	80008d2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80008ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff febd 	bl	800064c <LCD_WR_DATA>
				m++;
 80008d2:	7d7b      	ldrb	r3, [r7, #21]
 80008d4:	3301      	adds	r3, #1
 80008d6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80008d8:	7d7b      	ldrb	r3, [r7, #21]
 80008da:	7bfa      	ldrb	r2, [r7, #15]
 80008dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80008e0:	fb02 f201 	mul.w	r2, r2, r1
 80008e4:	1a9b      	subs	r3, r3, r2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d11f      	bne.n	800092c <lcd_ShowChar+0x170>
				{
					m=0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]
					break;
 80008f0:	e022      	b.n	8000938 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80008f2:	7dfa      	ldrb	r2, [r7, #23]
 80008f4:	7dbb      	ldrb	r3, [r7, #22]
 80008f6:	fa42 f303 	asr.w	r3, r2, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d005      	beq.n	800090e <lcd_ShowChar+0x152>
 8000902:	883a      	ldrh	r2, [r7, #0]
 8000904:	88b9      	ldrh	r1, [r7, #4]
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff3f 	bl	800078c <lcd_DrawPoint>
				x++;
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	3301      	adds	r3, #1
 8000912:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	8a3b      	ldrh	r3, [r7, #16]
 8000918:	1ad2      	subs	r2, r2, r3
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	429a      	cmp	r2, r3
 800091e:	d105      	bne.n	800092c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000920:	8a3b      	ldrh	r3, [r7, #16]
 8000922:	80fb      	strh	r3, [r7, #6]
					y++;
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	3301      	adds	r3, #1
 8000928:	80bb      	strh	r3, [r7, #4]
					break;
 800092a:	e005      	b.n	8000938 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800092c:	7dbb      	ldrb	r3, [r7, #22]
 800092e:	3301      	adds	r3, #1
 8000930:	75bb      	strb	r3, [r7, #22]
 8000932:	7dbb      	ldrb	r3, [r7, #22]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d9b7      	bls.n	80008a8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000938:	8a7b      	ldrh	r3, [r7, #18]
 800093a:	3301      	adds	r3, #1
 800093c:	827b      	strh	r3, [r7, #18]
 800093e:	8a7a      	ldrh	r2, [r7, #18]
 8000940:	89bb      	ldrh	r3, [r7, #12]
 8000942:	429a      	cmp	r2, r3
 8000944:	d380      	bcc.n	8000848 <lcd_ShowChar+0x8c>
 8000946:	e000      	b.n	800094a <lcd_ShowChar+0x18e>
		else return;
 8000948:	bf00      	nop
				}
			}
		}
	}
}
 800094a:	371c      	adds	r7, #28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	08007940 	.word	0x08007940
 8000954:	08007f30 	.word	0x08007f30
 8000958:	08009100 	.word	0x08009100

0800095c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	4613      	mov	r3, r2
 800096a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800096c:	2301      	movs	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000970:	e004      	b.n	800097c <mypow+0x20>
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	1e5a      	subs	r2, r3, #1
 8000980:	71ba      	strb	r2, [r7, #6]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f5      	bne.n	8000972 <mypow+0x16>
	return result;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b08b      	sub	sp, #44	; 0x2c
 8000998:	af04      	add	r7, sp, #16
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	ed87 0a02 	vstr	s0, [r7, #8]
 80009a2:	4611      	mov	r1, r2
 80009a4:	461a      	mov	r2, r3
 80009a6:	4623      	mov	r3, r4
 80009a8:	81fb      	strh	r3, [r7, #14]
 80009aa:	4603      	mov	r3, r0
 80009ac:	81bb      	strh	r3, [r7, #12]
 80009ae:	460b      	mov	r3, r1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	4613      	mov	r3, r2
 80009b4:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 80009b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 80009be:	edd7 7a02 	vldr	s15, [r7, #8]
 80009c2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000a9c <lcd_ShowFloatNum+0x108>
 80009c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009ce:	ee17 3a90 	vmov	r3, s15
 80009d2:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	75fb      	strb	r3, [r7, #23]
 80009d8:	e057      	b.n	8000a8a <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 80009da:	8abc      	ldrh	r4, [r7, #20]
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	3b01      	subs	r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4619      	mov	r1, r3
 80009ea:	200a      	movs	r0, #10
 80009ec:	f7ff ffb6 	bl	800095c <mypow>
 80009f0:	4603      	mov	r3, r0
 80009f2:	fbb4 f1f3 	udiv	r1, r4, r3
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <lcd_ShowFloatNum+0x10c>)
 80009f8:	fba3 2301 	umull	r2, r3, r3, r1
 80009fc:	08da      	lsrs	r2, r3, #3
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	1aca      	subs	r2, r1, r3
 8000a08:	4613      	mov	r3, r2
 8000a0a:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8000a0c:	7dfa      	ldrb	r2, [r7, #23]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	3b02      	subs	r3, #2
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d11d      	bne.n	8000a52 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	3b02      	subs	r3, #2
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	7dbb      	ldrb	r3, [r7, #22]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	fb12 f303 	smulbb	r3, r2, r3
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	89fb      	ldrh	r3, [r7, #14]
 8000a28:	4413      	add	r3, r2
 8000a2a:	b298      	uxth	r0, r3
 8000a2c:	88ba      	ldrh	r2, [r7, #4]
 8000a2e:	89b9      	ldrh	r1, [r7, #12]
 8000a30:	2300      	movs	r3, #0
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	222e      	movs	r2, #46	; 0x2e
 8000a42:	f7ff febb 	bl	80007bc <lcd_ShowChar>
			t++;
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	fb12 f303 	smulbb	r3, r2, r3
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	4413      	add	r3, r2
 8000a64:	b298      	uxth	r0, r3
 8000a66:	7cfb      	ldrb	r3, [r7, #19]
 8000a68:	3330      	adds	r3, #48	; 0x30
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	88bc      	ldrh	r4, [r7, #4]
 8000a6e:	89b9      	ldrh	r1, [r7, #12]
 8000a70:	2300      	movs	r3, #0
 8000a72:	9302      	str	r3, [sp, #8]
 8000a74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	4623      	mov	r3, r4
 8000a80:	f7ff fe9c 	bl	80007bc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	3301      	adds	r3, #1
 8000a88:	75fb      	strb	r3, [r7, #23]
 8000a8a:	7dfa      	ldrb	r2, [r7, #23]
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3a3      	bcc.n	80009da <lcd_ShowFloatNum+0x46>
	}
}
 8000a92:	bf00      	nop
 8000a94:	bf00      	nop
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	42c80000 	.word	0x42c80000
 8000aa0:	cccccccd 	.word	0xcccccccd

08000aa4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <lcd_SetDir+0x44>)
 8000ac0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ac4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <lcd_SetDir+0x44>)
 8000ac8:	22f0      	movs	r2, #240	; 0xf0
 8000aca:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000acc:	e006      	b.n	8000adc <lcd_SetDir+0x38>
		lcddev.width=240;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <lcd_SetDir+0x44>)
 8000ad0:	22f0      	movs	r2, #240	; 0xf0
 8000ad2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <lcd_SetDir+0x44>)
 8000ad6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ada:	805a      	strh	r2, [r3, #2]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	200000c4 	.word	0x200000c4

08000aec <lcd_init>:


void lcd_init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af6:	48aa      	ldr	r0, [pc, #680]	; (8000da0 <lcd_init+0x2b4>)
 8000af8:	f002 ff62 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b00:	f001 fc78 	bl	80023f4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	48a5      	ldr	r0, [pc, #660]	; (8000da0 <lcd_init+0x2b4>)
 8000b0c:	f002 ff58 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b14:	f001 fc6e 	bl	80023f4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff ffc3 	bl	8000aa4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000b1e:	20d3      	movs	r0, #211	; 0xd3
 8000b20:	f7ff fd84 	bl	800062c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000b24:	f7ff fda2 	bl	800066c <LCD_RD_DATA>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b9d      	ldr	r3, [pc, #628]	; (8000da4 <lcd_init+0x2b8>)
 8000b2e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000b30:	f7ff fd9c 	bl	800066c <LCD_RD_DATA>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b9a      	ldr	r3, [pc, #616]	; (8000da4 <lcd_init+0x2b8>)
 8000b3a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000b3c:	f7ff fd96 	bl	800066c <LCD_RD_DATA>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b97      	ldr	r3, [pc, #604]	; (8000da4 <lcd_init+0x2b8>)
 8000b46:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000b48:	4b96      	ldr	r3, [pc, #600]	; (8000da4 <lcd_init+0x2b8>)
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b94      	ldr	r3, [pc, #592]	; (8000da4 <lcd_init+0x2b8>)
 8000b52:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000b54:	f7ff fd8a 	bl	800066c <LCD_RD_DATA>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b91      	ldr	r3, [pc, #580]	; (8000da4 <lcd_init+0x2b8>)
 8000b5e:	889b      	ldrh	r3, [r3, #4]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b8f      	ldr	r3, [pc, #572]	; (8000da4 <lcd_init+0x2b8>)
 8000b66:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000b68:	20cf      	movs	r0, #207	; 0xcf
 8000b6a:	f7ff fd5f 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fd6c 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000b74:	20c1      	movs	r0, #193	; 0xc1
 8000b76:	f7ff fd69 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000b7a:	2030      	movs	r0, #48	; 0x30
 8000b7c:	f7ff fd66 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000b80:	20ed      	movs	r0, #237	; 0xed
 8000b82:	f7ff fd53 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f7ff fd60 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f7ff fd5d 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000b92:	2012      	movs	r0, #18
 8000b94:	f7ff fd5a 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000b98:	2081      	movs	r0, #129	; 0x81
 8000b9a:	f7ff fd57 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000b9e:	20e8      	movs	r0, #232	; 0xe8
 8000ba0:	f7ff fd44 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000ba4:	2085      	movs	r0, #133	; 0x85
 8000ba6:	f7ff fd51 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000baa:	2010      	movs	r0, #16
 8000bac:	f7ff fd4e 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000bb0:	207a      	movs	r0, #122	; 0x7a
 8000bb2:	f7ff fd4b 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000bb6:	20cb      	movs	r0, #203	; 0xcb
 8000bb8:	f7ff fd38 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000bbc:	2039      	movs	r0, #57	; 0x39
 8000bbe:	f7ff fd45 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000bc2:	202c      	movs	r0, #44	; 0x2c
 8000bc4:	f7ff fd42 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fd3f 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000bce:	2034      	movs	r0, #52	; 0x34
 8000bd0:	f7ff fd3c 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff fd39 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000bda:	20f7      	movs	r0, #247	; 0xf7
 8000bdc:	f7ff fd26 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000be0:	2020      	movs	r0, #32
 8000be2:	f7ff fd33 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000be6:	20ea      	movs	r0, #234	; 0xea
 8000be8:	f7ff fd20 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd2d 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fd2a 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000bf8:	20c0      	movs	r0, #192	; 0xc0
 8000bfa:	f7ff fd17 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000bfe:	201b      	movs	r0, #27
 8000c00:	f7ff fd24 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000c04:	20c1      	movs	r0, #193	; 0xc1
 8000c06:	f7ff fd11 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fd1e 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000c10:	20c5      	movs	r0, #197	; 0xc5
 8000c12:	f7ff fd0b 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000c16:	2030      	movs	r0, #48	; 0x30
 8000c18:	f7ff fd18 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000c1c:	2030      	movs	r0, #48	; 0x30
 8000c1e:	f7ff fd15 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000c22:	20c7      	movs	r0, #199	; 0xc7
 8000c24:	f7ff fd02 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000c28:	20b7      	movs	r0, #183	; 0xb7
 8000c2a:	f7ff fd0f 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000c2e:	2036      	movs	r0, #54	; 0x36
 8000c30:	f7ff fcfc 	bl	800062c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000c34:	2008      	movs	r0, #8
 8000c36:	f7ff fd09 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000c3a:	203a      	movs	r0, #58	; 0x3a
 8000c3c:	f7ff fcf6 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000c40:	2055      	movs	r0, #85	; 0x55
 8000c42:	f7ff fd03 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000c46:	20b1      	movs	r0, #177	; 0xb1
 8000c48:	f7ff fcf0 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fcfd 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000c52:	201a      	movs	r0, #26
 8000c54:	f7ff fcfa 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000c58:	20b6      	movs	r0, #182	; 0xb6
 8000c5a:	f7ff fce7 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f7ff fcf4 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000c64:	20a2      	movs	r0, #162	; 0xa2
 8000c66:	f7ff fcf1 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000c6a:	20f2      	movs	r0, #242	; 0xf2
 8000c6c:	f7ff fcde 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fceb 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000c76:	2026      	movs	r0, #38	; 0x26
 8000c78:	f7ff fcd8 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fce5 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000c82:	20e0      	movs	r0, #224	; 0xe0
 8000c84:	f7ff fcd2 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000c88:	200f      	movs	r0, #15
 8000c8a:	f7ff fcdf 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000c8e:	202a      	movs	r0, #42	; 0x2a
 8000c90:	f7ff fcdc 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000c94:	2028      	movs	r0, #40	; 0x28
 8000c96:	f7ff fcd9 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000c9a:	2008      	movs	r0, #8
 8000c9c:	f7ff fcd6 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000ca0:	200e      	movs	r0, #14
 8000ca2:	f7ff fcd3 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000ca6:	2008      	movs	r0, #8
 8000ca8:	f7ff fcd0 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000cac:	2054      	movs	r0, #84	; 0x54
 8000cae:	f7ff fccd 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000cb2:	20a9      	movs	r0, #169	; 0xa9
 8000cb4:	f7ff fcca 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000cb8:	2043      	movs	r0, #67	; 0x43
 8000cba:	f7ff fcc7 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	f7ff fcc4 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000cc4:	200f      	movs	r0, #15
 8000cc6:	f7ff fcc1 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fcbe 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fcbb 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fcb8 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fcb5 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000ce2:	20e1      	movs	r0, #225	; 0xe1
 8000ce4:	f7ff fca2 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fcaf 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000cee:	2015      	movs	r0, #21
 8000cf0:	f7ff fcac 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000cf4:	2017      	movs	r0, #23
 8000cf6:	f7ff fca9 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f7ff fca6 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000d00:	2011      	movs	r0, #17
 8000d02:	f7ff fca3 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000d06:	2006      	movs	r0, #6
 8000d08:	f7ff fca0 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000d0c:	202b      	movs	r0, #43	; 0x2b
 8000d0e:	f7ff fc9d 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000d12:	2056      	movs	r0, #86	; 0x56
 8000d14:	f7ff fc9a 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000d18:	203c      	movs	r0, #60	; 0x3c
 8000d1a:	f7ff fc97 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f7ff fc94 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000d24:	2010      	movs	r0, #16
 8000d26:	f7ff fc91 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f7ff fc8e 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000d30:	203f      	movs	r0, #63	; 0x3f
 8000d32:	f7ff fc8b 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000d36:	203f      	movs	r0, #63	; 0x3f
 8000d38:	f7ff fc88 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	f7ff fc85 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000d42:	202b      	movs	r0, #43	; 0x2b
 8000d44:	f7ff fc72 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff fc7f 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fc7c 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff fc79 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000d5a:	203f      	movs	r0, #63	; 0x3f
 8000d5c:	f7ff fc76 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000d60:	202a      	movs	r0, #42	; 0x2a
 8000d62:	f7ff fc63 	bl	800062c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fc70 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fc6d 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fc6a 	bl	800064c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000d78:	20ef      	movs	r0, #239	; 0xef
 8000d7a:	f7ff fc67 	bl	800064c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000d7e:	2011      	movs	r0, #17
 8000d80:	f7ff fc54 	bl	800062c <LCD_WR_REG>
	HAL_Delay(120);
 8000d84:	2078      	movs	r0, #120	; 0x78
 8000d86:	f001 fb35 	bl	80023f4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000d8a:	2029      	movs	r0, #41	; 0x29
 8000d8c:	f7ff fc4e 	bl	800062c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <lcd_init+0x2bc>)
 8000d98:	f002 fe12 	bl	80039c0 <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40020800 	.word	0x40020800
 8000da4:	200000c4 	.word	0x200000c4
 8000da8:	40020000 	.word	0x40020000

08000dac <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4603      	mov	r3, r0
 8000db8:	81fb      	strh	r3, [r7, #14]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	81bb      	strh	r3, [r7, #12]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8000dc2:	89fb      	ldrh	r3, [r7, #14]
 8000dc4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8000dca:	e048      	b.n	8000e5e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d145      	bne.n	8000e5e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8000dd2:	89fa      	ldrh	r2, [r7, #14]
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <lcd_ShowStr+0xc4>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	1acb      	subs	r3, r1, r3
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dc3f      	bgt.n	8000e68 <lcd_ShowStr+0xbc>
 8000de8:	89ba      	ldrh	r2, [r7, #12]
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <lcd_ShowStr+0xc4>)
 8000dec:	885b      	ldrh	r3, [r3, #2]
 8000dee:	4619      	mov	r1, r3
 8000df0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dc36      	bgt.n	8000e68 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b80      	cmp	r3, #128	; 0x80
 8000e00:	d902      	bls.n	8000e08 <lcd_ShowStr+0x5c>
 8000e02:	2301      	movs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
 8000e06:	e02a      	b.n	8000e5e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b0d      	cmp	r3, #13
 8000e0e:	d10b      	bne.n	8000e28 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8000e10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	89bb      	ldrh	r3, [r7, #12]
 8000e18:	4413      	add	r3, r2
 8000e1a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8000e1c:	8abb      	ldrh	r3, [r7, #20]
 8000e1e:	81fb      	strh	r3, [r7, #14]
					str++;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	e017      	b.n	8000e58 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	88fc      	ldrh	r4, [r7, #6]
 8000e2e:	89b9      	ldrh	r1, [r7, #12]
 8000e30:	89f8      	ldrh	r0, [r7, #14]
 8000e32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	4623      	mov	r3, r4
 8000e44:	f7ff fcba 	bl	80007bc <lcd_ShowChar>
					x+=sizey/2;
 8000e48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e4c:	085b      	lsrs	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	4413      	add	r3, r2
 8000e56:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1b2      	bne.n	8000dcc <lcd_ShowStr+0x20>
 8000e66:	e000      	b.n	8000e6a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8000e68:	bf00      	nop
			}
		}
	}
}
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	200000c4 	.word	0x200000c4

08000e74 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <led7_Scan+0x104>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <led7_Scan+0x104>)
 8000e82:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000e84:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <led7_Scan+0x108>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3d      	ldr	r2, [pc, #244]	; (8000f80 <led7_Scan+0x10c>)
 8000e8a:	5cd3      	ldrb	r3, [r2, r3]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <led7_Scan+0x104>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <led7_Scan+0x104>)
 8000e9e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <led7_Scan+0x108>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d847      	bhi.n	8000f38 <led7_Scan+0xc4>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <led7_Scan+0x3c>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ec1 	.word	0x08000ec1
 8000eb4:	08000edf 	.word	0x08000edf
 8000eb8:	08000efd 	.word	0x08000efd
 8000ebc:	08000f1b 	.word	0x08000f1b
	case 0:
		spi_buffer |= 0x00b0;
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <led7_Scan+0x104>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <led7_Scan+0x104>)
 8000ecc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <led7_Scan+0x104>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <led7_Scan+0x104>)
 8000eda:	801a      	strh	r2, [r3, #0]
		break;
 8000edc:	e02d      	b.n	8000f3a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <led7_Scan+0x104>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <led7_Scan+0x104>)
 8000eea:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <led7_Scan+0x104>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	f023 0320 	bic.w	r3, r3, #32
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <led7_Scan+0x104>)
 8000ef8:	801a      	strh	r2, [r3, #0]
		break;
 8000efa:	e01e      	b.n	8000f3a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <led7_Scan+0x104>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <led7_Scan+0x104>)
 8000f08:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <led7_Scan+0x104>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	f023 0310 	bic.w	r3, r3, #16
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <led7_Scan+0x104>)
 8000f16:	801a      	strh	r2, [r3, #0]
		break;
 8000f18:	e00f      	b.n	8000f3a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <led7_Scan+0x104>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <led7_Scan+0x104>)
 8000f26:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <led7_Scan+0x104>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <led7_Scan+0x104>)
 8000f34:	801a      	strh	r2, [r3, #0]
		break;
 8000f36:	e000      	b.n	8000f3a <led7_Scan+0xc6>
	default:
		break;
 8000f38:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <led7_Scan+0x108>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	425a      	negs	r2, r3
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	bf58      	it	pl
 8000f4c:	4253      	negpl	r3, r2
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <led7_Scan+0x108>)
 8000f50:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <led7_Scan+0x110>)
 8000f58:	f002 fd32 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	2202      	movs	r2, #2
 8000f60:	4905      	ldr	r1, [pc, #20]	; (8000f78 <led7_Scan+0x104>)
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <led7_Scan+0x114>)
 8000f64:	f003 fd0d 	bl	8004982 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <led7_Scan+0x110>)
 8000f6e:	f002 fd27 	bl	80039c0 <HAL_GPIO_WritePin>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	20000094 	.word	0x20000094
 8000f80:	20000000 	.word	0x20000000
 8000f84:	40021800 	.word	0x40021800
 8000f88:	20000320 	.word	0x20000320

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b096      	sub	sp, #88	; 0x58
 8000f90:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f001 f9bd 	bl	8002310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f891 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 fb45 	bl	8001628 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f9e:	f000 fa35 	bl	800140c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000fa2:	f000 f9ad 	bl	8001300 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000fa6:	f000 fc61 	bl	800186c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000faa:	f000 fac9 	bl	8001540 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000fae:	f000 fb1b 	bl	80015e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fb2:	f000 f8ed 	bl	8001190 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fb6:	f000 f975 	bl	80012a4 <MX_I2C1_Init>
  MX_TIM13_Init();
 8000fba:	f000 fa73 	bl	80014a4 <MX_TIM13_Init>
  MX_TIM1_Init();
 8000fbe:	f000 f9d5 	bl	800136c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000fc2:	f000 fae7 	bl	8001594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000fc6:	f000 fccb 	bl	8001960 <system_init>
  lcd_Clear(BLACK);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fbac 	bl	8000728 <lcd_Clear>
  char buffer[50];
  float temperature;
  int counter = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44

  setTimer2(1000);
 8000fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd8:	f000 fd26 	bl	8001a28 <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!flag_timer2);
 8000fdc:	bf00      	nop
 8000fde:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <main+0x11c>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0fb      	beq.n	8000fde <main+0x52>
	  flag_timer2 = 0;
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <main+0x11c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]

	  if (counter == 0) {
 8000fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d14b      	bne.n	800108a <main+0xfe>
		  temperature = sensor_GetTemperature();
 8000ff2:	f000 fcf1 	bl	80019d8 <sensor_GetTemperature>
 8000ff6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		  int intPart = (int)temperature;
 8000ffa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001002:	ee17 3a90 	vmov	r3, s15
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
		  int fracPart = (int)((temperature - intPart) * 100);
 8001008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010ac <main+0x120>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001026:	ee17 3a90 	vmov	r3, s15
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
		  sprintf(buffer, "!TEMP:%d.%02d#", intPart, fracPart);
 800102c:	1d38      	adds	r0, r7, #4
 800102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001032:	491f      	ldr	r1, [pc, #124]	; (80010b0 <main+0x124>)
 8001034:	f005 fff6 	bl	8007024 <siprintf>
		  uart_EspSendBytes((uint8_t*)buffer, strlen(buffer));
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8c8 	bl	80001d0 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f001 f8a3 	bl	8002194 <uart_EspSendBytes>

		  lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 800104e:	2300      	movs	r3, #0
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2310      	movs	r3, #16
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	2300      	movs	r3, #0
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <main+0x128>)
 8001060:	21b4      	movs	r1, #180	; 0xb4
 8001062:	200a      	movs	r0, #10
 8001064:	f7ff fea2 	bl	8000dac <lcd_ShowStr>
		  lcd_ShowFloatNum(130, 180,sensor_GetTemperature(), 4, RED, BLACK, 16);
 8001068:	f000 fcb6 	bl	80019d8 <sensor_GetTemperature>
 800106c:	eef0 7a40 	vmov.f32	s15, s0
 8001070:	2310      	movs	r3, #16
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800107c:	2204      	movs	r2, #4
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	21b4      	movs	r1, #180	; 0xb4
 8001084:	2082      	movs	r0, #130	; 0x82
 8001086:	f7ff fc85 	bl	8000994 <lcd_ShowFloatNum>
	  }
	  counter = (counter + 1) % 10;
 800108a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <main+0x12c>)
 8001090:	fb83 1302 	smull	r1, r3, r3, r2
 8001094:	1099      	asrs	r1, r3, #2
 8001096:	17d3      	asrs	r3, r2, #31
 8001098:	1ac9      	subs	r1, r1, r3
 800109a:	460b      	mov	r3, r1
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
	  while (!flag_timer2);
 80010a6:	e799      	b.n	8000fdc <main+0x50>
 80010a8:	2000009a 	.word	0x2000009a
 80010ac:	42c80000 	.word	0x42c80000
 80010b0:	08007898 	.word	0x08007898
 80010b4:	080078a8 	.word	0x080078a8
 80010b8:	66666667 	.word	0x66666667

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	; 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2230      	movs	r2, #48	; 0x30
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 ffa2 	bl	8007014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <SystemClock_Config+0xcc>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <SystemClock_Config+0xcc>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <SystemClock_Config+0xcc>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <SystemClock_Config+0xd0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <SystemClock_Config+0xd0>)
 8001106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <SystemClock_Config+0xd0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001120:	2310      	movs	r3, #16
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001124:	2302      	movs	r3, #2
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800112c:	2308      	movs	r3, #8
 800112e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001130:	23a8      	movs	r3, #168	; 0xa8
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	4618      	mov	r0, r3
 8001142:	f002 ff21 	bl	8003f88 <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800114c:	f000 fc30 	bl	80019b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	230f      	movs	r3, #15
 8001152:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001154:	2302      	movs	r3, #2
 8001156:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001162:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001166:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2105      	movs	r1, #5
 800116e:	4618      	mov	r0, r3
 8001170:	f003 f982 	bl	8004478 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800117a:	f000 fc19 	bl	80019b0 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3750      	adds	r7, #80	; 0x50
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40007000 	.word	0x40007000

08001190 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <MX_ADC1_Init+0x108>)
 80011a4:	4a3d      	ldr	r2, [pc, #244]	; (800129c <MX_ADC1_Init+0x10c>)
 80011a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011a8:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <MX_ADC1_Init+0x108>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <MX_ADC1_Init+0x108>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <MX_ADC1_Init+0x108>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <MX_ADC1_Init+0x108>)
 80011bc:	2200      	movs	r2, #0
 80011be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <MX_ADC1_Init+0x108>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <MX_ADC1_Init+0x108>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ce:	4b32      	ldr	r3, [pc, #200]	; (8001298 <MX_ADC1_Init+0x108>)
 80011d0:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <MX_ADC1_Init+0x110>)
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <MX_ADC1_Init+0x108>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <MX_ADC1_Init+0x108>)
 80011dc:	2205      	movs	r2, #5
 80011de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <MX_ADC1_Init+0x108>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <MX_ADC1_Init+0x108>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ee:	482a      	ldr	r0, [pc, #168]	; (8001298 <MX_ADC1_Init+0x108>)
 80011f0:	f001 f924 	bl	800243c <HAL_ADC_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 fbd9 	bl	80019b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011fe:	2308      	movs	r3, #8
 8001200:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	4822      	ldr	r0, [pc, #136]	; (8001298 <MX_ADC1_Init+0x108>)
 8001210:	f001 fa86 	bl	8002720 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800121a:	f000 fbc9 	bl	80019b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800121e:	2309      	movs	r3, #9
 8001220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	481b      	ldr	r0, [pc, #108]	; (8001298 <MX_ADC1_Init+0x108>)
 800122c:	f001 fa78 	bl	8002720 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001236:	f000 fbbb 	bl	80019b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800123a:	230a      	movs	r3, #10
 800123c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800123e:	2303      	movs	r3, #3
 8001240:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <MX_ADC1_Init+0x108>)
 8001248:	f001 fa6a 	bl	8002720 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001252:	f000 fbad 	bl	80019b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001256:	230b      	movs	r3, #11
 8001258:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800125a:	2304      	movs	r3, #4
 800125c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_ADC1_Init+0x108>)
 8001264:	f001 fa5c 	bl	8002720 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800126e:	f000 fb9f 	bl	80019b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001272:	230c      	movs	r3, #12
 8001274:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001276:	2305      	movs	r3, #5
 8001278:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC1_Init+0x108>)
 8001280:	f001 fa4e 	bl	8002720 <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800128a:	f000 fb91 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001a4 	.word	0x200001a4
 800129c:	40012000 	.word	0x40012000
 80012a0:	0f000001 	.word	0x0f000001

080012a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <MX_I2C1_Init+0x54>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_I2C1_Init+0x58>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012e2:	f002 fb87 	bl	80039f4 <HAL_I2C_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 fb60 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000100 	.word	0x20000100
 80012f8:	40005400 	.word	0x40005400
 80012fc:	000186a0 	.word	0x000186a0

08001300 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI1_Init+0x64>)
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_SPI1_Init+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI1_Init+0x64>)
 800130c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001310:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI1_Init+0x64>)
 800132c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001330:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI1_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_SPI1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI1_Init+0x64>)
 800134c:	220a      	movs	r2, #10
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_SPI1_Init+0x64>)
 8001352:	f003 fa8d 	bl	8004870 <HAL_SPI_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800135c:	f000 fb28 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000320 	.word	0x20000320
 8001368:	40013000 	.word	0x40013000

0800136c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_TIM1_Init+0x98>)
 800138a:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <MX_TIM1_Init+0x9c>)
 800138c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_TIM1_Init+0x98>)
 8001390:	2253      	movs	r2, #83	; 0x53
 8001392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_TIM1_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM1_Init+0x98>)
 800139c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_TIM1_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_TIM1_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_TIM1_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_TIM1_Init+0x98>)
 80013b6:	f003 fd2f 	bl	8004e18 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013c0:	f000 faf6 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM1_Init+0x98>)
 80013d2:	f004 f8cd 	bl	8005570 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013dc:	f000 fae8 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_TIM1_Init+0x98>)
 80013ee:	f004 fcbf 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013f8:	f000 fada 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200002d8 	.word	0x200002d8
 8001408:	40010000 	.word	0x40010000

0800140c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_TIM2_Init+0x94>)
 800142a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001432:	f240 3247 	movw	r2, #839	; 0x347
 8001436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_TIM2_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001440:	2263      	movs	r2, #99	; 0x63
 8001442:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_TIM2_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <MX_TIM2_Init+0x94>)
 8001452:	f003 fce1 	bl	8004e18 <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800145c:	f000 faa8 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_TIM2_Init+0x94>)
 800146e:	f004 f87f 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001478:	f000 fa9a 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_TIM2_Init+0x94>)
 800148a:	f004 fc71 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001494:	f000 fa8c 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000378 	.word	0x20000378

080014a4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM13_Init+0x94>)
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <MX_TIM13_Init+0x98>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_TIM13_Init+0x94>)
 80014c4:	f240 3247 	movw	r2, #839	; 0x347
 80014c8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_TIM13_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_TIM13_Init+0x94>)
 80014d2:	2263      	movs	r2, #99	; 0x63
 80014d4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_TIM13_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_TIM13_Init+0x94>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <MX_TIM13_Init+0x94>)
 80014e4:	f003 fc98 	bl	8004e18 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80014ee:	f000 fa5f 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80014f2:	4811      	ldr	r0, [pc, #68]	; (8001538 <MX_TIM13_Init+0x94>)
 80014f4:	f003 fd50 	bl	8004f98 <HAL_TIM_PWM_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80014fe:	f000 fa57 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	; 0x60
 8001504:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM13_Init+0x94>)
 800151a:	f003 ff67 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001524:	f000 fa44 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM13_Init+0x94>)
 800152a:	f000 fc61 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 800152e:	bf00      	nop
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001ec 	.word	0x200001ec
 800153c:	40001c00 	.word	0x40001c00

08001540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART1_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001578:	f004 fc8a 	bl	8005e90 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 fa15 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000234 	.word	0x20000234
 8001590:	40011000 	.word	0x40011000

08001594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_USART2_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015cc:	f004 fc60 	bl	8005e90 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f000 f9eb 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200003c0 	.word	0x200003c0
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_DMA_Init+0x3c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <MX_DMA_Init+0x3c>)
 80015f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_DMA_Init+0x3c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2038      	movs	r0, #56	; 0x38
 8001610:	f001 fc01 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001614:	2038      	movs	r0, #56	; 0x38
 8001616:	f001 fc1a 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	4b83      	ldr	r3, [pc, #524]	; (8001850 <MX_GPIO_Init+0x228>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a82      	ldr	r2, [pc, #520]	; (8001850 <MX_GPIO_Init+0x228>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b80      	ldr	r3, [pc, #512]	; (8001850 <MX_GPIO_Init+0x228>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <MX_GPIO_Init+0x228>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a7b      	ldr	r2, [pc, #492]	; (8001850 <MX_GPIO_Init+0x228>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b79      	ldr	r3, [pc, #484]	; (8001850 <MX_GPIO_Init+0x228>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	4b75      	ldr	r3, [pc, #468]	; (8001850 <MX_GPIO_Init+0x228>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a74      	ldr	r2, [pc, #464]	; (8001850 <MX_GPIO_Init+0x228>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b72      	ldr	r3, [pc, #456]	; (8001850 <MX_GPIO_Init+0x228>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	4b6e      	ldr	r3, [pc, #440]	; (8001850 <MX_GPIO_Init+0x228>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a6d      	ldr	r2, [pc, #436]	; (8001850 <MX_GPIO_Init+0x228>)
 800169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <MX_GPIO_Init+0x228>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <MX_GPIO_Init+0x228>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a66      	ldr	r2, [pc, #408]	; (8001850 <MX_GPIO_Init+0x228>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b64      	ldr	r3, [pc, #400]	; (8001850 <MX_GPIO_Init+0x228>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <MX_GPIO_Init+0x228>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a5f      	ldr	r2, [pc, #380]	; (8001850 <MX_GPIO_Init+0x228>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <MX_GPIO_Init+0x228>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b59      	ldr	r3, [pc, #356]	; (8001850 <MX_GPIO_Init+0x228>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a58      	ldr	r2, [pc, #352]	; (8001850 <MX_GPIO_Init+0x228>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b56      	ldr	r3, [pc, #344]	; (8001850 <MX_GPIO_Init+0x228>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <MX_GPIO_Init+0x228>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a51      	ldr	r2, [pc, #324]	; (8001850 <MX_GPIO_Init+0x228>)
 800170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <MX_GPIO_Init+0x228>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2170      	movs	r1, #112	; 0x70
 8001722:	484c      	ldr	r0, [pc, #304]	; (8001854 <MX_GPIO_Init+0x22c>)
 8001724:	f002 f94c 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800172e:	484a      	ldr	r0, [pc, #296]	; (8001858 <MX_GPIO_Init+0x230>)
 8001730:	f002 f946 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	4848      	ldr	r0, [pc, #288]	; (800185c <MX_GPIO_Init+0x234>)
 800173c:	f002 f940 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001746:	4846      	ldr	r0, [pc, #280]	; (8001860 <MX_GPIO_Init+0x238>)
 8001748:	f002 f93a 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	4844      	ldr	r0, [pc, #272]	; (8001864 <MX_GPIO_Init+0x23c>)
 8001754:	f002 f934 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2108      	movs	r1, #8
 800175c:	4842      	ldr	r0, [pc, #264]	; (8001868 <MX_GPIO_Init+0x240>)
 800175e:	f002 f92f 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001762:	2370      	movs	r3, #112	; 0x70
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4836      	ldr	r0, [pc, #216]	; (8001854 <MX_GPIO_Init+0x22c>)
 800177a:	f001 ff85 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800177e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4830      	ldr	r0, [pc, #192]	; (8001858 <MX_GPIO_Init+0x230>)
 8001798:	f001 ff76 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	482a      	ldr	r0, [pc, #168]	; (800185c <MX_GPIO_Init+0x234>)
 80017b2:	f001 ff69 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 80017b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4823      	ldr	r0, [pc, #140]	; (800185c <MX_GPIO_Init+0x234>)
 80017d0:	f001 ff5a 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80017d4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	481c      	ldr	r0, [pc, #112]	; (8001860 <MX_GPIO_Init+0x238>)
 80017ee:	f001 ff4b 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_PEN_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80017f2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_GPIO_Init+0x230>)
 8001808:	f001 ff3e 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	480f      	ldr	r0, [pc, #60]	; (8001864 <MX_GPIO_Init+0x23c>)
 8001826:	f001 ff2f 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800182a:	2308      	movs	r3, #8
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <MX_GPIO_Init+0x240>)
 8001842:	f001 ff21 	bl	8003688 <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3738      	adds	r7, #56	; 0x38
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40021000 	.word	0x40021000
 8001858:	40020800 	.word	0x40020800
 800185c:	40021400 	.word	0x40021400
 8001860:	40021800 	.word	0x40021800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020c00 	.word	0x40020c00

0800186c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <MX_FSMC_Init+0xec>)
 800189a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800189e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <MX_FSMC_Init+0xec>)
 80018a2:	4a2e      	ldr	r2, [pc, #184]	; (800195c <MX_FSMC_Init+0xf0>)
 80018a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <MX_FSMC_Init+0xec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <MX_FSMC_Init+0xec>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <MX_FSMC_Init+0xec>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <MX_FSMC_Init+0xec>)
 80018ba:	2210      	movs	r2, #16
 80018bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <MX_FSMC_Init+0xec>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <MX_FSMC_Init+0xec>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <MX_FSMC_Init+0xec>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <MX_FSMC_Init+0xec>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <MX_FSMC_Init+0xec>)
 80018d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <MX_FSMC_Init+0xec>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <MX_FSMC_Init+0xec>)
 80018e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <MX_FSMC_Init+0xec>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_FSMC_Init+0xec>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_FSMC_Init+0xec>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80018fe:	230f      	movs	r3, #15
 8001900:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001902:	230f      	movs	r3, #15
 8001904:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001906:	233c      	movs	r3, #60	; 0x3c
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800190e:	2310      	movs	r3, #16
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001912:	2311      	movs	r3, #17
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800191a:	2308      	movs	r3, #8
 800191c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800191e:	230f      	movs	r3, #15
 8001920:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001922:	2309      	movs	r3, #9
 8001924:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800192a:	2310      	movs	r3, #16
 800192c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800192e:	2311      	movs	r3, #17
 8001930:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001936:	463a      	mov	r2, r7
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <MX_FSMC_Init+0xec>)
 8001940:	f003 fa26 	bl	8004d90 <HAL_SRAM_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800194a:	f000 f831 	bl	80019b0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800194e:	bf00      	nop
 8001950:	3738      	adds	r7, #56	; 0x38
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000154 	.word	0x20000154
 800195c:	a0000104 	.word	0xa0000104

08001960 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2120      	movs	r1, #32
 8001968:	4810      	ldr	r0, [pc, #64]	; (80019ac <system_init+0x4c>)
 800196a:	f002 f829 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2140      	movs	r1, #64	; 0x40
 8001972:	480e      	ldr	r0, [pc, #56]	; (80019ac <system_init+0x4c>)
 8001974:	f002 f824 	bl	80039c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2110      	movs	r1, #16
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <system_init+0x4c>)
 800197e:	f002 f81f 	bl	80039c0 <HAL_GPIO_WritePin>

	timer_init();
 8001982:	f000 f847 	bl	8001a14 <timer_init>
//	led7_init();
	button_init();
 8001986:	f7fe fdf7 	bl	8000578 <button_init>
	lcd_init();
 800198a:	f7ff f8af 	bl	8000aec <lcd_init>
	ds3231_init();
 800198e:	f7fe fe09 	bl	80005a4 <ds3231_init>
	uart_init_rs232();
 8001992:	f000 fbe3 	bl	800215c <uart_init_rs232>
	sensor_init();
 8001996:	f000 f811 	bl	80019bc <sensor_init>
	buzzer_init();
 800199a:	f7fe fdf9 	bl	8000590 <buzzer_init>
	uart_init_esp();
 800199e:	f000 fbeb 	bl	8002178 <uart_init_esp>
	setTimer2(50);
 80019a2:	2032      	movs	r0, #50	; 0x32
 80019a4:	f000 f840 	bl	8001a28 <setTimer2>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>
	...

080019bc <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 80019c0:	2205      	movs	r2, #5
 80019c2:	4903      	ldr	r1, [pc, #12]	; (80019d0 <sensor_init+0x14>)
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <sensor_init+0x18>)
 80019c6:	f000 fd7d 	bl	80024c4 <HAL_ADC_Start_DMA>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000404 	.word	0x20000404
 80019d4:	200001a4 	.word	0x200001a4

080019d8 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <sensor_GetTemperature+0x30>)
 80019de:	891b      	ldrh	r3, [r3, #8]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001a0c <sensor_GetTemperature+0x34>
 80019ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a10 <sensor_GetTemperature+0x38>
 80019f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019f8:	eef0 7a66 	vmov.f32	s15, s13
}
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000404 	.word	0x20000404
 8001a0c:	43a50000 	.word	0x43a50000
 8001a10:	457ff000 	.word	0x457ff000

08001a14 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <timer_init+0x10>)
 8001a1a:	f003 fa4d 	bl	8004eb8 <HAL_TIM_Base_Start_IT>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000378 	.word	0x20000378

08001a28 <setTimer2>:

void setTimer2(uint16_t duration){
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <setTimer2+0x2c>)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <setTimer2+0x2c>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <setTimer2+0x30>)
 8001a3e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <setTimer2+0x34>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	801a      	strh	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000009e 	.word	0x2000009e
 8001a58:	2000009c 	.word	0x2000009c
 8001a5c:	2000009a 	.word	0x2000009a

08001a60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a70:	d116      	bne.n	8001aa0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a84:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <HAL_TIM_PeriodElapsedCallback+0x40>
				flag_timer2 = 1;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a9a:	801a      	strh	r2, [r3, #0]
				led7_Scan();
 8001a9c:	f7ff f9ea 	bl	8000e74 <led7_Scan>
			}
		}

	}
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000009c 	.word	0x2000009c
 8001aac:	2000009a 	.word	0x2000009a
 8001ab0:	2000009e 	.word	0x2000009e

08001ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a3c      	ldr	r2, [pc, #240]	; (8001c14 <HAL_ADC_MspInit+0x110>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d171      	bne.n	8001c0a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a33      	ldr	r2, [pc, #204]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_ADC_MspInit+0x114>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4823      	ldr	r0, [pc, #140]	; (8001c1c <HAL_ADC_MspInit+0x118>)
 8001b8e:	f001 fd7b 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b92:	2303      	movs	r3, #3
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b96:	2303      	movs	r3, #3
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481e      	ldr	r0, [pc, #120]	; (8001c20 <HAL_ADC_MspInit+0x11c>)
 8001ba6:	f001 fd6f 	bl	8003688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_ADC_MspInit+0x124>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001bf0:	f001 f948 	bl	8002e84 <HAL_DMA_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001bfa:	f7ff fed9 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_ADC_MspInit+0x120>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40012000 	.word	0x40012000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020400 	.word	0x40020400
 8001c24:	20000278 	.word	0x20000278
 8001c28:	40026410 	.word	0x40026410

08001c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_I2C_MspInit+0x84>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d12b      	bne.n	8001ca6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6e:	2312      	movs	r3, #18
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <HAL_I2C_MspInit+0x8c>)
 8001c86:	f001 fcff 	bl	8003688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_I2C_MspInit+0x88>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400

08001cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_SPI_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_SPI_MspInit+0x88>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_SPI_MspInit+0x88>)
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_SPI_MspInit+0x88>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d16:	2338      	movs	r3, #56	; 0x38
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d26:	2305      	movs	r3, #5
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_SPI_MspInit+0x8c>)
 8001d32:	f001 fca9 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40013000 	.word	0x40013000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020400 	.word	0x40020400

08001d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001d7a:	e02e      	b.n	8001dda <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d84:	d116      	bne.n	8001db4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	201c      	movs	r0, #28
 8001da8:	f001 f835 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dac:	201c      	movs	r0, #28
 8001dae:	f001 f84e 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 8001db2:	e012      	b.n	8001dda <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <HAL_TIM_Base_MspInit+0xa0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10d      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40001c00 	.word	0x40001c00

08001df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <HAL_TIM_MspPostInit+0x68>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d11e      	bne.n	8001e50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_TIM_MspPostInit+0x6c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e40:	2309      	movs	r3, #9
 8001e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_TIM_MspPostInit+0x70>)
 8001e4c:	f001 fc1c 	bl	8003688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40001c00 	.word	0x40001c00
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40021400 	.word	0x40021400

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <HAL_UART_MspInit+0x108>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d135      	bne.n	8001ef2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ebe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4826      	ldr	r0, [pc, #152]	; (8001f74 <HAL_UART_MspInit+0x110>)
 8001edc:	f001 fbd4 	bl	8003688 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2025      	movs	r0, #37	; 0x25
 8001ee6:	f000 ff96 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eea:	2025      	movs	r0, #37	; 0x25
 8001eec:	f000 ffaf 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ef0:	e038      	b.n	8001f64 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <HAL_UART_MspInit+0x114>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d133      	bne.n	8001f64 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_UART_MspInit+0x10c>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f34:	230c      	movs	r3, #12
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f44:	2307      	movs	r3, #7
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <HAL_UART_MspInit+0x110>)
 8001f50:	f001 fb9a 	bl	8003688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	2026      	movs	r0, #38	; 0x26
 8001f5a:	f000 ff5c 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f5e:	2026      	movs	r0, #38	; 0x26
 8001f60:	f000 ff75 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 8001f64:	bf00      	nop
 8001f66:	3730      	adds	r7, #48	; 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40004400 	.word	0x40004400

08001f7c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_FSMC_MspInit+0x88>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d131      	bne.n	8001ffc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_FSMC_MspInit+0x88>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_FSMC_MspInit+0x8c>)
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_FSMC_MspInit+0x8c>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6393      	str	r3, [r2, #56]	; 0x38
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_FSMC_MspInit+0x8c>)
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001fba:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001fbe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fcc:	230c      	movs	r3, #12
 8001fce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <HAL_FSMC_MspInit+0x90>)
 8001fd6:	f001 fb57 	bl	8003688 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001fda:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001fde:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001fec:	230c      	movs	r3, #12
 8001fee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4806      	ldr	r0, [pc, #24]	; (8002010 <HAL_FSMC_MspInit+0x94>)
 8001ff6:	f001 fb47 	bl	8003688 <HAL_GPIO_Init>
 8001ffa:	e000      	b.n	8001ffe <HAL_FSMC_MspInit+0x82>
    return;
 8001ffc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200000a0 	.word	0x200000a0
 8002008:	40023800 	.word	0x40023800
 800200c:	40021000 	.word	0x40021000
 8002010:	40020c00 	.word	0x40020c00

08002014 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800201c:	f7ff ffae 	bl	8001f7c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800202c:	e7fe      	b.n	800202c <NMI_Handler+0x4>

0800202e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <MemManage_Handler+0x4>

0800203a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <UsageFault_Handler+0x4>

08002046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002074:	f000 f99e 	bl	80023b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <TIM2_IRQHandler+0x10>)
 8002082:	f003 f8ab 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000378 	.word	0x20000378

08002090 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <USART1_IRQHandler+0x10>)
 8002096:	f004 f80b 	bl	80060b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000234 	.word	0x20000234

080020a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <USART2_IRQHandler+0x10>)
 80020aa:	f004 f801 	bl	80060b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200003c0 	.word	0x200003c0

080020b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <DMA2_Stream0_IRQHandler+0x10>)
 80020be:	f001 f879 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000278 	.word	0x20000278

080020cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <_sbrk+0x5c>)
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <_sbrk+0x60>)
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <_sbrk+0x64>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <_sbrk+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d207      	bcs.n	800210c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020fc:	f004 ff60 	bl	8006fc0 <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	220c      	movs	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	e009      	b.n	8002120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <_sbrk+0x64>)
 800211c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20020000 	.word	0x20020000
 800212c:	00000400 	.word	0x00000400
 8002130:	200000a4 	.word	0x200000a4
 8002134:	20000428 	.word	0x20000428

08002138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <SystemInit+0x20>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <SystemInit+0x20>)
 8002144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <uart_init_rs232>:
uint8_t msg[100];

uint8_t receive_buffer1 = 0, receive_buffer2 = 0;
uint8_t check_esp = 0;

void uart_init_rs232(){
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002160:	2201      	movs	r2, #1
 8002162:	4903      	ldr	r1, [pc, #12]	; (8002170 <uart_init_rs232+0x14>)
 8002164:	4803      	ldr	r0, [pc, #12]	; (8002174 <uart_init_rs232+0x18>)
 8002166:	f003 ff72 	bl	800604e <HAL_UART_Receive_IT>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200000a8 	.word	0x200000a8
 8002174:	20000234 	.word	0x20000234

08002178 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800217c:	2201      	movs	r2, #1
 800217e:	4903      	ldr	r1, [pc, #12]	; (800218c <uart_init_esp+0x14>)
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <uart_init_esp+0x18>)
 8002182:	f003 ff64 	bl	800604e <HAL_UART_Receive_IT>
//	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200000a9 	.word	0x200000a9
 8002190:	200003c0 	.word	0x200003c0

08002194 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	230a      	movs	r3, #10
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <uart_EspSendBytes+0x20>)
 80021a8:	f003 febf 	bl	8005f2a <HAL_UART_Transmit>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200003c0 	.word	0x200003c0

080021b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af04      	add	r7, sp, #16
 80021be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_UART_RxCpltCallback+0x98>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10a      	bne.n	80021e0 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80021ca:	230a      	movs	r3, #10
 80021cc:	2201      	movs	r2, #1
 80021ce:	4921      	ldr	r1, [pc, #132]	; (8002254 <HAL_UART_RxCpltCallback+0x9c>)
 80021d0:	4821      	ldr	r0, [pc, #132]	; (8002258 <HAL_UART_RxCpltCallback+0xa0>)
 80021d2:	f003 feaa 	bl	8005f2a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	491e      	ldr	r1, [pc, #120]	; (8002254 <HAL_UART_RxCpltCallback+0x9c>)
 80021da:	481f      	ldr	r0, [pc, #124]	; (8002258 <HAL_UART_RxCpltCallback+0xa0>)
 80021dc:	f003 ff37 	bl	800604e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_UART_RxCpltCallback+0xa4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d12d      	bne.n	8002246 <HAL_UART_RxCpltCallback+0x8e>
		if(receive_buffer2 == 'O') check_esp = 1;
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_UART_RxCpltCallback+0xa8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b4f      	cmp	r3, #79	; 0x4f
 80021f0:	d103      	bne.n	80021fa <HAL_UART_RxCpltCallback+0x42>
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_UART_RxCpltCallback+0xac>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e020      	b.n	800223c <HAL_UART_RxCpltCallback+0x84>
		else if(receive_buffer2 == 'a') light_status = 0;
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_UART_RxCpltCallback+0xa8>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b61      	cmp	r3, #97	; 0x61
 8002200:	d103      	bne.n	800220a <HAL_UART_RxCpltCallback+0x52>
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_UART_RxCpltCallback+0xb0>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e018      	b.n	800223c <HAL_UART_RxCpltCallback+0x84>
		else if(receive_buffer2 == 'A') light_status = 1;
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_UART_RxCpltCallback+0xa8>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b41      	cmp	r3, #65	; 0x41
 8002210:	d103      	bne.n	800221a <HAL_UART_RxCpltCallback+0x62>
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_UART_RxCpltCallback+0xb0>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e010      	b.n	800223c <HAL_UART_RxCpltCallback+0x84>
		else if(receive_buffer2 == 'X') lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_UART_RxCpltCallback+0xa8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b58      	cmp	r3, #88	; 0x58
 8002220:	d10c      	bne.n	800223c <HAL_UART_RxCpltCallback+0x84>
 8002222:	2300      	movs	r3, #0
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	2318      	movs	r3, #24
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	2300      	movs	r3, #0
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002232:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_UART_RxCpltCallback+0xb4>)
 8002234:	2132      	movs	r1, #50	; 0x32
 8002236:	200a      	movs	r0, #10
 8002238:	f7fe fdb8 	bl	8000dac <lcd_ShowStr>
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800223c:	2201      	movs	r2, #1
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <HAL_UART_RxCpltCallback+0xa8>)
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <HAL_UART_RxCpltCallback+0xb8>)
 8002242:	f003 ff04 	bl	800604e <HAL_UART_Receive_IT>
	}
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40011000 	.word	0x40011000
 8002254:	200000a8 	.word	0x200000a8
 8002258:	20000234 	.word	0x20000234
 800225c:	40004400 	.word	0x40004400
 8002260:	200000a9 	.word	0x200000a9
 8002264:	200000aa 	.word	0x200000aa
 8002268:	20000098 	.word	0x20000098
 800226c:	08007934 	.word	0x08007934
 8002270:	200003c0 	.word	0x200003c0

08002274 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <DEC2BCD+0x44>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	08db      	lsrs	r3, r3, #3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	b258      	sxtb	r0, r3
 800228e:	79fa      	ldrb	r2, [r7, #7]
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <DEC2BCD+0x44>)
 8002292:	fba3 1302 	umull	r1, r3, r3, r2
 8002296:	08d9      	lsrs	r1, r3, #3
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	4303      	orrs	r3, r0
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	cccccccd 	.word	0xcccccccd

080022bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022c2:	490e      	ldr	r1, [pc, #56]	; (80022fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022d8:	4c0b      	ldr	r4, [pc, #44]	; (8002308 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022e6:	f7ff ff27 	bl	8002138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f004 fe6f 	bl	8006fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ee:	f7fe fe4d 	bl	8000f8c <main>
  bx  lr    
 80022f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002300:	0800a924 	.word	0x0800a924
  ldr r2, =_sbss
 8002304:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002308:	20000424 	.word	0x20000424

0800230c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC_IRQHandler>
	...

08002310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <HAL_Init+0x40>)
 800231a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_Init+0x40>)
 8002326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_Init+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a07      	ldr	r2, [pc, #28]	; (8002350 <HAL_Init+0x40>)
 8002332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 fd61 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233e:	200f      	movs	r0, #15
 8002340:	f000 f808 	bl	8002354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002344:	f7ff fbb6 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023c00 	.word	0x40023c00

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x54>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_InitTick+0x58>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236a:	fbb3 f3f1 	udiv	r3, r3, r1
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fd79 	bl	8002e6a <HAL_SYSTICK_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e00e      	b.n	80023a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b0f      	cmp	r3, #15
 8002386:	d80a      	bhi.n	800239e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002388:	2200      	movs	r2, #0
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f000 fd41 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <HAL_InitTick+0x5c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000010 	.word	0x20000010
 80023b0:	2000000c 	.word	0x2000000c

080023b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x20>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_IncTick+0x24>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_IncTick+0x24>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000010 	.word	0x20000010
 80023d8:	20000410 	.word	0x20000410

080023dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_GetTick+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000410 	.word	0x20000410

080023f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d005      	beq.n	800241a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_Delay+0x44>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800241a:	bf00      	nop
 800241c:	f7ff ffde 	bl	80023dc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d8f7      	bhi.n	800241c <HAL_Delay+0x28>
  {
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000010 	.word	0x20000010

0800243c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e033      	b.n	80024ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fb52 	bl	8001b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d118      	bne.n	80024ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002482:	f023 0302 	bic.w	r3, r3, #2
 8002486:	f043 0202 	orr.w	r2, r3, #2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa68 	bl	8002964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
 80024aa:	e001      	b.n	80024b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Start_DMA+0x1e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0e9      	b.n	80026b6 <HAL_ADC_Start_DMA+0x1f2>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d018      	beq.n	800252a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002508:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_ADC_Start_DMA+0x1fc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6d      	ldr	r2, [pc, #436]	; (80026c4 <HAL_ADC_Start_DMA+0x200>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9a      	lsrs	r2, r3, #18
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800251c:	e002      	b.n	8002524 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	3b01      	subs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	d107      	bne.n	800254a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002548:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	f040 80a1 	bne.w	800269c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f023 0206 	bic.w	r2, r3, #6
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
 80025a6:	e002      	b.n	80025ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <HAL_ADC_Start_DMA+0x204>)
 80025b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	4a43      	ldr	r2, [pc, #268]	; (80026cc <HAL_ADC_Start_DMA+0x208>)
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	4a42      	ldr	r2, [pc, #264]	; (80026d0 <HAL_ADC_Start_DMA+0x20c>)
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <HAL_ADC_Start_DMA+0x210>)
 80025d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	334c      	adds	r3, #76	; 0x4c
 8002606:	4619      	mov	r1, r3
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f000 fce8 	bl	8002fe0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2b00      	cmp	r3, #0
 800261a:	d12a      	bne.n	8002672 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <HAL_ADC_Start_DMA+0x214>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d015      	beq.n	8002652 <HAL_ADC_Start_DMA+0x18e>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <HAL_ADC_Start_DMA+0x218>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d105      	bne.n	800263c <HAL_ADC_Start_DMA+0x178>
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_ADC_Start_DMA+0x204>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_ADC_Start_DMA+0x21c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d136      	bne.n	80026b4 <HAL_ADC_Start_DMA+0x1f0>
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_ADC_Start_DMA+0x204>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d130      	bne.n	80026b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d129      	bne.n	80026b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	e020      	b.n	80026b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_ADC_Start_DMA+0x214>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d11b      	bne.n	80026b4 <HAL_ADC_Start_DMA+0x1f0>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d114      	bne.n	80026b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	e00b      	b.n	80026b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f043 0210 	orr.w	r2, r3, #16
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000008 	.word	0x20000008
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	40012300 	.word	0x40012300
 80026cc:	08002b5d 	.word	0x08002b5d
 80026d0:	08002c17 	.word	0x08002c17
 80026d4:	08002c33 	.word	0x08002c33
 80026d8:	40012000 	.word	0x40012000
 80026dc:	40012100 	.word	0x40012100
 80026e0:	40012200 	.word	0x40012200

080026e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e105      	b.n	8002948 <HAL_ADC_ConfigChannel+0x228>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b09      	cmp	r3, #9
 800274a:	d925      	bls.n	8002798 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68d9      	ldr	r1, [r3, #12]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	3b1e      	subs	r3, #30
 8002762:	2207      	movs	r2, #7
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43da      	mvns	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	400a      	ands	r2, r1
 8002770:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68d9      	ldr	r1, [r3, #12]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	4603      	mov	r3, r0
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4403      	add	r3, r0
 800278a:	3b1e      	subs	r3, #30
 800278c:	409a      	lsls	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	e022      	b.n	80027de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6919      	ldr	r1, [r3, #16]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	2207      	movs	r2, #7
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	400a      	ands	r2, r1
 80027ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6919      	ldr	r1, [r3, #16]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4403      	add	r3, r0
 80027d4:	409a      	lsls	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d824      	bhi.n	8002830 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	3b05      	subs	r3, #5
 80027f8:	221f      	movs	r2, #31
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	400a      	ands	r2, r1
 8002806:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	4618      	mov	r0, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	3b05      	subs	r3, #5
 8002822:	fa00 f203 	lsl.w	r2, r0, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
 800282e:	e04c      	b.n	80028ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b0c      	cmp	r3, #12
 8002836:	d824      	bhi.n	8002882 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b23      	subs	r3, #35	; 0x23
 800284a:	221f      	movs	r2, #31
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43da      	mvns	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	400a      	ands	r2, r1
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	4618      	mov	r0, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3b23      	subs	r3, #35	; 0x23
 8002874:	fa00 f203 	lsl.w	r2, r0, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
 8002880:	e023      	b.n	80028ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	3b41      	subs	r3, #65	; 0x41
 8002894:	221f      	movs	r2, #31
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	400a      	ands	r2, r1
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4618      	mov	r0, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	3b41      	subs	r3, #65	; 0x41
 80028be:	fa00 f203 	lsl.w	r2, r0, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ca:	4b22      	ldr	r3, [pc, #136]	; (8002954 <HAL_ADC_ConfigChannel+0x234>)
 80028cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a21      	ldr	r2, [pc, #132]	; (8002958 <HAL_ADC_ConfigChannel+0x238>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d109      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1cc>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b12      	cmp	r3, #18
 80028de:	d105      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_ADC_ConfigChannel+0x238>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d123      	bne.n	800293e <HAL_ADC_ConfigChannel+0x21e>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d003      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x1e6>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b11      	cmp	r3, #17
 8002904:	d11b      	bne.n	800293e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b10      	cmp	r3, #16
 8002918:	d111      	bne.n	800293e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_ADC_ConfigChannel+0x23c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_ADC_ConfigChannel+0x240>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	0c9a      	lsrs	r2, r3, #18
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002930:	e002      	b.n	8002938 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3b01      	subs	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f9      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40012300 	.word	0x40012300
 8002958:	40012000 	.word	0x40012000
 800295c:	20000008 	.word	0x20000008
 8002960:	431bde83 	.word	0x431bde83

08002964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296c:	4b79      	ldr	r3, [pc, #484]	; (8002b54 <ADC_Init+0x1f0>)
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002998:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <ADC_Init+0x1f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6899      	ldr	r1, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	e00f      	b.n	8002a62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0202 	bic.w	r2, r2, #2
 8002a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7e1b      	ldrb	r3, [r3, #24]
 8002a7c:	005a      	lsls	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	3b01      	subs	r3, #1
 8002abc:	035a      	lsls	r2, r3, #13
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	e007      	b.n	8002ad8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	051a      	lsls	r2, r3, #20
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b1a:	025a      	lsls	r2, r3, #9
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	029a      	lsls	r2, r3, #10
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40012300 	.word	0x40012300
 8002b58:	0f000001 	.word	0x0f000001

08002b5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d13c      	bne.n	8002bf0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d12b      	bne.n	8002be8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d127      	bne.n	8002be8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d119      	bne.n	8002be8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0220 	bic.w	r2, r2, #32
 8002bc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff fd7b 	bl	80026e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bee:	e00e      	b.n	8002c0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff fd85 	bl	800270c <HAL_ADC_ErrorCallback>
}
 8002c02:	e004      	b.n	8002c0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fd67 	bl	80026f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2240      	movs	r2, #64	; 0x40
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f043 0204 	orr.w	r2, r3, #4
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fd5a 	bl	800270c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	; (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f7ff ff8e 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff29 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff3e 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff8e 	bl	8002d54 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5d 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff31 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff faa4 	bl	80023dc <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e099      	b.n	8002fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec0:	e00f      	b.n	8002ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec2:	f7ff fa8b 	bl	80023dc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d908      	bls.n	8002ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e078      	b.n	8002fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e8      	bne.n	8002ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <HAL_DMA_Init+0x158>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d107      	bne.n	8002f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	4313      	orrs	r3, r2
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0307 	bic.w	r3, r3, #7
 8002f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d117      	bne.n	8002fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fb01 	bl	8003590 <DMA_CheckFifoParam>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e016      	b.n	8002fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fab8 	bl	8003524 <DMA_CalcBaseAndBitshift>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	223f      	movs	r2, #63	; 0x3f
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	f010803f 	.word	0xf010803f

08002fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Start_IT+0x26>
 8003002:	2302      	movs	r3, #2
 8003004:	e040      	b.n	8003088 <HAL_DMA_Start_IT+0xa8>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12f      	bne.n	800307a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa4a 	bl	80034c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	223f      	movs	r2, #63	; 0x3f
 800303a:	409a      	lsls	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0216 	orr.w	r2, r2, #22
 800304e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e005      	b.n	8003086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7ff f99d 	bl	80023dc <HAL_GetTick>
 80030a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d008      	beq.n	80030c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e052      	b.n	8003168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_Abort+0x62>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003112:	e013      	b.n	800313c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003114:	f7ff f962 	bl	80023dc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b05      	cmp	r3, #5
 8003120:	d90c      	bls.n	800313c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e015      	b.n	8003168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	223f      	movs	r2, #63	; 0x3f
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d004      	beq.n	800318e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00c      	b.n	80031a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2205      	movs	r2, #5
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031c0:	4b92      	ldr	r3, [pc, #584]	; (800340c <HAL_DMA_IRQHandler+0x258>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a92      	ldr	r2, [pc, #584]	; (8003410 <HAL_DMA_IRQHandler+0x25c>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	2208      	movs	r2, #8
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01a      	beq.n	8003220 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	2208      	movs	r2, #8
 800320e:	409a      	lsls	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	2201      	movs	r2, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	2201      	movs	r2, #1
 8003244:	409a      	lsls	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	2204      	movs	r2, #4
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d012      	beq.n	800328c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	2204      	movs	r2, #4
 800327a:	409a      	lsls	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003290:	2210      	movs	r2, #16
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d043      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03c      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	2210      	movs	r2, #16
 80032b0:	409a      	lsls	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d024      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
 80032e2:	e01f      	b.n	8003324 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
 80032f4:	e016      	b.n	8003324 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0208 	bic.w	r2, r2, #8
 8003312:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	2220      	movs	r2, #32
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 808e 	beq.w	8003452 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8086 	beq.w	8003452 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	2220      	movs	r2, #32
 800334c:	409a      	lsls	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d136      	bne.n	80033cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0216 	bic.w	r2, r2, #22
 800336c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <HAL_DMA_IRQHandler+0x1da>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0208 	bic.w	r2, r2, #8
 800339c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	223f      	movs	r2, #63	; 0x3f
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d07d      	beq.n	80034be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
        }
        return;
 80033ca:	e078      	b.n	80034be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01c      	beq.n	8003414 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d030      	beq.n	8003452 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e02b      	b.n	8003452 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d027      	beq.n	8003452 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
 800340a:	e022      	b.n	8003452 <HAL_DMA_IRQHandler+0x29e>
 800340c:	20000008 	.word	0x20000008
 8003410:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10f      	bne.n	8003442 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0210 	bic.w	r2, r2, #16
 8003430:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	2b00      	cmp	r3, #0
 8003458:	d032      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d022      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2205      	movs	r2, #5
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3301      	adds	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	429a      	cmp	r2, r3
 8003488:	d307      	bcc.n	800349a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f2      	bne.n	800347e <HAL_DMA_IRQHandler+0x2ca>
 8003498:	e000      	b.n	800349c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800349a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
 80034bc:	e000      	b.n	80034c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80034be:	bf00      	nop
    }
  }
}
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop

080034c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d108      	bne.n	8003508 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003506:	e007      	b.n	8003518 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	3b10      	subs	r3, #16
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <DMA_CalcBaseAndBitshift+0x64>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <DMA_CalcBaseAndBitshift+0x68>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d909      	bls.n	8003566 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800355a:	f023 0303 	bic.w	r3, r3, #3
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	659a      	str	r2, [r3, #88]	; 0x58
 8003564:	e007      	b.n	8003576 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	aaaaaaab 	.word	0xaaaaaaab
 800358c:	0800a8d8 	.word	0x0800a8d8

08003590 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11f      	bne.n	80035ea <DMA_CheckFifoParam+0x5a>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d856      	bhi.n	800365e <DMA_CheckFifoParam+0xce>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <DMA_CheckFifoParam+0x28>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035db 	.word	0x080035db
 80035c0:	080035c9 	.word	0x080035c9
 80035c4:	0800365f 	.word	0x0800365f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d046      	beq.n	8003662 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d8:	e043      	b.n	8003662 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035e2:	d140      	bne.n	8003666 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e8:	e03d      	b.n	8003666 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f2:	d121      	bne.n	8003638 <DMA_CheckFifoParam+0xa8>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d837      	bhi.n	800366a <DMA_CheckFifoParam+0xda>
 80035fa:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <DMA_CheckFifoParam+0x70>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	08003611 	.word	0x08003611
 8003604:	08003617 	.word	0x08003617
 8003608:	08003611 	.word	0x08003611
 800360c:	08003629 	.word	0x08003629
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e030      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d025      	beq.n	800366e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e022      	b.n	800366e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003630:	d11f      	bne.n	8003672 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003636:	e01c      	b.n	8003672 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d903      	bls.n	8003646 <DMA_CheckFifoParam+0xb6>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d003      	beq.n	800364c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003644:	e018      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
      break;
 800364a:	e015      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00e      	beq.n	8003676 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e00b      	b.n	8003676 <DMA_CheckFifoParam+0xe6>
      break;
 800365e:	bf00      	nop
 8003660:	e00a      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 8003662:	bf00      	nop
 8003664:	e008      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 8003666:	bf00      	nop
 8003668:	e006      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e004      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;   
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <DMA_CheckFifoParam+0xe8>
      break;
 8003676:	bf00      	nop
    }
  } 
  
  return status; 
 8003678:	7bfb      	ldrb	r3, [r7, #15]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	e16b      	b.n	800397c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a4:	2201      	movs	r2, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	f040 815a 	bne.w	8003976 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d005      	beq.n	80036da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d130      	bne.n	800373c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	2203      	movs	r2, #3
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003710:	2201      	movs	r2, #1
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 0201 	and.w	r2, r3, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b03      	cmp	r3, #3
 8003746:	d017      	beq.n	8003778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d123      	bne.n	80037cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0203 	and.w	r2, r3, #3
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80b4 	beq.w	8003976 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b60      	ldr	r3, [pc, #384]	; (8003994 <HAL_GPIO_Init+0x30c>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a5f      	ldr	r2, [pc, #380]	; (8003994 <HAL_GPIO_Init+0x30c>)
 8003818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b5d      	ldr	r3, [pc, #372]	; (8003994 <HAL_GPIO_Init+0x30c>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800382a:	4a5b      	ldr	r2, [pc, #364]	; (8003998 <HAL_GPIO_Init+0x310>)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	220f      	movs	r2, #15
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a52      	ldr	r2, [pc, #328]	; (800399c <HAL_GPIO_Init+0x314>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d02b      	beq.n	80038ae <HAL_GPIO_Init+0x226>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a51      	ldr	r2, [pc, #324]	; (80039a0 <HAL_GPIO_Init+0x318>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d025      	beq.n	80038aa <HAL_GPIO_Init+0x222>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a50      	ldr	r2, [pc, #320]	; (80039a4 <HAL_GPIO_Init+0x31c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01f      	beq.n	80038a6 <HAL_GPIO_Init+0x21e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4f      	ldr	r2, [pc, #316]	; (80039a8 <HAL_GPIO_Init+0x320>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d019      	beq.n	80038a2 <HAL_GPIO_Init+0x21a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a4e      	ldr	r2, [pc, #312]	; (80039ac <HAL_GPIO_Init+0x324>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_Init+0x216>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4d      	ldr	r2, [pc, #308]	; (80039b0 <HAL_GPIO_Init+0x328>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00d      	beq.n	800389a <HAL_GPIO_Init+0x212>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4c      	ldr	r2, [pc, #304]	; (80039b4 <HAL_GPIO_Init+0x32c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_Init+0x20e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4b      	ldr	r2, [pc, #300]	; (80039b8 <HAL_GPIO_Init+0x330>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_GPIO_Init+0x20a>
 800388e:	2307      	movs	r3, #7
 8003890:	e00e      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 8003892:	2308      	movs	r3, #8
 8003894:	e00c      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 8003896:	2306      	movs	r3, #6
 8003898:	e00a      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 800389a:	2305      	movs	r3, #5
 800389c:	e008      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 800389e:	2304      	movs	r3, #4
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e004      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e002      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_GPIO_Init+0x228>
 80038ae:	2300      	movs	r3, #0
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f002 0203 	and.w	r2, r2, #3
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	4093      	lsls	r3, r2
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c0:	4935      	ldr	r1, [pc, #212]	; (8003998 <HAL_GPIO_Init+0x310>)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	3302      	adds	r3, #2
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ce:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_GPIO_Init+0x334>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f2:	4a32      	ldr	r2, [pc, #200]	; (80039bc <HAL_GPIO_Init+0x334>)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038f8:	4b30      	ldr	r3, [pc, #192]	; (80039bc <HAL_GPIO_Init+0x334>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_GPIO_Init+0x334>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_GPIO_Init+0x334>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <HAL_GPIO_Init+0x334>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_GPIO_Init+0x334>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003970:	4a12      	ldr	r2, [pc, #72]	; (80039bc <HAL_GPIO_Init+0x334>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3301      	adds	r3, #1
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	f67f ae90 	bls.w	80036a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	3724      	adds	r7, #36	; 0x24
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40013800 	.word	0x40013800
 800399c:	40020000 	.word	0x40020000
 80039a0:	40020400 	.word	0x40020400
 80039a4:	40020800 	.word	0x40020800
 80039a8:	40020c00 	.word	0x40020c00
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40021400 	.word	0x40021400
 80039b4:	40021800 	.word	0x40021800
 80039b8:	40021c00 	.word	0x40021c00
 80039bc:	40013c00 	.word	0x40013c00

080039c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
 80039cc:	4613      	mov	r3, r2
 80039ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039dc:	e003      	b.n	80039e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	041a      	lsls	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e12b      	b.n	8003c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe f906 	bl	8001c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a58:	f000 fee2 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4a81      	ldr	r2, [pc, #516]	; (8003c68 <HAL_I2C_Init+0x274>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d807      	bhi.n	8003a78 <HAL_I2C_Init+0x84>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a80      	ldr	r2, [pc, #512]	; (8003c6c <HAL_I2C_Init+0x278>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	bf94      	ite	ls
 8003a70:	2301      	movls	r3, #1
 8003a72:	2300      	movhi	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e006      	b.n	8003a86 <HAL_I2C_Init+0x92>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a7d      	ldr	r2, [pc, #500]	; (8003c70 <HAL_I2C_Init+0x27c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf94      	ite	ls
 8003a80:	2301      	movls	r3, #1
 8003a82:	2300      	movhi	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0e7      	b.n	8003c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a78      	ldr	r2, [pc, #480]	; (8003c74 <HAL_I2C_Init+0x280>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0c9b      	lsrs	r3, r3, #18
 8003a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a6a      	ldr	r2, [pc, #424]	; (8003c68 <HAL_I2C_Init+0x274>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_I2C_Init+0xd4>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	e009      	b.n	8003adc <HAL_I2C_Init+0xe8>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	4a69      	ldr	r2, [pc, #420]	; (8003c78 <HAL_I2C_Init+0x284>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	3301      	adds	r3, #1
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	495c      	ldr	r1, [pc, #368]	; (8003c68 <HAL_I2C_Init+0x274>)
 8003af8:	428b      	cmp	r3, r1
 8003afa:	d819      	bhi.n	8003b30 <HAL_I2C_Init+0x13c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e59      	subs	r1, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b10:	400b      	ands	r3, r1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_I2C_Init+0x138>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e59      	subs	r1, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	e051      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e04f      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d111      	bne.n	8003b5c <HAL_I2C_Init+0x168>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e012      	b.n	8003b82 <HAL_I2C_Init+0x18e>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e58      	subs	r0, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	0099      	lsls	r1, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Init+0x196>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e022      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <HAL_I2C_Init+0x1bc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1e58      	subs	r0, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	440b      	add	r3, r1
 8003ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bae:	e00f      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0099      	lsls	r1, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	6809      	ldr	r1, [r1, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6911      	ldr	r1, [r2, #16]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68d2      	ldr	r2, [r2, #12]
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	000186a0 	.word	0x000186a0
 8003c6c:	001e847f 	.word	0x001e847f
 8003c70:	003d08ff 	.word	0x003d08ff
 8003c74:	431bde83 	.word	0x431bde83
 8003c78:	10624dd3 	.word	0x10624dd3

08003c7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c8c:	f7fe fba6 	bl	80023dc <HAL_GetTick>
 8003c90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	f040 8111 	bne.w	8003ec6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2319      	movs	r3, #25
 8003caa:	2201      	movs	r2, #1
 8003cac:	4988      	ldr	r1, [pc, #544]	; (8003ed0 <HAL_I2C_IsDeviceReady+0x254>)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f912 	bl	8003ed8 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e104      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_I2C_IsDeviceReady+0x50>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0fd      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x24c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d007      	beq.n	8003cf2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2224      	movs	r2, #36	; 0x24
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a70      	ldr	r2, [pc, #448]	; (8003ed4 <HAL_I2C_IsDeviceReady+0x258>)
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8d0 	bl	8003ed8 <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4c:	d103      	bne.n	8003d56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0b6      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fe fb37 	bl	80023dc <HAL_GetTick>
 8003d6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d9e:	e025      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003da0:	f7fe fb1c 	bl	80023dc <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <HAL_I2C_IsDeviceReady+0x13a>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	22a0      	movs	r2, #160	; 0xa0
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2ba0      	cmp	r3, #160	; 0xa0
 8003df6:	d005      	beq.n	8003e04 <HAL_I2C_IsDeviceReady+0x188>
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_I2C_IsDeviceReady+0x188>
 8003dfe:	7dbb      	ldrb	r3, [r7, #22]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0cd      	beq.n	8003da0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d129      	bne.n	8003e6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2319      	movs	r3, #25
 8003e46:	2201      	movs	r2, #1
 8003e48:	4921      	ldr	r1, [pc, #132]	; (8003ed0 <HAL_I2C_IsDeviceReady+0x254>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f844 	bl	8003ed8 <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e036      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e02c      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2319      	movs	r3, #25
 8003e8e:	2201      	movs	r2, #1
 8003e90:	490f      	ldr	r1, [pc, #60]	; (8003ed0 <HAL_I2C_IsDeviceReady+0x254>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f820 	bl	8003ed8 <I2C_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e012      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	f4ff af32 	bcc.w	8003d16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	00100002 	.word	0x00100002
 8003ed4:	ffff0000 	.word	0xffff0000

08003ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee8:	e025      	b.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d021      	beq.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef2:	f7fe fa73 	bl	80023dc <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d116      	bne.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e023      	b.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10d      	bne.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	43da      	mvns	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	e00c      	b.n	8003f76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	43da      	mvns	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d0b6      	beq.n	8003eea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e264      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d075      	beq.n	8004092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa6:	4ba3      	ldr	r3, [pc, #652]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d00c      	beq.n	8003fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb2:	4ba0      	ldr	r3, [pc, #640]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d112      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbe:	4b9d      	ldr	r3, [pc, #628]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	4b99      	ldr	r3, [pc, #612]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d05b      	beq.n	8004090 <HAL_RCC_OscConfig+0x108>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d157      	bne.n	8004090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e23f      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x74>
 8003fee:	4b91      	ldr	r3, [pc, #580]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a90      	ldr	r2, [pc, #576]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e01d      	b.n	8004038 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0x98>
 8004006:	4b8b      	ldr	r3, [pc, #556]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a8a      	ldr	r2, [pc, #552]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b88      	ldr	r3, [pc, #544]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a87      	ldr	r2, [pc, #540]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e00b      	b.n	8004038 <HAL_RCC_OscConfig+0xb0>
 8004020:	4b84      	ldr	r3, [pc, #528]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a83      	ldr	r2, [pc, #524]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4b81      	ldr	r3, [pc, #516]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a80      	ldr	r2, [pc, #512]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fe f9cc 	bl	80023dc <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7fe f9c8 	bl	80023dc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e204      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b76      	ldr	r3, [pc, #472]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0xc0>
 8004066:	e014      	b.n	8004092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fe f9b8 	bl	80023dc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004070:	f7fe f9b4 	bl	80023dc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e1f0      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004082:	4b6c      	ldr	r3, [pc, #432]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0xe8>
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d063      	beq.n	8004166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800409e:	4b65      	ldr	r3, [pc, #404]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040aa:	4b62      	ldr	r3, [pc, #392]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d11c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b6:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d116      	bne.n	80040f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c2:	4b5c      	ldr	r3, [pc, #368]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_RCC_OscConfig+0x152>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d001      	beq.n	80040da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e1c4      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040da:	4b56      	ldr	r3, [pc, #344]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4952      	ldr	r1, [pc, #328]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	e03a      	b.n	8004166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d020      	beq.n	800413a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f8:	4b4f      	ldr	r3, [pc, #316]	; (8004238 <HAL_RCC_OscConfig+0x2b0>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7fe f96d 	bl	80023dc <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004106:	f7fe f969 	bl	80023dc <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e1a5      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004118:	4b46      	ldr	r3, [pc, #280]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004124:	4b43      	ldr	r3, [pc, #268]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4940      	ldr	r1, [pc, #256]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]
 8004138:	e015      	b.n	8004166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413a:	4b3f      	ldr	r3, [pc, #252]	; (8004238 <HAL_RCC_OscConfig+0x2b0>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fe f94c 	bl	80023dc <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004148:	f7fe f948 	bl	80023dc <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e184      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415a:	4b36      	ldr	r3, [pc, #216]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d030      	beq.n	80041d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_RCC_OscConfig+0x2b4>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fe f92c 	bl	80023dc <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004188:	f7fe f928 	bl	80023dc <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e164      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419a:	4b26      	ldr	r3, [pc, #152]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x200>
 80041a6:	e015      	b.n	80041d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCC_OscConfig+0x2b4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fe f915 	bl	80023dc <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b6:	f7fe f911 	bl	80023dc <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e14d      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80a0 	beq.w	8004322 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_OscConfig+0x2b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d121      	bne.n	8004262 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_RCC_OscConfig+0x2b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a07      	ldr	r2, [pc, #28]	; (8004240 <HAL_RCC_OscConfig+0x2b8>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422a:	f7fe f8d7 	bl	80023dc <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	e011      	b.n	8004256 <HAL_RCC_OscConfig+0x2ce>
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	42470000 	.word	0x42470000
 800423c:	42470e80 	.word	0x42470e80
 8004240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fe f8ca 	bl	80023dc <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e106      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b85      	ldr	r3, [pc, #532]	; (800446c <HAL_RCC_OscConfig+0x4e4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d106      	bne.n	8004278 <HAL_RCC_OscConfig+0x2f0>
 800426a:	4b81      	ldr	r3, [pc, #516]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a80      	ldr	r2, [pc, #512]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	e01c      	b.n	80042b2 <HAL_RCC_OscConfig+0x32a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b05      	cmp	r3, #5
 800427e:	d10c      	bne.n	800429a <HAL_RCC_OscConfig+0x312>
 8004280:	4b7b      	ldr	r3, [pc, #492]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a7a      	ldr	r2, [pc, #488]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004286:	f043 0304 	orr.w	r3, r3, #4
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
 800428c:	4b78      	ldr	r3, [pc, #480]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a77      	ldr	r2, [pc, #476]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	e00b      	b.n	80042b2 <HAL_RCC_OscConfig+0x32a>
 800429a:	4b75      	ldr	r3, [pc, #468]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a74      	ldr	r2, [pc, #464]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
 80042a6:	4b72      	ldr	r3, [pc, #456]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a71      	ldr	r2, [pc, #452]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d015      	beq.n	80042e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fe f88f 	bl	80023dc <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fe f88b 	bl	80023dc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0c5      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d8:	4b65      	ldr	r3, [pc, #404]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0ee      	beq.n	80042c2 <HAL_RCC_OscConfig+0x33a>
 80042e4:	e014      	b.n	8004310 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e6:	f7fe f879 	bl	80023dc <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fe f875 	bl	80023dc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0af      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004304:	4b5a      	ldr	r3, [pc, #360]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ee      	bne.n	80042ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	4a55      	ldr	r2, [pc, #340]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 800431c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004320:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 809b 	beq.w	8004462 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800432c:	4b50      	ldr	r3, [pc, #320]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b08      	cmp	r3, #8
 8004336:	d05c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d141      	bne.n	80043c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004340:	4b4c      	ldr	r3, [pc, #304]	; (8004474 <HAL_RCC_OscConfig+0x4ec>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004346:	f7fe f849 	bl	80023dc <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434e:	f7fe f845 	bl	80023dc <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e081      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	019b      	lsls	r3, r3, #6
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	3b01      	subs	r3, #1
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	061b      	lsls	r3, r3, #24
 8004390:	4937      	ldr	r1, [pc, #220]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCC_OscConfig+0x4ec>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe f81e 	bl	80023dc <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe f81a 	bl	80023dc <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e056      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x41c>
 80043c2:	e04e      	b.n	8004462 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <HAL_RCC_OscConfig+0x4ec>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fe f807 	bl	80023dc <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fe f803 	bl	80023dc <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e03f      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f0      	bne.n	80043d2 <HAL_RCC_OscConfig+0x44a>
 80043f0:	e037      	b.n	8004462 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e032      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043fe:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_RCC_OscConfig+0x4e8>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d028      	beq.n	800445e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d121      	bne.n	800445e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d11a      	bne.n	800445e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800442e:	4013      	ands	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004434:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004436:	4293      	cmp	r3, r2
 8004438:	d111      	bne.n	800445e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	3b01      	subs	r3, #1
 8004448:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d107      	bne.n	800445e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d001      	beq.n	8004462 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40007000 	.word	0x40007000
 8004470:	40023800 	.word	0x40023800
 8004474:	42470060 	.word	0x42470060

08004478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0cc      	b.n	8004626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800448c:	4b68      	ldr	r3, [pc, #416]	; (8004630 <HAL_RCC_ClockConfig+0x1b8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d90c      	bls.n	80044b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449a:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b63      	ldr	r3, [pc, #396]	; (8004630 <HAL_RCC_ClockConfig+0x1b8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0b8      	b.n	8004626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d020      	beq.n	8004502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044cc:	4b59      	ldr	r3, [pc, #356]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a58      	ldr	r2, [pc, #352]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e4:	4b53      	ldr	r3, [pc, #332]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a52      	ldr	r2, [pc, #328]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f0:	4b50      	ldr	r3, [pc, #320]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	494d      	ldr	r1, [pc, #308]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d044      	beq.n	8004598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d119      	bne.n	8004556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e07f      	b.n	8004626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d003      	beq.n	8004536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004532:	2b03      	cmp	r3, #3
 8004534:	d107      	bne.n	8004546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004536:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e06f      	b.n	8004626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e067      	b.n	8004626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004556:	4b37      	ldr	r3, [pc, #220]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 0203 	bic.w	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4934      	ldr	r1, [pc, #208]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	4313      	orrs	r3, r2
 8004566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004568:	f7fd ff38 	bl	80023dc <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	e00a      	b.n	8004586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004570:	f7fd ff34 	bl	80023dc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e04f      	b.n	8004626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004586:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 020c 	and.w	r2, r3, #12
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	429a      	cmp	r2, r3
 8004596:	d1eb      	bne.n	8004570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004598:	4b25      	ldr	r3, [pc, #148]	; (8004630 <HAL_RCC_ClockConfig+0x1b8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d20c      	bcs.n	80045c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e032      	b.n	8004626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045cc:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4916      	ldr	r1, [pc, #88]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	490e      	ldr	r1, [pc, #56]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045fe:	f000 f821 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8004602:	4602      	mov	r2, r0
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	490a      	ldr	r1, [pc, #40]	; (8004638 <HAL_RCC_ClockConfig+0x1c0>)
 8004610:	5ccb      	ldrb	r3, [r1, r3]
 8004612:	fa22 f303 	lsr.w	r3, r2, r3
 8004616:	4a09      	ldr	r2, [pc, #36]	; (800463c <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fe98 	bl	8002354 <HAL_InitTick>

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40023c00 	.word	0x40023c00
 8004634:	40023800 	.word	0x40023800
 8004638:	0800a8c0 	.word	0x0800a8c0
 800463c:	20000008 	.word	0x20000008
 8004640:	2000000c 	.word	0x2000000c

08004644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004644:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	2300      	movs	r3, #0
 8004656:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800465c:	4b67      	ldr	r3, [pc, #412]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 030c 	and.w	r3, r3, #12
 8004664:	2b08      	cmp	r3, #8
 8004666:	d00d      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x40>
 8004668:	2b08      	cmp	r3, #8
 800466a:	f200 80bd 	bhi.w	80047e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x34>
 8004672:	2b04      	cmp	r3, #4
 8004674:	d003      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x3a>
 8004676:	e0b7      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b61      	ldr	r3, [pc, #388]	; (8004800 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800467a:	60bb      	str	r3, [r7, #8]
       break;
 800467c:	e0b7      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800467e:	4b61      	ldr	r3, [pc, #388]	; (8004804 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004680:	60bb      	str	r3, [r7, #8]
      break;
 8004682:	e0b4      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004684:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800468c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800468e:	4b5b      	ldr	r3, [pc, #364]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d04d      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469a:	4b58      	ldr	r3, [pc, #352]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	461a      	mov	r2, r3
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046aa:	f04f 0100 	mov.w	r1, #0
 80046ae:	ea02 0800 	and.w	r8, r2, r0
 80046b2:	ea03 0901 	and.w	r9, r3, r1
 80046b6:	4640      	mov	r0, r8
 80046b8:	4649      	mov	r1, r9
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	014b      	lsls	r3, r1, #5
 80046c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046c8:	0142      	lsls	r2, r0, #5
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	ebb0 0008 	subs.w	r0, r0, r8
 80046d2:	eb61 0109 	sbc.w	r1, r1, r9
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	018b      	lsls	r3, r1, #6
 80046e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046e4:	0182      	lsls	r2, r0, #6
 80046e6:	1a12      	subs	r2, r2, r0
 80046e8:	eb63 0301 	sbc.w	r3, r3, r1
 80046ec:	f04f 0000 	mov.w	r0, #0
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	00d9      	lsls	r1, r3, #3
 80046f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046fa:	00d0      	lsls	r0, r2, #3
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	eb12 0208 	adds.w	r2, r2, r8
 8004704:	eb43 0309 	adc.w	r3, r3, r9
 8004708:	f04f 0000 	mov.w	r0, #0
 800470c:	f04f 0100 	mov.w	r1, #0
 8004710:	0259      	lsls	r1, r3, #9
 8004712:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004716:	0250      	lsls	r0, r2, #9
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	461a      	mov	r2, r3
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	f7fb fdaa 	bl	8000280 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e04a      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004736:	4b31      	ldr	r3, [pc, #196]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	ea02 0400 	and.w	r4, r2, r0
 800474e:	ea03 0501 	and.w	r5, r3, r1
 8004752:	4620      	mov	r0, r4
 8004754:	4629      	mov	r1, r5
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	014b      	lsls	r3, r1, #5
 8004760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004764:	0142      	lsls	r2, r0, #5
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	1b00      	subs	r0, r0, r4
 800476c:	eb61 0105 	sbc.w	r1, r1, r5
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	018b      	lsls	r3, r1, #6
 800477a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800477e:	0182      	lsls	r2, r0, #6
 8004780:	1a12      	subs	r2, r2, r0
 8004782:	eb63 0301 	sbc.w	r3, r3, r1
 8004786:	f04f 0000 	mov.w	r0, #0
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	00d9      	lsls	r1, r3, #3
 8004790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004794:	00d0      	lsls	r0, r2, #3
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	1912      	adds	r2, r2, r4
 800479c:	eb45 0303 	adc.w	r3, r5, r3
 80047a0:	f04f 0000 	mov.w	r0, #0
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	0299      	lsls	r1, r3, #10
 80047aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047ae:	0290      	lsls	r0, r2, #10
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	f7fb fd5e 	bl	8000280 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	60bb      	str	r3, [r7, #8]
      break;
 80047e6:	e002      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047ea:	60bb      	str	r3, [r7, #8]
      break;
 80047ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ee:	68bb      	ldr	r3, [r7, #8]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200

08004808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000008 	.word	0x20000008

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a9b      	lsrs	r3, r3, #10
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	0800a8d0 	.word	0x0800a8d0

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800484c:	f7ff ffdc 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	0800a8d0 	.word	0x0800a8d0

08004870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07b      	b.n	800497a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004892:	d009      	beq.n	80048a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
 800489a:	e005      	b.n	80048a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fd f9fa 	bl	8001cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	ea42 0103 	orr.w	r1, r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0104 	and.w	r1, r3, #4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0210 	and.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b088      	sub	sp, #32
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_SPI_Transmit+0x22>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e126      	b.n	8004bf2 <HAL_SPI_Transmit+0x270>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ac:	f7fd fd16 	bl	80023dc <HAL_GetTick>
 80049b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c6:	e10b      	b.n	8004be0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x52>
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049d8:	e102      	b.n	8004be0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a20:	d10f      	bne.n	8004a42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d007      	beq.n	8004a60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a68:	d14b      	bne.n	8004b02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_Transmit+0xf6>
 8004a72:	8afb      	ldrh	r3, [r7, #22]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d13e      	bne.n	8004af6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	881a      	ldrh	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	1c9a      	adds	r2, r3, #2
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a9c:	e02b      	b.n	8004af6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d112      	bne.n	8004ad2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	1c9a      	adds	r2, r3, #2
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ad0:	e011      	b.n	8004af6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad2:	f7fd fc83 	bl	80023dc <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d803      	bhi.n	8004aea <HAL_SPI_Transmit+0x168>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d102      	bne.n	8004af0 <HAL_SPI_Transmit+0x16e>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004af4:	e074      	b.n	8004be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ce      	bne.n	8004a9e <HAL_SPI_Transmit+0x11c>
 8004b00:	e04c      	b.n	8004b9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_Transmit+0x18e>
 8004b0a:	8afb      	ldrh	r3, [r7, #22]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d140      	bne.n	8004b92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b36:	e02c      	b.n	8004b92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d113      	bne.n	8004b6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	7812      	ldrb	r2, [r2, #0]
 8004b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b6c:	e011      	b.n	8004b92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b6e:	f7fd fc35 	bl	80023dc <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d803      	bhi.n	8004b86 <HAL_SPI_Transmit+0x204>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d102      	bne.n	8004b8c <HAL_SPI_Transmit+0x20a>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b90:	e026      	b.n	8004be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1cd      	bne.n	8004b38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f8b3 	bl	8004d0c <SPI_EndRxTxTransaction>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e000      	b.n	8004be0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c0c:	f7fd fbe6 	bl	80023dc <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	4413      	add	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c1c:	f7fd fbde 	bl	80023dc <HAL_GetTick>
 8004c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	015b      	lsls	r3, r3, #5
 8004c28:	0d1b      	lsrs	r3, r3, #20
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c32:	e054      	b.n	8004cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d050      	beq.n	8004cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c3c:	f7fd fbce 	bl	80023dc <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d902      	bls.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d13d      	bne.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d111      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	d004      	beq.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7e:	d107      	bne.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d10f      	bne.n	8004cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e017      	b.n	8004cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d19b      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000008 	.word	0x20000008

08004d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <SPI_EndRxTxTransaction+0x7c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <SPI_EndRxTxTransaction+0x80>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	0d5b      	lsrs	r3, r3, #21
 8004d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d112      	bne.n	8004d5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff ff5a 	bl	8004bfc <SPI_WaitFlagStateUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e00f      	b.n	8004d7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d0f2      	beq.n	8004d5e <SPI_EndRxTxTransaction+0x52>
 8004d78:	e000      	b.n	8004d7c <SPI_EndRxTxTransaction+0x70>
        break;
 8004d7a:	bf00      	nop
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000008 	.word	0x20000008
 8004d8c:	165e9f81 	.word	0x165e9f81

08004d90 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e034      	b.n	8004e10 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7fd f92a 	bl	8002014 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f002 f828 	bl	8006e20 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	f002 f872 	bl	8006ec4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6858      	ldr	r0, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	f002 f8a7 	bl	8006f40 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	6892      	ldr	r2, [r2, #8]
 8004dfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	6892      	ldr	r2, [r2, #8]
 8004e06:	f041 0101 	orr.w	r1, r1, #1
 8004e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e041      	b.n	8004eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fc ff84 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 fc7a 	bl	8005750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e04e      	b.n	8004f6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a23      	ldr	r2, [pc, #140]	; (8004f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x80>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efa:	d01d      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x80>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x80>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x80>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x80>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x80>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x80>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d111      	bne.n	8004f5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d010      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	e007      	b.n	8004f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40001800 	.word	0x40001800

08004f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e041      	b.n	800502e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f839 	bl	8005036 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 fbba 	bl	8005750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start+0x24>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e022      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d109      	bne.n	800508a <HAL_TIM_PWM_Start+0x3e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e015      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_PWM_Start+0x58>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_PWM_Start+0x6a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e07c      	b.n	80051b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050cc:	e013      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0x92>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	e00b      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ec:	e003      	b.n	80050f6 <HAL_TIM_PWM_Start+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fe10 	bl	8005d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a2d      	ldr	r2, [pc, #180]	; (80051c0 <HAL_TIM_PWM_Start+0x174>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIM_PWM_Start+0xcc>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <HAL_TIM_PWM_Start+0x178>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <HAL_TIM_PWM_Start+0xd0>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_TIM_PWM_Start+0xd2>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_TIM_PWM_Start+0x174>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <HAL_TIM_PWM_Start+0x136>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d01d      	beq.n	8005182 <HAL_TIM_PWM_Start+0x136>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <HAL_TIM_PWM_Start+0x17c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <HAL_TIM_PWM_Start+0x136>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <HAL_TIM_PWM_Start+0x180>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_TIM_PWM_Start+0x136>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <HAL_TIM_PWM_Start+0x184>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <HAL_TIM_PWM_Start+0x136>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <HAL_TIM_PWM_Start+0x178>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <HAL_TIM_PWM_Start+0x136>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_TIM_PWM_Start+0x188>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_TIM_PWM_Start+0x136>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_TIM_PWM_Start+0x18c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d111      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d010      	beq.n	80051b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	e007      	b.n	80051b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40010400 	.word	0x40010400
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40001800 	.word	0x40001800

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0202 	mvn.w	r2, #2
 8005208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa77 	bl	8005712 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa69 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa7a 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa4d 	bl	8005712 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa3f 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa50 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b08      	cmp	r3, #8
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa23 	bl	8005712 <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa15 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fa26 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2208      	movs	r2, #8
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9f9 	bl	8005712 <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f9eb 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f9fc 	bl	8005726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc fb80 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fd78 	bl	8005e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f9c1 	bl	800573a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0220 	mvn.w	r2, #32
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fd42 	bl	8005e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005406:	2302      	movs	r3, #2
 8005408:	e0ae      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	f200 809f 	bhi.w	8005558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005455 	.word	0x08005455
 8005424:	08005559 	.word	0x08005559
 8005428:	08005559 	.word	0x08005559
 800542c:	08005559 	.word	0x08005559
 8005430:	08005495 	.word	0x08005495
 8005434:	08005559 	.word	0x08005559
 8005438:	08005559 	.word	0x08005559
 800543c:	08005559 	.word	0x08005559
 8005440:	080054d7 	.word	0x080054d7
 8005444:	08005559 	.word	0x08005559
 8005448:	08005559 	.word	0x08005559
 800544c:	08005559 	.word	0x08005559
 8005450:	08005517 	.word	0x08005517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fa18 	bl	8005890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0208 	orr.w	r2, r2, #8
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
      break;
 8005492:	e064      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fa68 	bl	8005970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
      break;
 80054d4:	e043      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fabd 	bl	8005a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0204 	bic.w	r2, r2, #4
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	61da      	str	r2, [r3, #28]
      break;
 8005514:	e023      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb11 	bl	8005b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	61da      	str	r2, [r3, #28]
      break;
 8005556:	e002      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	75fb      	strb	r3, [r7, #23]
      break;
 800555c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIM_ConfigClockSource+0x1c>
 8005588:	2302      	movs	r3, #2
 800558a:	e0b4      	b.n	80056f6 <HAL_TIM_ConfigClockSource+0x186>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c4:	d03e      	beq.n	8005644 <HAL_TIM_ConfigClockSource+0xd4>
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ca:	f200 8087 	bhi.w	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	f000 8086 	beq.w	80056e2 <HAL_TIM_ConfigClockSource+0x172>
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d87f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b70      	cmp	r3, #112	; 0x70
 80055de:	d01a      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0xa6>
 80055e0:	2b70      	cmp	r3, #112	; 0x70
 80055e2:	d87b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d050      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x11a>
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d877      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b50      	cmp	r3, #80	; 0x50
 80055ee:	d03c      	beq.n	800566a <HAL_TIM_ConfigClockSource+0xfa>
 80055f0:	2b50      	cmp	r3, #80	; 0x50
 80055f2:	d873      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d058      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x13a>
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d86f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d064      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	2b30      	cmp	r3, #48	; 0x30
 8005602:	d86b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d060      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d867      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	2b10      	cmp	r3, #16
 8005612:	d05a      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	e062      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6899      	ldr	r1, [r3, #8]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f000 fb5d 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	609a      	str	r2, [r3, #8]
      break;
 8005642:	e04f      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6899      	ldr	r1, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f000 fb46 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005666:	609a      	str	r2, [r3, #8]
      break;
 8005668:	e03c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	461a      	mov	r2, r3
 8005678:	f000 faba 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2150      	movs	r1, #80	; 0x50
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb13 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005688:	e02c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	461a      	mov	r2, r3
 8005698:	f000 fad9 	bl	8005c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2160      	movs	r1, #96	; 0x60
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fb03 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 80056a8:	e01c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 fa9a 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2140      	movs	r1, #64	; 0x40
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 faf3 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 80056c8:	e00c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f000 faea 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 80056da:	e003      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e000      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a40      	ldr	r2, [pc, #256]	; (8005864 <TIM_Base_SetConfig+0x114>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576e:	d00f      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a3d      	ldr	r2, [pc, #244]	; (8005868 <TIM_Base_SetConfig+0x118>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00b      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a3c      	ldr	r2, [pc, #240]	; (800586c <TIM_Base_SetConfig+0x11c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d007      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a3b      	ldr	r2, [pc, #236]	; (8005870 <TIM_Base_SetConfig+0x120>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3a      	ldr	r2, [pc, #232]	; (8005874 <TIM_Base_SetConfig+0x124>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d108      	bne.n	80057a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2f      	ldr	r2, [pc, #188]	; (8005864 <TIM_Base_SetConfig+0x114>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d02b      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d027      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <TIM_Base_SetConfig+0x118>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d023      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2b      	ldr	r2, [pc, #172]	; (800586c <TIM_Base_SetConfig+0x11c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01f      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2a      	ldr	r2, [pc, #168]	; (8005870 <TIM_Base_SetConfig+0x120>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01b      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a29      	ldr	r2, [pc, #164]	; (8005874 <TIM_Base_SetConfig+0x124>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d017      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a28      	ldr	r2, [pc, #160]	; (8005878 <TIM_Base_SetConfig+0x128>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a27      	ldr	r2, [pc, #156]	; (800587c <TIM_Base_SetConfig+0x12c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00f      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a26      	ldr	r2, [pc, #152]	; (8005880 <TIM_Base_SetConfig+0x130>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00b      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a25      	ldr	r2, [pc, #148]	; (8005884 <TIM_Base_SetConfig+0x134>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d007      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a24      	ldr	r2, [pc, #144]	; (8005888 <TIM_Base_SetConfig+0x138>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a23      	ldr	r2, [pc, #140]	; (800588c <TIM_Base_SetConfig+0x13c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d108      	bne.n	8005814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <TIM_Base_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0xf8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <TIM_Base_SetConfig+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d103      	bne.n	8005850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	615a      	str	r2, [r3, #20]
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40000400 	.word	0x40000400
 800586c:	40000800 	.word	0x40000800
 8005870:	40000c00 	.word	0x40000c00
 8005874:	40010400 	.word	0x40010400
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800
 8005884:	40001800 	.word	0x40001800
 8005888:	40001c00 	.word	0x40001c00
 800588c:	40002000 	.word	0x40002000

08005890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0302 	bic.w	r3, r3, #2
 80058d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a20      	ldr	r2, [pc, #128]	; (8005968 <TIM_OC1_SetConfig+0xd8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_OC1_SetConfig+0x64>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1f      	ldr	r2, [pc, #124]	; (800596c <TIM_OC1_SetConfig+0xdc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10c      	bne.n	800590e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0308 	bic.w	r3, r3, #8
 80058fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a15      	ldr	r2, [pc, #84]	; (8005968 <TIM_OC1_SetConfig+0xd8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_OC1_SetConfig+0x8e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a14      	ldr	r2, [pc, #80]	; (800596c <TIM_OC1_SetConfig+0xdc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d111      	bne.n	8005942 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40010000 	.word	0x40010000
 800596c:	40010400 	.word	0x40010400

08005970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0210 	bic.w	r2, r3, #16
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0320 	bic.w	r3, r3, #32
 80059ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <TIM_OC2_SetConfig+0xe4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC2_SetConfig+0x68>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a21      	ldr	r2, [pc, #132]	; (8005a58 <TIM_OC2_SetConfig+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10d      	bne.n	80059f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <TIM_OC2_SetConfig+0xe4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_OC2_SetConfig+0x94>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <TIM_OC2_SetConfig+0xe8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d113      	bne.n	8005a2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40010400 	.word	0x40010400

08005a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <TIM_OC3_SetConfig+0xe0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC3_SetConfig+0x66>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <TIM_OC3_SetConfig+0xe4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10d      	bne.n	8005ade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <TIM_OC3_SetConfig+0xe0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC3_SetConfig+0x92>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <TIM_OC3_SetConfig+0xe4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d113      	bne.n	8005b16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40010400 	.word	0x40010400

08005b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	031b      	lsls	r3, r3, #12
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <TIM_OC4_SetConfig+0xa4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_OC4_SetConfig+0x68>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a11      	ldr	r2, [pc, #68]	; (8005bec <TIM_OC4_SetConfig+0xa8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d109      	bne.n	8005bc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400

08005bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 030a 	bic.w	r3, r3, #10
 8005c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	031b      	lsls	r3, r3, #12
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f043 0307 	orr.w	r3, r3, #7
 8005cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	609a      	str	r2, [r3, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	609a      	str	r2, [r3, #8]
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	2201      	movs	r2, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1a      	ldr	r2, [r3, #32]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e05a      	b.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd4:	d01d      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10c      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40010400 	.word	0x40010400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40001800 	.word	0x40001800

08005e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e03f      	b.n	8005f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fb ffd4 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	; 0x24
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fddb 	bl	8006a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b08a      	sub	sp, #40	; 0x28
 8005f2e:	af02      	add	r7, sp, #8
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d17c      	bne.n	8006044 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_UART_Transmit+0x2c>
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e075      	b.n	8006046 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_UART_Transmit+0x3e>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e06e      	b.n	8006046 <HAL_UART_Transmit+0x11c>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2221      	movs	r2, #33	; 0x21
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f7e:	f7fc fa2d 	bl	80023dc <HAL_GetTick>
 8005f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	88fa      	ldrh	r2, [r7, #6]
 8005f88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f98:	d108      	bne.n	8005fac <HAL_UART_Transmit+0x82>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	e003      	b.n	8005fb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fbc:	e02a      	b.n	8006014 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2180      	movs	r1, #128	; 0x80
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fb1f 	bl	800660c <UART_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e036      	b.n	8006046 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	61bb      	str	r3, [r7, #24]
 8005ff4:	e007      	b.n	8006006 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	3301      	adds	r3, #1
 8006004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1cf      	bne.n	8005fbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 faef 	bl	800660c <UART_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e006      	b.n	8006046 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	4613      	mov	r3, r2
 800605a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b20      	cmp	r3, #32
 8006066:	d11d      	bne.n	80060a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_UART_Receive_IT+0x26>
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e016      	b.n	80060a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_UART_Receive_IT+0x38>
 8006082:	2302      	movs	r3, #2
 8006084:	e00f      	b.n	80060a6 <HAL_UART_Receive_IT+0x58>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	461a      	mov	r2, r3
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fb24 	bl	80066e8 <UART_Start_Receive_IT>
 80060a0:	4603      	mov	r3, r0
 80060a2:	e000      	b.n	80060a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b0ba      	sub	sp, #232	; 0xe8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <HAL_UART_IRQHandler+0x66>
 8006102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fc03 	bl	800691a <UART_Receive_IT>
      return;
 8006114:	e256      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80de 	beq.w	80062dc <HAL_UART_IRQHandler+0x22c>
 8006120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80d1 	beq.w	80062dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0xae>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0201 	orr.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <HAL_UART_IRQHandler+0xd2>
 800616a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f043 0202 	orr.w	r2, r3, #2
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_UART_IRQHandler+0xf6>
 800618e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f043 0204 	orr.w	r2, r3, #4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <HAL_UART_IRQHandler+0x126>
 80061b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 81ed 	beq.w	80065ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <HAL_UART_IRQHandler+0x14e>
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb8e 	bl	800691a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <HAL_UART_IRQHandler+0x17a>
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d04f      	beq.n	80062ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa96 	bl	800675c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d141      	bne.n	80062c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800626a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800626e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d9      	bne.n	800623e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d013      	beq.n	80062ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	4a7d      	ldr	r2, [pc, #500]	; (800648c <HAL_UART_IRQHandler+0x3dc>)
 8006298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fc ff66 	bl	8003170 <HAL_DMA_Abort_IT>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d016      	beq.n	80062d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	e00e      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f990 	bl	80065e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00a      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f98c 	bl	80065e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e006      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f988 	bl	80065e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062d6:	e170      	b.n	80065ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	bf00      	nop
    return;
 80062da:	e16e      	b.n	80065ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f040 814a 	bne.w	800657a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8143 	beq.w	800657a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 813c 	beq.w	800657a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	f040 80b4 	bne.w	8006490 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8140 	beq.w	80065be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006346:	429a      	cmp	r2, r3
 8006348:	f080 8139 	bcs.w	80065be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	f000 8088 	beq.w	8006472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800638e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800639a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1d9      	bne.n	8006362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3314      	adds	r3, #20
 80063b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e1      	bne.n	80063ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3314      	adds	r3, #20
 80063f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3314      	adds	r3, #20
 800640a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800640e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e3      	bne.n	80063ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006442:	f023 0310 	bic.w	r3, r3, #16
 8006446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006454:	65ba      	str	r2, [r7, #88]	; 0x58
 8006456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800645a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e3      	bne.n	8006430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	4618      	mov	r0, r3
 800646e:	f7fc fe0f 	bl	8003090 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800647a:	b29b      	uxth	r3, r3
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8b6 	bl	80065f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006488:	e099      	b.n	80065be <HAL_UART_IRQHandler+0x50e>
 800648a:	bf00      	nop
 800648c:	08006823 	.word	0x08006823
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006498:	b29b      	uxth	r3, r3
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 808b 	beq.w	80065c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8086 	beq.w	80065c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064da:	647a      	str	r2, [r7, #68]	; 0x44
 80064dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e3      	bne.n	80064b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	623b      	str	r3, [r7, #32]
   return(result);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006512:	633a      	str	r2, [r7, #48]	; 0x30
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	60fb      	str	r3, [r7, #12]
   return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006558:	61fa      	str	r2, [r7, #28]
 800655a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	617b      	str	r3, [r7, #20]
   return(result);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800656c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f83e 	bl	80065f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006578:	e023      	b.n	80065c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_UART_IRQHandler+0x4ea>
 8006586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f959 	bl	800684a <UART_Transmit_IT>
    return;
 8006598:	e014      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <HAL_UART_IRQHandler+0x514>
 80065a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f999 	bl	80068ea <UART_EndTransmit_IT>
    return;
 80065b8:	e004      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
    return;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
      return;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
      return;
 80065c2:	bf00      	nop
  }
}
 80065c4:	37e8      	adds	r7, #232	; 0xe8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b090      	sub	sp, #64	; 0x40
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661c:	e050      	b.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d04c      	beq.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <UART_WaitOnFlagUntilTimeout+0x30>
 800662c:	f7fb fed6 	bl	80023dc <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006638:	429a      	cmp	r2, r3
 800663a:	d241      	bcs.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	330c      	adds	r3, #12
 800665a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800665c:	637a      	str	r2, [r7, #52]	; 0x34
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	613b      	str	r3, [r7, #16]
   return(result);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006690:	623a      	str	r2, [r7, #32]
 8006692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	69f9      	ldr	r1, [r7, #28]
 8006696:	6a3a      	ldr	r2, [r7, #32]
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	61bb      	str	r3, [r7, #24]
   return(result);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e5      	bne.n	8006670 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e00f      	b.n	80066e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4013      	ands	r3, r2
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d09f      	beq.n	800661e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3740      	adds	r7, #64	; 0x40
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	88fa      	ldrh	r2, [r7, #6]
 8006706:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2222      	movs	r2, #34	; 0x22
 8006712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800672c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695a      	ldr	r2, [r3, #20]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0201 	orr.w	r2, r2, #1
 800673c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0220 	orr.w	r2, r2, #32
 800674c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b095      	sub	sp, #84	; 0x54
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006784:	643a      	str	r2, [r7, #64]	; 0x40
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800678a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e5      	bne.n	8006764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3314      	adds	r3, #20
 800679e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e5      	bne.n	8006798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d119      	bne.n	8006808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0310 	bic.w	r3, r3, #16
 80067ea:	647b      	str	r3, [r7, #68]	; 0x44
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f4:	61ba      	str	r2, [r7, #24]
 80067f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6979      	ldr	r1, [r7, #20]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	613b      	str	r3, [r7, #16]
   return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006816:	bf00      	nop
 8006818:	3754      	adds	r7, #84	; 0x54
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff fecf 	bl	80065e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b21      	cmp	r3, #33	; 0x21
 800685c:	d13e      	bne.n	80068dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d114      	bne.n	8006892 <UART_Transmit_IT+0x48>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d110      	bne.n	8006892 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006884:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	621a      	str	r2, [r3, #32]
 8006890:	e008      	b.n	80068a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	1c59      	adds	r1, r3, #1
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6211      	str	r1, [r2, #32]
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4619      	mov	r1, r3
 80068b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10f      	bne.n	80068d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068dc:	2302      	movs	r3, #2
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fe5e 	bl	80065cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b08c      	sub	sp, #48	; 0x30
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b22      	cmp	r3, #34	; 0x22
 800692c:	f040 80ab 	bne.w	8006a86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006938:	d117      	bne.n	800696a <UART_Receive_IT+0x50>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d113      	bne.n	800696a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006958:	b29a      	uxth	r2, r3
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
 8006968:	e026      	b.n	80069b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d007      	beq.n	800698e <UART_Receive_IT+0x74>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <UART_Receive_IT+0x82>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	b2da      	uxtb	r2, r3
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e008      	b.n	80069ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4619      	mov	r1, r3
 80069c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d15a      	bne.n	8006a82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0220 	bic.w	r2, r2, #32
 80069da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0201 	bic.w	r2, r2, #1
 80069fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d135      	bne.n	8006a78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	613b      	str	r3, [r7, #16]
   return(result);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f023 0310 	bic.w	r3, r3, #16
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a32:	623a      	str	r2, [r7, #32]
 8006a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	69f9      	ldr	r1, [r7, #28]
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d10a      	bne.n	8006a6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff fdbf 	bl	80065f4 <HAL_UARTEx_RxEventCallback>
 8006a76:	e002      	b.n	8006a7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7fb fb9d 	bl	80021b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e002      	b.n	8006a88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3730      	adds	r7, #48	; 0x30
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	b09f      	sub	sp, #124	; 0x7c
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	68d9      	ldr	r1, [r3, #12]
 8006aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	ea40 0301 	orr.w	r3, r0, r1
 8006ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ad4:	f021 010c 	bic.w	r1, r1, #12
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	6999      	ldr	r1, [r3, #24]
 8006af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	ea40 0301 	orr.w	r3, r0, r1
 8006af8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4bc5      	ldr	r3, [pc, #788]	; (8006e14 <UART_SetConfig+0x384>)
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d004      	beq.n	8006b0e <UART_SetConfig+0x7e>
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4bc3      	ldr	r3, [pc, #780]	; (8006e18 <UART_SetConfig+0x388>)
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d103      	bne.n	8006b16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b0e:	f7fd fe9b 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 8006b12:	6778      	str	r0, [r7, #116]	; 0x74
 8006b14:	e002      	b.n	8006b1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b16:	f7fd fe83 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8006b1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b24:	f040 80b6 	bne.w	8006c94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	f04f 0500 	mov.w	r5, #0
 8006b30:	4622      	mov	r2, r4
 8006b32:	462b      	mov	r3, r5
 8006b34:	1891      	adds	r1, r2, r2
 8006b36:	6439      	str	r1, [r7, #64]	; 0x40
 8006b38:	415b      	adcs	r3, r3
 8006b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b40:	1912      	adds	r2, r2, r4
 8006b42:	eb45 0303 	adc.w	r3, r5, r3
 8006b46:	f04f 0000 	mov.w	r0, #0
 8006b4a:	f04f 0100 	mov.w	r1, #0
 8006b4e:	00d9      	lsls	r1, r3, #3
 8006b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b54:	00d0      	lsls	r0, r2, #3
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	1911      	adds	r1, r2, r4
 8006b5c:	6639      	str	r1, [r7, #96]	; 0x60
 8006b5e:	416b      	adcs	r3, r5
 8006b60:	667b      	str	r3, [r7, #100]	; 0x64
 8006b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	1891      	adds	r1, r2, r2
 8006b6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b70:	415b      	adcs	r3, r3
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b7c:	f7f9 fb80 	bl	8000280 <__aeabi_uldivmod>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4ba5      	ldr	r3, [pc, #660]	; (8006e1c <UART_SetConfig+0x38c>)
 8006b86:	fba3 2302 	umull	r2, r3, r3, r2
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	011e      	lsls	r6, r3, #4
 8006b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b90:	461c      	mov	r4, r3
 8006b92:	f04f 0500 	mov.w	r5, #0
 8006b96:	4622      	mov	r2, r4
 8006b98:	462b      	mov	r3, r5
 8006b9a:	1891      	adds	r1, r2, r2
 8006b9c:	6339      	str	r1, [r7, #48]	; 0x30
 8006b9e:	415b      	adcs	r3, r3
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ba6:	1912      	adds	r2, r2, r4
 8006ba8:	eb45 0303 	adc.w	r3, r5, r3
 8006bac:	f04f 0000 	mov.w	r0, #0
 8006bb0:	f04f 0100 	mov.w	r1, #0
 8006bb4:	00d9      	lsls	r1, r3, #3
 8006bb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bba:	00d0      	lsls	r0, r2, #3
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	1911      	adds	r1, r2, r4
 8006bc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bc4:	416b      	adcs	r3, r5
 8006bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	1891      	adds	r1, r2, r2
 8006bd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bd6:	415b      	adcs	r3, r3
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006be2:	f7f9 fb4d 	bl	8000280 <__aeabi_uldivmod>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4b8c      	ldr	r3, [pc, #560]	; (8006e1c <UART_SetConfig+0x38c>)
 8006bec:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	2164      	movs	r1, #100	; 0x64
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	3332      	adds	r3, #50	; 0x32
 8006bfe:	4a87      	ldr	r2, [pc, #540]	; (8006e1c <UART_SetConfig+0x38c>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	095b      	lsrs	r3, r3, #5
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c0c:	441e      	add	r6, r3
 8006c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c10:	4618      	mov	r0, r3
 8006c12:	f04f 0100 	mov.w	r1, #0
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	1894      	adds	r4, r2, r2
 8006c1c:	623c      	str	r4, [r7, #32]
 8006c1e:	415b      	adcs	r3, r3
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
 8006c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c26:	1812      	adds	r2, r2, r0
 8006c28:	eb41 0303 	adc.w	r3, r1, r3
 8006c2c:	f04f 0400 	mov.w	r4, #0
 8006c30:	f04f 0500 	mov.w	r5, #0
 8006c34:	00dd      	lsls	r5, r3, #3
 8006c36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c3a:	00d4      	lsls	r4, r2, #3
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	462b      	mov	r3, r5
 8006c40:	1814      	adds	r4, r2, r0
 8006c42:	653c      	str	r4, [r7, #80]	; 0x50
 8006c44:	414b      	adcs	r3, r1
 8006c46:	657b      	str	r3, [r7, #84]	; 0x54
 8006c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	1891      	adds	r1, r2, r2
 8006c54:	61b9      	str	r1, [r7, #24]
 8006c56:	415b      	adcs	r3, r3
 8006c58:	61fb      	str	r3, [r7, #28]
 8006c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c62:	f7f9 fb0d 	bl	8000280 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4b6c      	ldr	r3, [pc, #432]	; (8006e1c <UART_SetConfig+0x38c>)
 8006c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	2164      	movs	r1, #100	; 0x64
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	3332      	adds	r3, #50	; 0x32
 8006c7e:	4a67      	ldr	r2, [pc, #412]	; (8006e1c <UART_SetConfig+0x38c>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 0207 	and.w	r2, r3, #7
 8006c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4432      	add	r2, r6
 8006c90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c92:	e0b9      	b.n	8006e08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c96:	461c      	mov	r4, r3
 8006c98:	f04f 0500 	mov.w	r5, #0
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	1891      	adds	r1, r2, r2
 8006ca2:	6139      	str	r1, [r7, #16]
 8006ca4:	415b      	adcs	r3, r3
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cac:	1912      	adds	r2, r2, r4
 8006cae:	eb45 0303 	adc.w	r3, r5, r3
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f04f 0100 	mov.w	r1, #0
 8006cba:	00d9      	lsls	r1, r3, #3
 8006cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cc0:	00d0      	lsls	r0, r2, #3
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	eb12 0804 	adds.w	r8, r2, r4
 8006cca:	eb43 0905 	adc.w	r9, r3, r5
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	008b      	lsls	r3, r1, #2
 8006ce2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ce6:	0082      	lsls	r2, r0, #2
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 fac8 	bl	8000280 <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4b49      	ldr	r3, [pc, #292]	; (8006e1c <UART_SetConfig+0x38c>)
 8006cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	011e      	lsls	r6, r3, #4
 8006cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d00:	4618      	mov	r0, r3
 8006d02:	f04f 0100 	mov.w	r1, #0
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	1894      	adds	r4, r2, r2
 8006d0c:	60bc      	str	r4, [r7, #8]
 8006d0e:	415b      	adcs	r3, r3
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d16:	1812      	adds	r2, r2, r0
 8006d18:	eb41 0303 	adc.w	r3, r1, r3
 8006d1c:	f04f 0400 	mov.w	r4, #0
 8006d20:	f04f 0500 	mov.w	r5, #0
 8006d24:	00dd      	lsls	r5, r3, #3
 8006d26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d2a:	00d4      	lsls	r4, r2, #3
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	462b      	mov	r3, r5
 8006d30:	1814      	adds	r4, r2, r0
 8006d32:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d34:	414b      	adcs	r3, r1
 8006d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f04f 0100 	mov.w	r1, #0
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	008b      	lsls	r3, r1, #2
 8006d4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d50:	0082      	lsls	r2, r0, #2
 8006d52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d56:	f7f9 fa93 	bl	8000280 <__aeabi_uldivmod>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4b2f      	ldr	r3, [pc, #188]	; (8006e1c <UART_SetConfig+0x38c>)
 8006d60:	fba3 1302 	umull	r1, r3, r3, r2
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	2164      	movs	r1, #100	; 0x64
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	3332      	adds	r3, #50	; 0x32
 8006d72:	4a2a      	ldr	r2, [pc, #168]	; (8006e1c <UART_SetConfig+0x38c>)
 8006d74:	fba2 2303 	umull	r2, r3, r2, r3
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d7e:	441e      	add	r6, r3
 8006d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d82:	4618      	mov	r0, r3
 8006d84:	f04f 0100 	mov.w	r1, #0
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	1894      	adds	r4, r2, r2
 8006d8e:	603c      	str	r4, [r7, #0]
 8006d90:	415b      	adcs	r3, r3
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d98:	1812      	adds	r2, r2, r0
 8006d9a:	eb41 0303 	adc.w	r3, r1, r3
 8006d9e:	f04f 0400 	mov.w	r4, #0
 8006da2:	f04f 0500 	mov.w	r5, #0
 8006da6:	00dd      	lsls	r5, r3, #3
 8006da8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dac:	00d4      	lsls	r4, r2, #3
 8006dae:	4622      	mov	r2, r4
 8006db0:	462b      	mov	r3, r5
 8006db2:	eb12 0a00 	adds.w	sl, r2, r0
 8006db6:	eb43 0b01 	adc.w	fp, r3, r1
 8006dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f04f 0100 	mov.w	r1, #0
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	008b      	lsls	r3, r1, #2
 8006dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dd2:	0082      	lsls	r2, r0, #2
 8006dd4:	4650      	mov	r0, sl
 8006dd6:	4659      	mov	r1, fp
 8006dd8:	f7f9 fa52 	bl	8000280 <__aeabi_uldivmod>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4b0e      	ldr	r3, [pc, #56]	; (8006e1c <UART_SetConfig+0x38c>)
 8006de2:	fba3 1302 	umull	r1, r3, r3, r2
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	2164      	movs	r1, #100	; 0x64
 8006dea:	fb01 f303 	mul.w	r3, r1, r3
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	3332      	adds	r3, #50	; 0x32
 8006df4:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <UART_SetConfig+0x38c>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	f003 020f 	and.w	r2, r3, #15
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4432      	add	r2, r6
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	377c      	adds	r7, #124	; 0x7c
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e12:	bf00      	nop
 8006e14:	40011000 	.word	0x40011000
 8006e18:	40011400 	.word	0x40011400
 8006e1c:	51eb851f 	.word	0x51eb851f

08006e20 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e38:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <FSMC_NORSRAM_Init+0xa0>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e4a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006e50:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006e56:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006e5c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006e62:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006e68:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e6e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006e74:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006e7a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006e80:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006e86:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006e8c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d103      	bne.n	8006ea4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	fff00080 	.word	0xfff00080

08006ec4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ede:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ee6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ef2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006efa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f02:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f0c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	3b02      	subs	r3, #2
 8006f14:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f16:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6979      	ldr	r1, [r7, #20]
 8006f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f58:	d122      	bne.n	8006fa0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f76:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f7e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f86:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f8c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6979      	ldr	r1, [r7, #20]
 8006f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f9e:	e005      	b.n	8006fac <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	cff00000 	.word	0xcff00000

08006fc0 <__errno>:
 8006fc0:	4b01      	ldr	r3, [pc, #4]	; (8006fc8 <__errno+0x8>)
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000014 	.word	0x20000014

08006fcc <__libc_init_array>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	4d0d      	ldr	r5, [pc, #52]	; (8007004 <__libc_init_array+0x38>)
 8006fd0:	4c0d      	ldr	r4, [pc, #52]	; (8007008 <__libc_init_array+0x3c>)
 8006fd2:	1b64      	subs	r4, r4, r5
 8006fd4:	10a4      	asrs	r4, r4, #2
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	42a6      	cmp	r6, r4
 8006fda:	d109      	bne.n	8006ff0 <__libc_init_array+0x24>
 8006fdc:	4d0b      	ldr	r5, [pc, #44]	; (800700c <__libc_init_array+0x40>)
 8006fde:	4c0c      	ldr	r4, [pc, #48]	; (8007010 <__libc_init_array+0x44>)
 8006fe0:	f000 fc4e 	bl	8007880 <_init>
 8006fe4:	1b64      	subs	r4, r4, r5
 8006fe6:	10a4      	asrs	r4, r4, #2
 8006fe8:	2600      	movs	r6, #0
 8006fea:	42a6      	cmp	r6, r4
 8006fec:	d105      	bne.n	8006ffa <__libc_init_array+0x2e>
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff4:	4798      	blx	r3
 8006ff6:	3601      	adds	r6, #1
 8006ff8:	e7ee      	b.n	8006fd8 <__libc_init_array+0xc>
 8006ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffe:	4798      	blx	r3
 8007000:	3601      	adds	r6, #1
 8007002:	e7f2      	b.n	8006fea <__libc_init_array+0x1e>
 8007004:	0800a91c 	.word	0x0800a91c
 8007008:	0800a91c 	.word	0x0800a91c
 800700c:	0800a91c 	.word	0x0800a91c
 8007010:	0800a920 	.word	0x0800a920

08007014 <memset>:
 8007014:	4402      	add	r2, r0
 8007016:	4603      	mov	r3, r0
 8007018:	4293      	cmp	r3, r2
 800701a:	d100      	bne.n	800701e <memset+0xa>
 800701c:	4770      	bx	lr
 800701e:	f803 1b01 	strb.w	r1, [r3], #1
 8007022:	e7f9      	b.n	8007018 <memset+0x4>

08007024 <siprintf>:
 8007024:	b40e      	push	{r1, r2, r3}
 8007026:	b500      	push	{lr}
 8007028:	b09c      	sub	sp, #112	; 0x70
 800702a:	ab1d      	add	r3, sp, #116	; 0x74
 800702c:	9002      	str	r0, [sp, #8]
 800702e:	9006      	str	r0, [sp, #24]
 8007030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007034:	4809      	ldr	r0, [pc, #36]	; (800705c <siprintf+0x38>)
 8007036:	9107      	str	r1, [sp, #28]
 8007038:	9104      	str	r1, [sp, #16]
 800703a:	4909      	ldr	r1, [pc, #36]	; (8007060 <siprintf+0x3c>)
 800703c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007040:	9105      	str	r1, [sp, #20]
 8007042:	6800      	ldr	r0, [r0, #0]
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	a902      	add	r1, sp, #8
 8007048:	f000 f868 	bl	800711c <_svfiprintf_r>
 800704c:	9b02      	ldr	r3, [sp, #8]
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	b01c      	add	sp, #112	; 0x70
 8007054:	f85d eb04 	ldr.w	lr, [sp], #4
 8007058:	b003      	add	sp, #12
 800705a:	4770      	bx	lr
 800705c:	20000014 	.word	0x20000014
 8007060:	ffff0208 	.word	0xffff0208

08007064 <__ssputs_r>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	688e      	ldr	r6, [r1, #8]
 800706a:	429e      	cmp	r6, r3
 800706c:	4682      	mov	sl, r0
 800706e:	460c      	mov	r4, r1
 8007070:	4690      	mov	r8, r2
 8007072:	461f      	mov	r7, r3
 8007074:	d838      	bhi.n	80070e8 <__ssputs_r+0x84>
 8007076:	898a      	ldrh	r2, [r1, #12]
 8007078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800707c:	d032      	beq.n	80070e4 <__ssputs_r+0x80>
 800707e:	6825      	ldr	r5, [r4, #0]
 8007080:	6909      	ldr	r1, [r1, #16]
 8007082:	eba5 0901 	sub.w	r9, r5, r1
 8007086:	6965      	ldr	r5, [r4, #20]
 8007088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800708c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007090:	3301      	adds	r3, #1
 8007092:	444b      	add	r3, r9
 8007094:	106d      	asrs	r5, r5, #1
 8007096:	429d      	cmp	r5, r3
 8007098:	bf38      	it	cc
 800709a:	461d      	movcc	r5, r3
 800709c:	0553      	lsls	r3, r2, #21
 800709e:	d531      	bpl.n	8007104 <__ssputs_r+0xa0>
 80070a0:	4629      	mov	r1, r5
 80070a2:	f000 fb47 	bl	8007734 <_malloc_r>
 80070a6:	4606      	mov	r6, r0
 80070a8:	b950      	cbnz	r0, 80070c0 <__ssputs_r+0x5c>
 80070aa:	230c      	movs	r3, #12
 80070ac:	f8ca 3000 	str.w	r3, [sl]
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c0:	6921      	ldr	r1, [r4, #16]
 80070c2:	464a      	mov	r2, r9
 80070c4:	f000 fabe 	bl	8007644 <memcpy>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	6126      	str	r6, [r4, #16]
 80070d6:	6165      	str	r5, [r4, #20]
 80070d8:	444e      	add	r6, r9
 80070da:	eba5 0509 	sub.w	r5, r5, r9
 80070de:	6026      	str	r6, [r4, #0]
 80070e0:	60a5      	str	r5, [r4, #8]
 80070e2:	463e      	mov	r6, r7
 80070e4:	42be      	cmp	r6, r7
 80070e6:	d900      	bls.n	80070ea <__ssputs_r+0x86>
 80070e8:	463e      	mov	r6, r7
 80070ea:	4632      	mov	r2, r6
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	4641      	mov	r1, r8
 80070f0:	f000 fab6 	bl	8007660 <memmove>
 80070f4:	68a3      	ldr	r3, [r4, #8]
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	1b9b      	subs	r3, r3, r6
 80070fa:	4432      	add	r2, r6
 80070fc:	60a3      	str	r3, [r4, #8]
 80070fe:	6022      	str	r2, [r4, #0]
 8007100:	2000      	movs	r0, #0
 8007102:	e7db      	b.n	80070bc <__ssputs_r+0x58>
 8007104:	462a      	mov	r2, r5
 8007106:	f000 fb6f 	bl	80077e8 <_realloc_r>
 800710a:	4606      	mov	r6, r0
 800710c:	2800      	cmp	r0, #0
 800710e:	d1e1      	bne.n	80070d4 <__ssputs_r+0x70>
 8007110:	6921      	ldr	r1, [r4, #16]
 8007112:	4650      	mov	r0, sl
 8007114:	f000 fabe 	bl	8007694 <_free_r>
 8007118:	e7c7      	b.n	80070aa <__ssputs_r+0x46>
	...

0800711c <_svfiprintf_r>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	4698      	mov	r8, r3
 8007122:	898b      	ldrh	r3, [r1, #12]
 8007124:	061b      	lsls	r3, r3, #24
 8007126:	b09d      	sub	sp, #116	; 0x74
 8007128:	4607      	mov	r7, r0
 800712a:	460d      	mov	r5, r1
 800712c:	4614      	mov	r4, r2
 800712e:	d50e      	bpl.n	800714e <_svfiprintf_r+0x32>
 8007130:	690b      	ldr	r3, [r1, #16]
 8007132:	b963      	cbnz	r3, 800714e <_svfiprintf_r+0x32>
 8007134:	2140      	movs	r1, #64	; 0x40
 8007136:	f000 fafd 	bl	8007734 <_malloc_r>
 800713a:	6028      	str	r0, [r5, #0]
 800713c:	6128      	str	r0, [r5, #16]
 800713e:	b920      	cbnz	r0, 800714a <_svfiprintf_r+0x2e>
 8007140:	230c      	movs	r3, #12
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	e0d1      	b.n	80072ee <_svfiprintf_r+0x1d2>
 800714a:	2340      	movs	r3, #64	; 0x40
 800714c:	616b      	str	r3, [r5, #20]
 800714e:	2300      	movs	r3, #0
 8007150:	9309      	str	r3, [sp, #36]	; 0x24
 8007152:	2320      	movs	r3, #32
 8007154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007158:	f8cd 800c 	str.w	r8, [sp, #12]
 800715c:	2330      	movs	r3, #48	; 0x30
 800715e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007308 <_svfiprintf_r+0x1ec>
 8007162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007166:	f04f 0901 	mov.w	r9, #1
 800716a:	4623      	mov	r3, r4
 800716c:	469a      	mov	sl, r3
 800716e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007172:	b10a      	cbz	r2, 8007178 <_svfiprintf_r+0x5c>
 8007174:	2a25      	cmp	r2, #37	; 0x25
 8007176:	d1f9      	bne.n	800716c <_svfiprintf_r+0x50>
 8007178:	ebba 0b04 	subs.w	fp, sl, r4
 800717c:	d00b      	beq.n	8007196 <_svfiprintf_r+0x7a>
 800717e:	465b      	mov	r3, fp
 8007180:	4622      	mov	r2, r4
 8007182:	4629      	mov	r1, r5
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff ff6d 	bl	8007064 <__ssputs_r>
 800718a:	3001      	adds	r0, #1
 800718c:	f000 80aa 	beq.w	80072e4 <_svfiprintf_r+0x1c8>
 8007190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007192:	445a      	add	r2, fp
 8007194:	9209      	str	r2, [sp, #36]	; 0x24
 8007196:	f89a 3000 	ldrb.w	r3, [sl]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80a2 	beq.w	80072e4 <_svfiprintf_r+0x1c8>
 80071a0:	2300      	movs	r3, #0
 80071a2:	f04f 32ff 	mov.w	r2, #4294967295
 80071a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071aa:	f10a 0a01 	add.w	sl, sl, #1
 80071ae:	9304      	str	r3, [sp, #16]
 80071b0:	9307      	str	r3, [sp, #28]
 80071b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071b6:	931a      	str	r3, [sp, #104]	; 0x68
 80071b8:	4654      	mov	r4, sl
 80071ba:	2205      	movs	r2, #5
 80071bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c0:	4851      	ldr	r0, [pc, #324]	; (8007308 <_svfiprintf_r+0x1ec>)
 80071c2:	f7f9 f80d 	bl	80001e0 <memchr>
 80071c6:	9a04      	ldr	r2, [sp, #16]
 80071c8:	b9d8      	cbnz	r0, 8007202 <_svfiprintf_r+0xe6>
 80071ca:	06d0      	lsls	r0, r2, #27
 80071cc:	bf44      	itt	mi
 80071ce:	2320      	movmi	r3, #32
 80071d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d4:	0711      	lsls	r1, r2, #28
 80071d6:	bf44      	itt	mi
 80071d8:	232b      	movmi	r3, #43	; 0x2b
 80071da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071de:	f89a 3000 	ldrb.w	r3, [sl]
 80071e2:	2b2a      	cmp	r3, #42	; 0x2a
 80071e4:	d015      	beq.n	8007212 <_svfiprintf_r+0xf6>
 80071e6:	9a07      	ldr	r2, [sp, #28]
 80071e8:	4654      	mov	r4, sl
 80071ea:	2000      	movs	r0, #0
 80071ec:	f04f 0c0a 	mov.w	ip, #10
 80071f0:	4621      	mov	r1, r4
 80071f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071f6:	3b30      	subs	r3, #48	; 0x30
 80071f8:	2b09      	cmp	r3, #9
 80071fa:	d94e      	bls.n	800729a <_svfiprintf_r+0x17e>
 80071fc:	b1b0      	cbz	r0, 800722c <_svfiprintf_r+0x110>
 80071fe:	9207      	str	r2, [sp, #28]
 8007200:	e014      	b.n	800722c <_svfiprintf_r+0x110>
 8007202:	eba0 0308 	sub.w	r3, r0, r8
 8007206:	fa09 f303 	lsl.w	r3, r9, r3
 800720a:	4313      	orrs	r3, r2
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	46a2      	mov	sl, r4
 8007210:	e7d2      	b.n	80071b8 <_svfiprintf_r+0x9c>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	1d19      	adds	r1, r3, #4
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	9103      	str	r1, [sp, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	bfbb      	ittet	lt
 800721e:	425b      	neglt	r3, r3
 8007220:	f042 0202 	orrlt.w	r2, r2, #2
 8007224:	9307      	strge	r3, [sp, #28]
 8007226:	9307      	strlt	r3, [sp, #28]
 8007228:	bfb8      	it	lt
 800722a:	9204      	strlt	r2, [sp, #16]
 800722c:	7823      	ldrb	r3, [r4, #0]
 800722e:	2b2e      	cmp	r3, #46	; 0x2e
 8007230:	d10c      	bne.n	800724c <_svfiprintf_r+0x130>
 8007232:	7863      	ldrb	r3, [r4, #1]
 8007234:	2b2a      	cmp	r3, #42	; 0x2a
 8007236:	d135      	bne.n	80072a4 <_svfiprintf_r+0x188>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	1d1a      	adds	r2, r3, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	9203      	str	r2, [sp, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	bfb8      	it	lt
 8007244:	f04f 33ff 	movlt.w	r3, #4294967295
 8007248:	3402      	adds	r4, #2
 800724a:	9305      	str	r3, [sp, #20]
 800724c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007318 <_svfiprintf_r+0x1fc>
 8007250:	7821      	ldrb	r1, [r4, #0]
 8007252:	2203      	movs	r2, #3
 8007254:	4650      	mov	r0, sl
 8007256:	f7f8 ffc3 	bl	80001e0 <memchr>
 800725a:	b140      	cbz	r0, 800726e <_svfiprintf_r+0x152>
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	eba0 000a 	sub.w	r0, r0, sl
 8007262:	fa03 f000 	lsl.w	r0, r3, r0
 8007266:	9b04      	ldr	r3, [sp, #16]
 8007268:	4303      	orrs	r3, r0
 800726a:	3401      	adds	r4, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007272:	4826      	ldr	r0, [pc, #152]	; (800730c <_svfiprintf_r+0x1f0>)
 8007274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007278:	2206      	movs	r2, #6
 800727a:	f7f8 ffb1 	bl	80001e0 <memchr>
 800727e:	2800      	cmp	r0, #0
 8007280:	d038      	beq.n	80072f4 <_svfiprintf_r+0x1d8>
 8007282:	4b23      	ldr	r3, [pc, #140]	; (8007310 <_svfiprintf_r+0x1f4>)
 8007284:	bb1b      	cbnz	r3, 80072ce <_svfiprintf_r+0x1b2>
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	3307      	adds	r3, #7
 800728a:	f023 0307 	bic.w	r3, r3, #7
 800728e:	3308      	adds	r3, #8
 8007290:	9303      	str	r3, [sp, #12]
 8007292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007294:	4433      	add	r3, r6
 8007296:	9309      	str	r3, [sp, #36]	; 0x24
 8007298:	e767      	b.n	800716a <_svfiprintf_r+0x4e>
 800729a:	fb0c 3202 	mla	r2, ip, r2, r3
 800729e:	460c      	mov	r4, r1
 80072a0:	2001      	movs	r0, #1
 80072a2:	e7a5      	b.n	80071f0 <_svfiprintf_r+0xd4>
 80072a4:	2300      	movs	r3, #0
 80072a6:	3401      	adds	r4, #1
 80072a8:	9305      	str	r3, [sp, #20]
 80072aa:	4619      	mov	r1, r3
 80072ac:	f04f 0c0a 	mov.w	ip, #10
 80072b0:	4620      	mov	r0, r4
 80072b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072b6:	3a30      	subs	r2, #48	; 0x30
 80072b8:	2a09      	cmp	r2, #9
 80072ba:	d903      	bls.n	80072c4 <_svfiprintf_r+0x1a8>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0c5      	beq.n	800724c <_svfiprintf_r+0x130>
 80072c0:	9105      	str	r1, [sp, #20]
 80072c2:	e7c3      	b.n	800724c <_svfiprintf_r+0x130>
 80072c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072c8:	4604      	mov	r4, r0
 80072ca:	2301      	movs	r3, #1
 80072cc:	e7f0      	b.n	80072b0 <_svfiprintf_r+0x194>
 80072ce:	ab03      	add	r3, sp, #12
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	462a      	mov	r2, r5
 80072d4:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <_svfiprintf_r+0x1f8>)
 80072d6:	a904      	add	r1, sp, #16
 80072d8:	4638      	mov	r0, r7
 80072da:	f3af 8000 	nop.w
 80072de:	1c42      	adds	r2, r0, #1
 80072e0:	4606      	mov	r6, r0
 80072e2:	d1d6      	bne.n	8007292 <_svfiprintf_r+0x176>
 80072e4:	89ab      	ldrh	r3, [r5, #12]
 80072e6:	065b      	lsls	r3, r3, #25
 80072e8:	f53f af2c 	bmi.w	8007144 <_svfiprintf_r+0x28>
 80072ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ee:	b01d      	add	sp, #116	; 0x74
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	ab03      	add	r3, sp, #12
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	462a      	mov	r2, r5
 80072fa:	4b06      	ldr	r3, [pc, #24]	; (8007314 <_svfiprintf_r+0x1f8>)
 80072fc:	a904      	add	r1, sp, #16
 80072fe:	4638      	mov	r0, r7
 8007300:	f000 f87a 	bl	80073f8 <_printf_i>
 8007304:	e7eb      	b.n	80072de <_svfiprintf_r+0x1c2>
 8007306:	bf00      	nop
 8007308:	0800a8e0 	.word	0x0800a8e0
 800730c:	0800a8ea 	.word	0x0800a8ea
 8007310:	00000000 	.word	0x00000000
 8007314:	08007065 	.word	0x08007065
 8007318:	0800a8e6 	.word	0x0800a8e6

0800731c <_printf_common>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	4616      	mov	r6, r2
 8007322:	4699      	mov	r9, r3
 8007324:	688a      	ldr	r2, [r1, #8]
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800732c:	4293      	cmp	r3, r2
 800732e:	bfb8      	it	lt
 8007330:	4613      	movlt	r3, r2
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007338:	4607      	mov	r7, r0
 800733a:	460c      	mov	r4, r1
 800733c:	b10a      	cbz	r2, 8007342 <_printf_common+0x26>
 800733e:	3301      	adds	r3, #1
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	0699      	lsls	r1, r3, #26
 8007346:	bf42      	ittt	mi
 8007348:	6833      	ldrmi	r3, [r6, #0]
 800734a:	3302      	addmi	r3, #2
 800734c:	6033      	strmi	r3, [r6, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	f015 0506 	ands.w	r5, r5, #6
 8007354:	d106      	bne.n	8007364 <_printf_common+0x48>
 8007356:	f104 0a19 	add.w	sl, r4, #25
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	6832      	ldr	r2, [r6, #0]
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	42ab      	cmp	r3, r5
 8007362:	dc26      	bgt.n	80073b2 <_printf_common+0x96>
 8007364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007368:	1e13      	subs	r3, r2, #0
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	bf18      	it	ne
 800736e:	2301      	movne	r3, #1
 8007370:	0692      	lsls	r2, r2, #26
 8007372:	d42b      	bmi.n	80073cc <_printf_common+0xb0>
 8007374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007378:	4649      	mov	r1, r9
 800737a:	4638      	mov	r0, r7
 800737c:	47c0      	blx	r8
 800737e:	3001      	adds	r0, #1
 8007380:	d01e      	beq.n	80073c0 <_printf_common+0xa4>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	68e5      	ldr	r5, [r4, #12]
 8007386:	6832      	ldr	r2, [r6, #0]
 8007388:	f003 0306 	and.w	r3, r3, #6
 800738c:	2b04      	cmp	r3, #4
 800738e:	bf08      	it	eq
 8007390:	1aad      	subeq	r5, r5, r2
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	6922      	ldr	r2, [r4, #16]
 8007396:	bf0c      	ite	eq
 8007398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800739c:	2500      	movne	r5, #0
 800739e:	4293      	cmp	r3, r2
 80073a0:	bfc4      	itt	gt
 80073a2:	1a9b      	subgt	r3, r3, r2
 80073a4:	18ed      	addgt	r5, r5, r3
 80073a6:	2600      	movs	r6, #0
 80073a8:	341a      	adds	r4, #26
 80073aa:	42b5      	cmp	r5, r6
 80073ac:	d11a      	bne.n	80073e4 <_printf_common+0xc8>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e008      	b.n	80073c4 <_printf_common+0xa8>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4652      	mov	r2, sl
 80073b6:	4649      	mov	r1, r9
 80073b8:	4638      	mov	r0, r7
 80073ba:	47c0      	blx	r8
 80073bc:	3001      	adds	r0, #1
 80073be:	d103      	bne.n	80073c8 <_printf_common+0xac>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	3501      	adds	r5, #1
 80073ca:	e7c6      	b.n	800735a <_printf_common+0x3e>
 80073cc:	18e1      	adds	r1, r4, r3
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	2030      	movs	r0, #48	; 0x30
 80073d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073d6:	4422      	add	r2, r4
 80073d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073e0:	3302      	adds	r3, #2
 80073e2:	e7c7      	b.n	8007374 <_printf_common+0x58>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4622      	mov	r2, r4
 80073e8:	4649      	mov	r1, r9
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c0      	blx	r8
 80073ee:	3001      	adds	r0, #1
 80073f0:	d0e6      	beq.n	80073c0 <_printf_common+0xa4>
 80073f2:	3601      	adds	r6, #1
 80073f4:	e7d9      	b.n	80073aa <_printf_common+0x8e>
	...

080073f8 <_printf_i>:
 80073f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	460c      	mov	r4, r1
 80073fe:	4691      	mov	r9, r2
 8007400:	7e27      	ldrb	r7, [r4, #24]
 8007402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007404:	2f78      	cmp	r7, #120	; 0x78
 8007406:	4680      	mov	r8, r0
 8007408:	469a      	mov	sl, r3
 800740a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800740e:	d807      	bhi.n	8007420 <_printf_i+0x28>
 8007410:	2f62      	cmp	r7, #98	; 0x62
 8007412:	d80a      	bhi.n	800742a <_printf_i+0x32>
 8007414:	2f00      	cmp	r7, #0
 8007416:	f000 80d8 	beq.w	80075ca <_printf_i+0x1d2>
 800741a:	2f58      	cmp	r7, #88	; 0x58
 800741c:	f000 80a3 	beq.w	8007566 <_printf_i+0x16e>
 8007420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007428:	e03a      	b.n	80074a0 <_printf_i+0xa8>
 800742a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800742e:	2b15      	cmp	r3, #21
 8007430:	d8f6      	bhi.n	8007420 <_printf_i+0x28>
 8007432:	a001      	add	r0, pc, #4	; (adr r0, 8007438 <_printf_i+0x40>)
 8007434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007438:	08007491 	.word	0x08007491
 800743c:	080074a5 	.word	0x080074a5
 8007440:	08007421 	.word	0x08007421
 8007444:	08007421 	.word	0x08007421
 8007448:	08007421 	.word	0x08007421
 800744c:	08007421 	.word	0x08007421
 8007450:	080074a5 	.word	0x080074a5
 8007454:	08007421 	.word	0x08007421
 8007458:	08007421 	.word	0x08007421
 800745c:	08007421 	.word	0x08007421
 8007460:	08007421 	.word	0x08007421
 8007464:	080075b1 	.word	0x080075b1
 8007468:	080074d5 	.word	0x080074d5
 800746c:	08007593 	.word	0x08007593
 8007470:	08007421 	.word	0x08007421
 8007474:	08007421 	.word	0x08007421
 8007478:	080075d3 	.word	0x080075d3
 800747c:	08007421 	.word	0x08007421
 8007480:	080074d5 	.word	0x080074d5
 8007484:	08007421 	.word	0x08007421
 8007488:	08007421 	.word	0x08007421
 800748c:	0800759b 	.word	0x0800759b
 8007490:	680b      	ldr	r3, [r1, #0]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	600a      	str	r2, [r1, #0]
 8007498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800749c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0a3      	b.n	80075ec <_printf_i+0x1f4>
 80074a4:	6825      	ldr	r5, [r4, #0]
 80074a6:	6808      	ldr	r0, [r1, #0]
 80074a8:	062e      	lsls	r6, r5, #24
 80074aa:	f100 0304 	add.w	r3, r0, #4
 80074ae:	d50a      	bpl.n	80074c6 <_printf_i+0xce>
 80074b0:	6805      	ldr	r5, [r0, #0]
 80074b2:	600b      	str	r3, [r1, #0]
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	da03      	bge.n	80074c0 <_printf_i+0xc8>
 80074b8:	232d      	movs	r3, #45	; 0x2d
 80074ba:	426d      	negs	r5, r5
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c0:	485e      	ldr	r0, [pc, #376]	; (800763c <_printf_i+0x244>)
 80074c2:	230a      	movs	r3, #10
 80074c4:	e019      	b.n	80074fa <_printf_i+0x102>
 80074c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074ca:	6805      	ldr	r5, [r0, #0]
 80074cc:	600b      	str	r3, [r1, #0]
 80074ce:	bf18      	it	ne
 80074d0:	b22d      	sxthne	r5, r5
 80074d2:	e7ef      	b.n	80074b4 <_printf_i+0xbc>
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	6825      	ldr	r5, [r4, #0]
 80074d8:	1d18      	adds	r0, r3, #4
 80074da:	6008      	str	r0, [r1, #0]
 80074dc:	0628      	lsls	r0, r5, #24
 80074de:	d501      	bpl.n	80074e4 <_printf_i+0xec>
 80074e0:	681d      	ldr	r5, [r3, #0]
 80074e2:	e002      	b.n	80074ea <_printf_i+0xf2>
 80074e4:	0669      	lsls	r1, r5, #25
 80074e6:	d5fb      	bpl.n	80074e0 <_printf_i+0xe8>
 80074e8:	881d      	ldrh	r5, [r3, #0]
 80074ea:	4854      	ldr	r0, [pc, #336]	; (800763c <_printf_i+0x244>)
 80074ec:	2f6f      	cmp	r7, #111	; 0x6f
 80074ee:	bf0c      	ite	eq
 80074f0:	2308      	moveq	r3, #8
 80074f2:	230a      	movne	r3, #10
 80074f4:	2100      	movs	r1, #0
 80074f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074fa:	6866      	ldr	r6, [r4, #4]
 80074fc:	60a6      	str	r6, [r4, #8]
 80074fe:	2e00      	cmp	r6, #0
 8007500:	bfa2      	ittt	ge
 8007502:	6821      	ldrge	r1, [r4, #0]
 8007504:	f021 0104 	bicge.w	r1, r1, #4
 8007508:	6021      	strge	r1, [r4, #0]
 800750a:	b90d      	cbnz	r5, 8007510 <_printf_i+0x118>
 800750c:	2e00      	cmp	r6, #0
 800750e:	d04d      	beq.n	80075ac <_printf_i+0x1b4>
 8007510:	4616      	mov	r6, r2
 8007512:	fbb5 f1f3 	udiv	r1, r5, r3
 8007516:	fb03 5711 	mls	r7, r3, r1, r5
 800751a:	5dc7      	ldrb	r7, [r0, r7]
 800751c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007520:	462f      	mov	r7, r5
 8007522:	42bb      	cmp	r3, r7
 8007524:	460d      	mov	r5, r1
 8007526:	d9f4      	bls.n	8007512 <_printf_i+0x11a>
 8007528:	2b08      	cmp	r3, #8
 800752a:	d10b      	bne.n	8007544 <_printf_i+0x14c>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	07df      	lsls	r7, r3, #31
 8007530:	d508      	bpl.n	8007544 <_printf_i+0x14c>
 8007532:	6923      	ldr	r3, [r4, #16]
 8007534:	6861      	ldr	r1, [r4, #4]
 8007536:	4299      	cmp	r1, r3
 8007538:	bfde      	ittt	le
 800753a:	2330      	movle	r3, #48	; 0x30
 800753c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007540:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007544:	1b92      	subs	r2, r2, r6
 8007546:	6122      	str	r2, [r4, #16]
 8007548:	f8cd a000 	str.w	sl, [sp]
 800754c:	464b      	mov	r3, r9
 800754e:	aa03      	add	r2, sp, #12
 8007550:	4621      	mov	r1, r4
 8007552:	4640      	mov	r0, r8
 8007554:	f7ff fee2 	bl	800731c <_printf_common>
 8007558:	3001      	adds	r0, #1
 800755a:	d14c      	bne.n	80075f6 <_printf_i+0x1fe>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	b004      	add	sp, #16
 8007562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007566:	4835      	ldr	r0, [pc, #212]	; (800763c <_printf_i+0x244>)
 8007568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	680e      	ldr	r6, [r1, #0]
 8007570:	061f      	lsls	r7, r3, #24
 8007572:	f856 5b04 	ldr.w	r5, [r6], #4
 8007576:	600e      	str	r6, [r1, #0]
 8007578:	d514      	bpl.n	80075a4 <_printf_i+0x1ac>
 800757a:	07d9      	lsls	r1, r3, #31
 800757c:	bf44      	itt	mi
 800757e:	f043 0320 	orrmi.w	r3, r3, #32
 8007582:	6023      	strmi	r3, [r4, #0]
 8007584:	b91d      	cbnz	r5, 800758e <_printf_i+0x196>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	f023 0320 	bic.w	r3, r3, #32
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	2310      	movs	r3, #16
 8007590:	e7b0      	b.n	80074f4 <_printf_i+0xfc>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	f043 0320 	orr.w	r3, r3, #32
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	2378      	movs	r3, #120	; 0x78
 800759c:	4828      	ldr	r0, [pc, #160]	; (8007640 <_printf_i+0x248>)
 800759e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075a2:	e7e3      	b.n	800756c <_printf_i+0x174>
 80075a4:	065e      	lsls	r6, r3, #25
 80075a6:	bf48      	it	mi
 80075a8:	b2ad      	uxthmi	r5, r5
 80075aa:	e7e6      	b.n	800757a <_printf_i+0x182>
 80075ac:	4616      	mov	r6, r2
 80075ae:	e7bb      	b.n	8007528 <_printf_i+0x130>
 80075b0:	680b      	ldr	r3, [r1, #0]
 80075b2:	6826      	ldr	r6, [r4, #0]
 80075b4:	6960      	ldr	r0, [r4, #20]
 80075b6:	1d1d      	adds	r5, r3, #4
 80075b8:	600d      	str	r5, [r1, #0]
 80075ba:	0635      	lsls	r5, r6, #24
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	d501      	bpl.n	80075c4 <_printf_i+0x1cc>
 80075c0:	6018      	str	r0, [r3, #0]
 80075c2:	e002      	b.n	80075ca <_printf_i+0x1d2>
 80075c4:	0671      	lsls	r1, r6, #25
 80075c6:	d5fb      	bpl.n	80075c0 <_printf_i+0x1c8>
 80075c8:	8018      	strh	r0, [r3, #0]
 80075ca:	2300      	movs	r3, #0
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	4616      	mov	r6, r2
 80075d0:	e7ba      	b.n	8007548 <_printf_i+0x150>
 80075d2:	680b      	ldr	r3, [r1, #0]
 80075d4:	1d1a      	adds	r2, r3, #4
 80075d6:	600a      	str	r2, [r1, #0]
 80075d8:	681e      	ldr	r6, [r3, #0]
 80075da:	6862      	ldr	r2, [r4, #4]
 80075dc:	2100      	movs	r1, #0
 80075de:	4630      	mov	r0, r6
 80075e0:	f7f8 fdfe 	bl	80001e0 <memchr>
 80075e4:	b108      	cbz	r0, 80075ea <_printf_i+0x1f2>
 80075e6:	1b80      	subs	r0, r0, r6
 80075e8:	6060      	str	r0, [r4, #4]
 80075ea:	6863      	ldr	r3, [r4, #4]
 80075ec:	6123      	str	r3, [r4, #16]
 80075ee:	2300      	movs	r3, #0
 80075f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f4:	e7a8      	b.n	8007548 <_printf_i+0x150>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	4632      	mov	r2, r6
 80075fa:	4649      	mov	r1, r9
 80075fc:	4640      	mov	r0, r8
 80075fe:	47d0      	blx	sl
 8007600:	3001      	adds	r0, #1
 8007602:	d0ab      	beq.n	800755c <_printf_i+0x164>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	079b      	lsls	r3, r3, #30
 8007608:	d413      	bmi.n	8007632 <_printf_i+0x23a>
 800760a:	68e0      	ldr	r0, [r4, #12]
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	4298      	cmp	r0, r3
 8007610:	bfb8      	it	lt
 8007612:	4618      	movlt	r0, r3
 8007614:	e7a4      	b.n	8007560 <_printf_i+0x168>
 8007616:	2301      	movs	r3, #1
 8007618:	4632      	mov	r2, r6
 800761a:	4649      	mov	r1, r9
 800761c:	4640      	mov	r0, r8
 800761e:	47d0      	blx	sl
 8007620:	3001      	adds	r0, #1
 8007622:	d09b      	beq.n	800755c <_printf_i+0x164>
 8007624:	3501      	adds	r5, #1
 8007626:	68e3      	ldr	r3, [r4, #12]
 8007628:	9903      	ldr	r1, [sp, #12]
 800762a:	1a5b      	subs	r3, r3, r1
 800762c:	42ab      	cmp	r3, r5
 800762e:	dcf2      	bgt.n	8007616 <_printf_i+0x21e>
 8007630:	e7eb      	b.n	800760a <_printf_i+0x212>
 8007632:	2500      	movs	r5, #0
 8007634:	f104 0619 	add.w	r6, r4, #25
 8007638:	e7f5      	b.n	8007626 <_printf_i+0x22e>
 800763a:	bf00      	nop
 800763c:	0800a8f1 	.word	0x0800a8f1
 8007640:	0800a902 	.word	0x0800a902

08007644 <memcpy>:
 8007644:	440a      	add	r2, r1
 8007646:	4291      	cmp	r1, r2
 8007648:	f100 33ff 	add.w	r3, r0, #4294967295
 800764c:	d100      	bne.n	8007650 <memcpy+0xc>
 800764e:	4770      	bx	lr
 8007650:	b510      	push	{r4, lr}
 8007652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800765a:	4291      	cmp	r1, r2
 800765c:	d1f9      	bne.n	8007652 <memcpy+0xe>
 800765e:	bd10      	pop	{r4, pc}

08007660 <memmove>:
 8007660:	4288      	cmp	r0, r1
 8007662:	b510      	push	{r4, lr}
 8007664:	eb01 0402 	add.w	r4, r1, r2
 8007668:	d902      	bls.n	8007670 <memmove+0x10>
 800766a:	4284      	cmp	r4, r0
 800766c:	4623      	mov	r3, r4
 800766e:	d807      	bhi.n	8007680 <memmove+0x20>
 8007670:	1e43      	subs	r3, r0, #1
 8007672:	42a1      	cmp	r1, r4
 8007674:	d008      	beq.n	8007688 <memmove+0x28>
 8007676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800767a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800767e:	e7f8      	b.n	8007672 <memmove+0x12>
 8007680:	4402      	add	r2, r0
 8007682:	4601      	mov	r1, r0
 8007684:	428a      	cmp	r2, r1
 8007686:	d100      	bne.n	800768a <memmove+0x2a>
 8007688:	bd10      	pop	{r4, pc}
 800768a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800768e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007692:	e7f7      	b.n	8007684 <memmove+0x24>

08007694 <_free_r>:
 8007694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007696:	2900      	cmp	r1, #0
 8007698:	d048      	beq.n	800772c <_free_r+0x98>
 800769a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769e:	9001      	str	r0, [sp, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f1a1 0404 	sub.w	r4, r1, #4
 80076a6:	bfb8      	it	lt
 80076a8:	18e4      	addlt	r4, r4, r3
 80076aa:	f000 f8d3 	bl	8007854 <__malloc_lock>
 80076ae:	4a20      	ldr	r2, [pc, #128]	; (8007730 <_free_r+0x9c>)
 80076b0:	9801      	ldr	r0, [sp, #4]
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	4615      	mov	r5, r2
 80076b6:	b933      	cbnz	r3, 80076c6 <_free_r+0x32>
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6014      	str	r4, [r2, #0]
 80076bc:	b003      	add	sp, #12
 80076be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076c2:	f000 b8cd 	b.w	8007860 <__malloc_unlock>
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	d90b      	bls.n	80076e2 <_free_r+0x4e>
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	1862      	adds	r2, r4, r1
 80076ce:	4293      	cmp	r3, r2
 80076d0:	bf04      	itt	eq
 80076d2:	681a      	ldreq	r2, [r3, #0]
 80076d4:	685b      	ldreq	r3, [r3, #4]
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	bf04      	itt	eq
 80076da:	1852      	addeq	r2, r2, r1
 80076dc:	6022      	streq	r2, [r4, #0]
 80076de:	602c      	str	r4, [r5, #0]
 80076e0:	e7ec      	b.n	80076bc <_free_r+0x28>
 80076e2:	461a      	mov	r2, r3
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	b10b      	cbz	r3, 80076ec <_free_r+0x58>
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	d9fa      	bls.n	80076e2 <_free_r+0x4e>
 80076ec:	6811      	ldr	r1, [r2, #0]
 80076ee:	1855      	adds	r5, r2, r1
 80076f0:	42a5      	cmp	r5, r4
 80076f2:	d10b      	bne.n	800770c <_free_r+0x78>
 80076f4:	6824      	ldr	r4, [r4, #0]
 80076f6:	4421      	add	r1, r4
 80076f8:	1854      	adds	r4, r2, r1
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	6011      	str	r1, [r2, #0]
 80076fe:	d1dd      	bne.n	80076bc <_free_r+0x28>
 8007700:	681c      	ldr	r4, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	6053      	str	r3, [r2, #4]
 8007706:	4421      	add	r1, r4
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	e7d7      	b.n	80076bc <_free_r+0x28>
 800770c:	d902      	bls.n	8007714 <_free_r+0x80>
 800770e:	230c      	movs	r3, #12
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	e7d3      	b.n	80076bc <_free_r+0x28>
 8007714:	6825      	ldr	r5, [r4, #0]
 8007716:	1961      	adds	r1, r4, r5
 8007718:	428b      	cmp	r3, r1
 800771a:	bf04      	itt	eq
 800771c:	6819      	ldreq	r1, [r3, #0]
 800771e:	685b      	ldreq	r3, [r3, #4]
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	bf04      	itt	eq
 8007724:	1949      	addeq	r1, r1, r5
 8007726:	6021      	streq	r1, [r4, #0]
 8007728:	6054      	str	r4, [r2, #4]
 800772a:	e7c7      	b.n	80076bc <_free_r+0x28>
 800772c:	b003      	add	sp, #12
 800772e:	bd30      	pop	{r4, r5, pc}
 8007730:	200000ac 	.word	0x200000ac

08007734 <_malloc_r>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	1ccd      	adds	r5, r1, #3
 8007738:	f025 0503 	bic.w	r5, r5, #3
 800773c:	3508      	adds	r5, #8
 800773e:	2d0c      	cmp	r5, #12
 8007740:	bf38      	it	cc
 8007742:	250c      	movcc	r5, #12
 8007744:	2d00      	cmp	r5, #0
 8007746:	4606      	mov	r6, r0
 8007748:	db01      	blt.n	800774e <_malloc_r+0x1a>
 800774a:	42a9      	cmp	r1, r5
 800774c:	d903      	bls.n	8007756 <_malloc_r+0x22>
 800774e:	230c      	movs	r3, #12
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	2000      	movs	r0, #0
 8007754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007756:	f000 f87d 	bl	8007854 <__malloc_lock>
 800775a:	4921      	ldr	r1, [pc, #132]	; (80077e0 <_malloc_r+0xac>)
 800775c:	680a      	ldr	r2, [r1, #0]
 800775e:	4614      	mov	r4, r2
 8007760:	b99c      	cbnz	r4, 800778a <_malloc_r+0x56>
 8007762:	4f20      	ldr	r7, [pc, #128]	; (80077e4 <_malloc_r+0xb0>)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	b923      	cbnz	r3, 8007772 <_malloc_r+0x3e>
 8007768:	4621      	mov	r1, r4
 800776a:	4630      	mov	r0, r6
 800776c:	f000 f862 	bl	8007834 <_sbrk_r>
 8007770:	6038      	str	r0, [r7, #0]
 8007772:	4629      	mov	r1, r5
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f85d 	bl	8007834 <_sbrk_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d123      	bne.n	80077c6 <_malloc_r+0x92>
 800777e:	230c      	movs	r3, #12
 8007780:	6033      	str	r3, [r6, #0]
 8007782:	4630      	mov	r0, r6
 8007784:	f000 f86c 	bl	8007860 <__malloc_unlock>
 8007788:	e7e3      	b.n	8007752 <_malloc_r+0x1e>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	1b5b      	subs	r3, r3, r5
 800778e:	d417      	bmi.n	80077c0 <_malloc_r+0x8c>
 8007790:	2b0b      	cmp	r3, #11
 8007792:	d903      	bls.n	800779c <_malloc_r+0x68>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	441c      	add	r4, r3
 8007798:	6025      	str	r5, [r4, #0]
 800779a:	e004      	b.n	80077a6 <_malloc_r+0x72>
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	42a2      	cmp	r2, r4
 80077a0:	bf0c      	ite	eq
 80077a2:	600b      	streq	r3, [r1, #0]
 80077a4:	6053      	strne	r3, [r2, #4]
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 f85a 	bl	8007860 <__malloc_unlock>
 80077ac:	f104 000b 	add.w	r0, r4, #11
 80077b0:	1d23      	adds	r3, r4, #4
 80077b2:	f020 0007 	bic.w	r0, r0, #7
 80077b6:	1ac2      	subs	r2, r0, r3
 80077b8:	d0cc      	beq.n	8007754 <_malloc_r+0x20>
 80077ba:	1a1b      	subs	r3, r3, r0
 80077bc:	50a3      	str	r3, [r4, r2]
 80077be:	e7c9      	b.n	8007754 <_malloc_r+0x20>
 80077c0:	4622      	mov	r2, r4
 80077c2:	6864      	ldr	r4, [r4, #4]
 80077c4:	e7cc      	b.n	8007760 <_malloc_r+0x2c>
 80077c6:	1cc4      	adds	r4, r0, #3
 80077c8:	f024 0403 	bic.w	r4, r4, #3
 80077cc:	42a0      	cmp	r0, r4
 80077ce:	d0e3      	beq.n	8007798 <_malloc_r+0x64>
 80077d0:	1a21      	subs	r1, r4, r0
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f82e 	bl	8007834 <_sbrk_r>
 80077d8:	3001      	adds	r0, #1
 80077da:	d1dd      	bne.n	8007798 <_malloc_r+0x64>
 80077dc:	e7cf      	b.n	800777e <_malloc_r+0x4a>
 80077de:	bf00      	nop
 80077e0:	200000ac 	.word	0x200000ac
 80077e4:	200000b0 	.word	0x200000b0

080077e8 <_realloc_r>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	4607      	mov	r7, r0
 80077ec:	4614      	mov	r4, r2
 80077ee:	460e      	mov	r6, r1
 80077f0:	b921      	cbnz	r1, 80077fc <_realloc_r+0x14>
 80077f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077f6:	4611      	mov	r1, r2
 80077f8:	f7ff bf9c 	b.w	8007734 <_malloc_r>
 80077fc:	b922      	cbnz	r2, 8007808 <_realloc_r+0x20>
 80077fe:	f7ff ff49 	bl	8007694 <_free_r>
 8007802:	4625      	mov	r5, r4
 8007804:	4628      	mov	r0, r5
 8007806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007808:	f000 f830 	bl	800786c <_malloc_usable_size_r>
 800780c:	42a0      	cmp	r0, r4
 800780e:	d20f      	bcs.n	8007830 <_realloc_r+0x48>
 8007810:	4621      	mov	r1, r4
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ff8e 	bl	8007734 <_malloc_r>
 8007818:	4605      	mov	r5, r0
 800781a:	2800      	cmp	r0, #0
 800781c:	d0f2      	beq.n	8007804 <_realloc_r+0x1c>
 800781e:	4631      	mov	r1, r6
 8007820:	4622      	mov	r2, r4
 8007822:	f7ff ff0f 	bl	8007644 <memcpy>
 8007826:	4631      	mov	r1, r6
 8007828:	4638      	mov	r0, r7
 800782a:	f7ff ff33 	bl	8007694 <_free_r>
 800782e:	e7e9      	b.n	8007804 <_realloc_r+0x1c>
 8007830:	4635      	mov	r5, r6
 8007832:	e7e7      	b.n	8007804 <_realloc_r+0x1c>

08007834 <_sbrk_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4d06      	ldr	r5, [pc, #24]	; (8007850 <_sbrk_r+0x1c>)
 8007838:	2300      	movs	r3, #0
 800783a:	4604      	mov	r4, r0
 800783c:	4608      	mov	r0, r1
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	f7fa fc44 	bl	80020cc <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_sbrk_r+0x1a>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_sbrk_r+0x1a>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20000414 	.word	0x20000414

08007854 <__malloc_lock>:
 8007854:	4801      	ldr	r0, [pc, #4]	; (800785c <__malloc_lock+0x8>)
 8007856:	f000 b811 	b.w	800787c <__retarget_lock_acquire_recursive>
 800785a:	bf00      	nop
 800785c:	2000041c 	.word	0x2000041c

08007860 <__malloc_unlock>:
 8007860:	4801      	ldr	r0, [pc, #4]	; (8007868 <__malloc_unlock+0x8>)
 8007862:	f000 b80c 	b.w	800787e <__retarget_lock_release_recursive>
 8007866:	bf00      	nop
 8007868:	2000041c 	.word	0x2000041c

0800786c <_malloc_usable_size_r>:
 800786c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007870:	1f18      	subs	r0, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	bfbc      	itt	lt
 8007876:	580b      	ldrlt	r3, [r1, r0]
 8007878:	18c0      	addlt	r0, r0, r3
 800787a:	4770      	bx	lr

0800787c <__retarget_lock_acquire_recursive>:
 800787c:	4770      	bx	lr

0800787e <__retarget_lock_release_recursive>:
 800787e:	4770      	bx	lr

08007880 <_init>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr

0800788c <_fini>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr
