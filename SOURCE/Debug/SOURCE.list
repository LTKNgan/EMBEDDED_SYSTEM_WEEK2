
SOURCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003098  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce64  0800ce64  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce6c  0800ce6c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce6c  0800ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce70  0800ce70  0001ce70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800ce74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000003b4  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe64  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9c  00000000  00000000  0003ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  00043ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f8  00000000  00000000  00045660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002658a  00000000  00000000  00046c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e720  00000000  00000000  0006d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0738  00000000  00000000  0008b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016c03a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006394  00000000  00000000  0016c090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b4 	.word	0x200000b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009db4 	.word	0x08009db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	08009db4 	.word	0x08009db4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96e 	b.w	8000dd4 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468c      	mov	ip, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8083 	bne.w	8000c26 <__udivmoddi4+0x116>
 8000b20:	428a      	cmp	r2, r1
 8000b22:	4617      	mov	r7, r2
 8000b24:	d947      	bls.n	8000bb6 <__udivmoddi4+0xa6>
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	b142      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2c:	f1c2 0020 	rsb	r0, r2, #32
 8000b30:	fa24 f000 	lsr.w	r0, r4, r0
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4097      	lsls	r7, r2
 8000b38:	ea40 0c01 	orr.w	ip, r0, r1
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbbc f6f8 	udiv	r6, ip, r8
 8000b48:	fa1f fe87 	uxth.w	lr, r7
 8000b4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b54:	fb06 f10e 	mul.w	r1, r6, lr
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 8119 	bcs.w	8000d98 <__udivmoddi4+0x288>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8116 	bls.w	8000d98 <__udivmoddi4+0x288>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	f080 8105 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f240 8102 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba0:	eba4 040e 	sub.w	r4, r4, lr
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xaa>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d150      	bne.n	8000c64 <__udivmoddi4+0x154>
 8000bc2:	1bcb      	subs	r3, r1, r7
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f f887 	uxth.w	r8, r7
 8000bcc:	2601      	movs	r6, #1
 8000bce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd2:	0c21      	lsrs	r1, r4, #16
 8000bd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bdc:	fb08 f30c 	mul.w	r3, r8, ip
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000be4:	1879      	adds	r1, r7, r1
 8000be6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0xe2>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	f200 80e9 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	1ac9      	subs	r1, r1, r3
 8000bf6:	b2a3      	uxth	r3, r4
 8000bf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c04:	fb08 f800 	mul.w	r8, r8, r0
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	d907      	bls.n	8000c1c <__udivmoddi4+0x10c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x10a>
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	f200 80d9 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	eba4 0408 	sub.w	r4, r4, r8
 8000c20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c24:	e7bf      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x12e>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80b1 	beq.w	8000d92 <__udivmoddi4+0x282>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x1cc>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0x140>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80b8 	bhi.w	8000dc0 <__udivmoddi4+0x2b0>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0103 	sbc.w	r1, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0a8      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000c5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f603 	lsr.w	r6, r0, r3
 8000c6c:	4097      	lsls	r7, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	4330      	orrs	r0, r6
 8000c7a:	0c03      	lsrs	r3, r0, #16
 8000c7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f108 	mul.w	r1, r6, r8
 8000c90:	4299      	cmp	r1, r3
 8000c92:	fa04 f402 	lsl.w	r4, r4, r2
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x19c>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9e:	f080 808d 	bcs.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 808a 	bls.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b281      	uxth	r1, r0
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb00 f308 	mul.w	r3, r0, r8
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x1c4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cca:	d273      	bcs.n	8000db4 <__udivmoddi4+0x2a4>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d971      	bls.n	8000db4 <__udivmoddi4+0x2a4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4439      	add	r1, r7
 8000cd4:	1acb      	subs	r3, r1, r3
 8000cd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cda:	e778      	b.n	8000bce <__udivmoddi4+0xbe>
 8000cdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce8:	431c      	orrs	r4, r3
 8000cea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	0c3b      	lsrs	r3, r7, #16
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fa1f f884 	uxth.w	r8, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d12:	458a      	cmp	sl, r1
 8000d14:	fa02 f206 	lsl.w	r2, r2, r6
 8000d18:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x220>
 8000d1e:	1861      	adds	r1, r4, r1
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	d248      	bcs.n	8000db8 <__udivmoddi4+0x2a8>
 8000d26:	458a      	cmp	sl, r1
 8000d28:	d946      	bls.n	8000db8 <__udivmoddi4+0x2a8>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4421      	add	r1, r4
 8000d30:	eba1 010a 	sub.w	r1, r1, sl
 8000d34:	b2bf      	uxth	r7, r7
 8000d36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d42:	fb00 f808 	mul.w	r8, r0, r8
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x24a>
 8000d4a:	19e7      	adds	r7, r4, r7
 8000d4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d50:	d22e      	bcs.n	8000db0 <__udivmoddi4+0x2a0>
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d92c      	bls.n	8000db0 <__udivmoddi4+0x2a0>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4427      	add	r7, r4
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	eba7 0708 	sub.w	r7, r7, r8
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	454f      	cmp	r7, r9
 8000d68:	46c6      	mov	lr, r8
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	d31a      	bcc.n	8000da4 <__udivmoddi4+0x294>
 8000d6e:	d017      	beq.n	8000da0 <__udivmoddi4+0x290>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x27a>
 8000d72:	ebb3 020e 	subs.w	r2, r3, lr
 8000d76:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7e:	40f2      	lsrs	r2, r6
 8000d80:	ea4c 0202 	orr.w	r2, ip, r2
 8000d84:	40f7      	lsrs	r7, r6
 8000d86:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	462e      	mov	r6, r5
 8000d94:	4628      	mov	r0, r5
 8000d96:	e70b      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	e6e9      	b.n	8000b70 <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fd      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da0:	4543      	cmp	r3, r8
 8000da2:	d2e5      	bcs.n	8000d70 <__udivmoddi4+0x260>
 8000da4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dac:	3801      	subs	r0, #1
 8000dae:	e7df      	b.n	8000d70 <__udivmoddi4+0x260>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e7d2      	b.n	8000d5a <__udivmoddi4+0x24a>
 8000db4:	4660      	mov	r0, ip
 8000db6:	e78d      	b.n	8000cd4 <__udivmoddi4+0x1c4>
 8000db8:	4681      	mov	r9, r0
 8000dba:	e7b9      	b.n	8000d30 <__udivmoddi4+0x220>
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	e775      	b.n	8000cac <__udivmoddi4+0x19c>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e74a      	b.n	8000c5a <__udivmoddi4+0x14a>
 8000dc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc8:	4439      	add	r1, r7
 8000dca:	e713      	b.n	8000bf4 <__udivmoddi4+0xe4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	e724      	b.n	8000c1c <__udivmoddi4+0x10c>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	at24c_Check();
 8000ddc:	f000 f83c 	bl	8000e58 <at24c_Check>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	230a      	movs	r3, #10
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f107 030f 	add.w	r3, r7, #15
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	21a0      	movs	r1, #160	; 0xa0
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <at24c_ReadOneByte+0x34>)
 8000e08:	f004 fcd6 	bl	80057b8 <HAL_I2C_Mem_Read>
	return temp;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000154 	.word	0x20000154

08000e1c <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af04      	add	r7, sp, #16
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	230a      	movs	r3, #10
 8000e30:	9302      	str	r3, [sp, #8]
 8000e32:	2301      	movs	r3, #1
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	1d7b      	adds	r3, r7, #5
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	21a0      	movs	r1, #160	; 0xa0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <at24c_WriteOneByte+0x38>)
 8000e40:	f004 fbc0 	bl	80055c4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000e44:	2005      	movs	r0, #5
 8000e46:	f002 ff47 	bl	8003cd8 <HAL_Delay>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000154 	.word	0x20000154

08000e58 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8000e5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e62:	f7ff ffbf 	bl	8000de4 <at24c_ReadOneByte>
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b55      	cmp	r3, #85	; 0x55
 8000e6e:	d101      	bne.n	8000e74 <at24c_Check+0x1c>
 8000e70:	2300      	movs	r3, #0
 8000e72:	e010      	b.n	8000e96 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8000e74:	2155      	movs	r1, #85	; 0x55
 8000e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e7a:	f7ff ffcf 	bl	8000e1c <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 8000e7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e82:	f7ff ffaf 	bl	8000de4 <at24c_ReadOneByte>
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b55      	cmp	r3, #85	; 0x55
 8000e8e:	d101      	bne.n	8000e94 <at24c_Check+0x3c>
 8000e90:	2300      	movs	r3, #0
 8000e92:	e000      	b.n	8000e96 <at24c_Check+0x3e>
	}
	return 1;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 8000e9e:	b590      	push	{r4, r7, lr}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	6039      	str	r1, [r7, #0]
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8000eae:	e00d      	b.n	8000ecc <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	80fa      	strh	r2, [r7, #6]
 8000eb6:	683c      	ldr	r4, [r7, #0]
 8000eb8:	1c62      	adds	r2, r4, #1
 8000eba:	603a      	str	r2, [r7, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff91 	bl	8000de4 <at24c_ReadOneByte>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ee      	bne.n	8000eb0 <at24c_Read+0x12>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	80fb      	strh	r3, [r7, #6]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8000eec:	e00c      	b.n	8000f08 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff90 	bl	8000e1c <at24c_WriteOneByte>
		WriteAddr++;
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	3301      	adds	r3, #1
 8000f00:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	80ba      	strh	r2, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1ed      	bne.n	8000eee <at24c_Write+0x12>
	}
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2108      	movs	r1, #8
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <button_init+0x14>)
 8000f26:	f004 f9d5 	bl	80052d4 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020c00 	.word	0x40020c00

08000f34 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	482f      	ldr	r0, [pc, #188]	; (8000ffc <button_Scan+0xc8>)
 8000f40:	f004 f9c8 	bl	80052d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2108      	movs	r1, #8
 8000f48:	482c      	ldr	r0, [pc, #176]	; (8000ffc <button_Scan+0xc8>)
 8000f4a:	f004 f9c3 	bl	80052d4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000f4e:	230a      	movs	r3, #10
 8000f50:	2202      	movs	r2, #2
 8000f52:	492b      	ldr	r1, [pc, #172]	; (8001000 <button_Scan+0xcc>)
 8000f54:	482b      	ldr	r0, [pc, #172]	; (8001004 <button_Scan+0xd0>)
 8000f56:	f006 f918 	bl	800718a <HAL_SPI_Receive>
	  int button_index = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f62:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	e03f      	b.n	8000fea <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db06      	blt.n	8000f7e <button_Scan+0x4a>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	dc03      	bgt.n	8000f7e <button_Scan+0x4a>
			  button_index = i + 4;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e018      	b.n	8000fb0 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	dd07      	ble.n	8000f94 <button_Scan+0x60>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	dc04      	bgt.n	8000f94 <button_Scan+0x60>
			  button_index = 7 - i;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f1c3 0307 	rsb	r3, r3, #7
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e00d      	b.n	8000fb0 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	dd06      	ble.n	8000fa8 <button_Scan+0x74>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0b      	cmp	r3, #11
 8000f9e:	dc03      	bgt.n	8000fa8 <button_Scan+0x74>
			  button_index = i + 4;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e003      	b.n	8000fb0 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1c3 0317 	rsb	r3, r3, #23
 8000fae:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <button_Scan+0xcc>)
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	897b      	ldrh	r3, [r7, #10]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <button_Scan+0x96>
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <button_Scan+0xd4>)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fc8:	e009      	b.n	8000fde <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <button_Scan+0xd4>)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <button_Scan+0xd4>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	ddbc      	ble.n	8000f6a <button_Scan+0x36>
	  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	200000d0 	.word	0x200000d0
 8001004:	20000374 	.word	0x20000374
 8001008:	200000e8 	.word	0x200000e8

0800100c <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001010:	2100      	movs	r1, #0
 8001012:	4802      	ldr	r0, [pc, #8]	; (800101c <buzzer_init+0x10>)
 8001014:	f006 fdfa 	bl	8007c0c <HAL_TIM_PWM_Start>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000240 	.word	0x20000240

08001020 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8001024:	201e      	movs	r0, #30
 8001026:	f002 fd97 	bl	8003b58 <DEC2BCD>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <ds3231_init+0x80>)
 8001030:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001032:	2016      	movs	r0, #22
 8001034:	f002 fd90 	bl	8003b58 <DEC2BCD>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <ds3231_init+0x80>)
 800103e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001040:	2015      	movs	r0, #21
 8001042:	f002 fd89 	bl	8003b58 <DEC2BCD>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <ds3231_init+0x80>)
 800104c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800104e:	2006      	movs	r0, #6
 8001050:	f002 fd82 	bl	8003b58 <DEC2BCD>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <ds3231_init+0x80>)
 800105a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800105c:	200f      	movs	r0, #15
 800105e:	f002 fd7b 	bl	8003b58 <DEC2BCD>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <ds3231_init+0x80>)
 8001068:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800106a:	2009      	movs	r0, #9
 800106c:	f002 fd74 	bl	8003b58 <DEC2BCD>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <ds3231_init+0x80>)
 8001076:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8001078:	2017      	movs	r0, #23
 800107a:	f002 fd6d 	bl	8003b58 <DEC2BCD>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <ds3231_init+0x80>)
 8001084:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8001086:	2332      	movs	r3, #50	; 0x32
 8001088:	2203      	movs	r2, #3
 800108a:	21d0      	movs	r1, #208	; 0xd0
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <ds3231_init+0x84>)
 800108e:	f004 fdb9 	bl	8005c04 <HAL_I2C_IsDeviceReady>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d000      	beq.n	800109a <ds3231_init+0x7a>
		while(1);
 8001098:	e7fe      	b.n	8001098 <ds3231_init+0x78>
	};
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000110 	.word	0x20000110
 80010a4:	20000154 	.word	0x20000154

080010a8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <LCD_WR_REG+0x1c>)
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	8013      	strh	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	600ffffe 	.word	0x600ffffe

080010c8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <LCD_WR_DATA+0x1c>)
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	8053      	strh	r3, [r2, #2]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	600ffffe 	.word	0x600ffffe

080010e8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <LCD_RD_DATA+0x20>)
 80010f0:	885b      	ldrh	r3, [r3, #2]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	b29b      	uxth	r3, r3
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	600ffffe 	.word	0x600ffffe

0800110c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800112a:	202a      	movs	r0, #42	; 0x2a
 800112c:	f7ff ffbc 	bl	80010a8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffc6 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffc0 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b29b      	uxth	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffba 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffb4 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001160:	202b      	movs	r0, #43	; 0x2b
 8001162:	f7ff ffa1 	bl	80010a8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffab 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffa5 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800117e:	883b      	ldrh	r3, [r7, #0]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b29b      	uxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff9f 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800118a:	883b      	ldrh	r3, [r7, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff99 	bl	80010c8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001196:	202c      	movs	r0, #44	; 0x2c
 8001198:	f7ff ff86 	bl	80010a8 <LCD_WR_REG>
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}

080011a4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <lcd_Clear+0x60>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <lcd_Clear+0x60>)
 80011b8:	885b      	ldrh	r3, [r3, #2]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ffa3 	bl	800110c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	81fb      	strh	r3, [r7, #14]
 80011ca:	e011      	b.n	80011f0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	81bb      	strh	r3, [r7, #12]
 80011d0:	e006      	b.n	80011e0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff77 	bl	80010c8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	81bb      	strh	r3, [r7, #12]
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <lcd_Clear+0x60>)
 80011e2:	885b      	ldrh	r3, [r3, #2]
 80011e4:	89ba      	ldrh	r2, [r7, #12]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3f3      	bcc.n	80011d2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	3301      	adds	r3, #1
 80011ee:	81fb      	strh	r3, [r7, #14]
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <lcd_Clear+0x60>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	89fa      	ldrh	r2, [r7, #14]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3e8      	bcc.n	80011cc <lcd_Clear+0x28>
		}
	}
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000118 	.word	0x20000118

08001208 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	4603      	mov	r3, r0
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	807b      	strh	r3, [r7, #2]
 8001222:	4613      	mov	r3, r2
 8001224:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	3b01      	subs	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	883b      	ldrh	r3, [r7, #0]
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	88b9      	ldrh	r1, [r7, #4]
 8001234:	88f8      	ldrh	r0, [r7, #6]
 8001236:	f7ff ff69 	bl	800110c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800123a:	88bb      	ldrh	r3, [r7, #4]
 800123c:	81fb      	strh	r3, [r7, #14]
 800123e:	e010      	b.n	8001262 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	81bb      	strh	r3, [r7, #12]
 8001244:	e006      	b.n	8001254 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001246:	8c3b      	ldrh	r3, [r7, #32]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff3d 	bl	80010c8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800124e:	89bb      	ldrh	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	81bb      	strh	r3, [r7, #12]
 8001254:	89ba      	ldrh	r2, [r7, #12]
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	429a      	cmp	r2, r3
 800125a:	d3f4      	bcc.n	8001246 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800125c:	89fb      	ldrh	r3, [r7, #14]
 800125e:	3301      	adds	r3, #1
 8001260:	81fb      	strh	r3, [r7, #14]
 8001262:	89fa      	ldrh	r2, [r7, #14]
 8001264:	883b      	ldrh	r3, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3ea      	bcc.n	8001240 <lcd_Fill+0x38>
		}
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}

08001274 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
 800127e:	460b      	mov	r3, r1
 8001280:	80bb      	strh	r3, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	88fa      	ldrh	r2, [r7, #6]
 800128a:	88b9      	ldrh	r1, [r7, #4]
 800128c:	88f8      	ldrh	r0, [r7, #6]
 800128e:	f7ff ff3d 	bl	800110c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff17 	bl	80010c8 <LCD_WR_DATA>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80012a2:	b590      	push	{r4, r7, lr}
 80012a4:	b08d      	sub	sp, #52	; 0x34
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4604      	mov	r4, r0
 80012aa:	4608      	mov	r0, r1
 80012ac:	4611      	mov	r1, r2
 80012ae:	461a      	mov	r2, r3
 80012b0:	4623      	mov	r3, r4
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	4603      	mov	r3, r0
 80012b6:	80bb      	strh	r3, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80012c8:	887a      	ldrh	r2, [r7, #2]
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80012d0:	883a      	ldrh	r2, [r7, #0]
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	dd02      	ble.n	80012ec <lcd_DrawLine+0x4a>
 80012e6:	2301      	movs	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e00b      	b.n	8001304 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <lcd_DrawLine+0x56>
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e005      	b.n	8001304 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	425b      	negs	r3, r3
 8001302:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	dd02      	ble.n	8001310 <lcd_DrawLine+0x6e>
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	e00b      	b.n	8001328 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <lcd_DrawLine+0x7a>
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	e005      	b.n	8001328 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	425b      	negs	r3, r3
 8001326:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001328:	6a3a      	ldr	r2, [r7, #32]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	429a      	cmp	r2, r3
 800132e:	dd02      	ble.n	8001336 <lcd_DrawLine+0x94>
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	e001      	b.n	800133a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800133a:	2300      	movs	r3, #0
 800133c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800133e:	e02b      	b.n	8001398 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	b29b      	uxth	r3, r3
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	b291      	uxth	r1, r2
 8001348:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff91 	bl	8001274 <lcd_DrawPoint>
		xerr+=delta_x;
 8001352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	4413      	add	r3, r2
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	429a      	cmp	r2, r3
 8001368:	dd07      	ble.n	800137a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800136a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800137a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	429a      	cmp	r2, r3
 8001380:	dd07      	ble.n	8001392 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001394:	3301      	adds	r3, #1
 8001396:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	429a      	cmp	r2, r3
 800139e:	dacf      	bge.n	8001340 <lcd_DrawLine+0x9e>
		}
	}
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3734      	adds	r7, #52	; 0x34
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}
	...

080013ac <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4604      	mov	r4, r0
 80013b4:	4608      	mov	r0, r1
 80013b6:	4611      	mov	r1, r2
 80013b8:	461a      	mov	r2, r3
 80013ba:	4623      	mov	r3, r4
 80013bc:	80fb      	strh	r3, [r7, #6]
 80013be:	4603      	mov	r3, r0
 80013c0:	80bb      	strh	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70fb      	strb	r3, [r7, #3]
 80013c6:	4613      	mov	r3, r2
 80013c8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80013d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d6:	085b      	lsrs	r3, r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	fb12 f303 	smulbb	r3, r2, r3
 8001402:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	3b20      	subs	r3, #32
 8001408:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	b29a      	uxth	r2, r3
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4413      	add	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	3b01      	subs	r3, #1
 8001416:	b29c      	uxth	r4, r3
 8001418:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800141c:	b29a      	uxth	r2, r3
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	88b9      	ldrh	r1, [r7, #4]
 800142a:	88f8      	ldrh	r0, [r7, #6]
 800142c:	4622      	mov	r2, r4
 800142e:	f7ff fe6d 	bl	800110c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001432:	2300      	movs	r3, #0
 8001434:	827b      	strh	r3, [r7, #18]
 8001436:	e07a      	b.n	800152e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001438:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d028      	beq.n	8001492 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001444:	2b10      	cmp	r3, #16
 8001446:	d108      	bne.n	800145a <lcd_ShowChar+0xae>
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	8a7b      	ldrh	r3, [r7, #18]
 800144c:	493c      	ldr	r1, [pc, #240]	; (8001540 <lcd_ShowChar+0x194>)
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	440a      	add	r2, r1
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	75fb      	strb	r3, [r7, #23]
 8001458:	e01b      	b.n	8001492 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800145a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800145e:	2b18      	cmp	r3, #24
 8001460:	d10b      	bne.n	800147a <lcd_ShowChar+0xce>
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	8a79      	ldrh	r1, [r7, #18]
 8001466:	4837      	ldr	r0, [pc, #220]	; (8001544 <lcd_ShowChar+0x198>)
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4403      	add	r3, r0
 8001472:	440b      	add	r3, r1
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	75fb      	strb	r3, [r7, #23]
 8001478:	e00b      	b.n	8001492 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800147a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800147e:	2b20      	cmp	r3, #32
 8001480:	d15a      	bne.n	8001538 <lcd_ShowChar+0x18c>
 8001482:	78fa      	ldrb	r2, [r7, #3]
 8001484:	8a7b      	ldrh	r3, [r7, #18]
 8001486:	4930      	ldr	r1, [pc, #192]	; (8001548 <lcd_ShowChar+0x19c>)
 8001488:	0192      	lsls	r2, r2, #6
 800148a:	440a      	add	r2, r1
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001492:	2300      	movs	r3, #0
 8001494:	75bb      	strb	r3, [r7, #22]
 8001496:	e044      	b.n	8001522 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001498:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800149c:	2b00      	cmp	r3, #0
 800149e:	d120      	bne.n	80014e2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80014a0:	7dfa      	ldrb	r2, [r7, #23]
 80014a2:	7dbb      	ldrb	r3, [r7, #22]
 80014a4:	fa42 f303 	asr.w	r3, r2, r3
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <lcd_ShowChar+0x10e>
 80014b0:	883b      	ldrh	r3, [r7, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fe08 	bl	80010c8 <LCD_WR_DATA>
 80014b8:	e003      	b.n	80014c2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80014ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe03 	bl	80010c8 <LCD_WR_DATA>
				m++;
 80014c2:	7d7b      	ldrb	r3, [r7, #21]
 80014c4:	3301      	adds	r3, #1
 80014c6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80014c8:	7d7b      	ldrb	r3, [r7, #21]
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d0:	fb02 f201 	mul.w	r2, r2, r1
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d11f      	bne.n	800151c <lcd_ShowChar+0x170>
				{
					m=0;
 80014dc:	2300      	movs	r3, #0
 80014de:	757b      	strb	r3, [r7, #21]
					break;
 80014e0:	e022      	b.n	8001528 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80014e2:	7dfa      	ldrb	r2, [r7, #23]
 80014e4:	7dbb      	ldrb	r3, [r7, #22]
 80014e6:	fa42 f303 	asr.w	r3, r2, r3
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <lcd_ShowChar+0x152>
 80014f2:	883a      	ldrh	r2, [r7, #0]
 80014f4:	88b9      	ldrh	r1, [r7, #4]
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff febb 	bl	8001274 <lcd_DrawPoint>
				x++;
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	3301      	adds	r3, #1
 8001502:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001504:	88fa      	ldrh	r2, [r7, #6]
 8001506:	8a3b      	ldrh	r3, [r7, #16]
 8001508:	1ad2      	subs	r2, r2, r3
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	429a      	cmp	r2, r3
 800150e:	d105      	bne.n	800151c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001510:	8a3b      	ldrh	r3, [r7, #16]
 8001512:	80fb      	strh	r3, [r7, #6]
					y++;
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	3301      	adds	r3, #1
 8001518:	80bb      	strh	r3, [r7, #4]
					break;
 800151a:	e005      	b.n	8001528 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800151c:	7dbb      	ldrb	r3, [r7, #22]
 800151e:	3301      	adds	r3, #1
 8001520:	75bb      	strb	r3, [r7, #22]
 8001522:	7dbb      	ldrb	r3, [r7, #22]
 8001524:	2b07      	cmp	r3, #7
 8001526:	d9b7      	bls.n	8001498 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001528:	8a7b      	ldrh	r3, [r7, #18]
 800152a:	3301      	adds	r3, #1
 800152c:	827b      	strh	r3, [r7, #18]
 800152e:	8a7a      	ldrh	r2, [r7, #18]
 8001530:	89bb      	ldrh	r3, [r7, #12]
 8001532:	429a      	cmp	r2, r3
 8001534:	d380      	bcc.n	8001438 <lcd_ShowChar+0x8c>
 8001536:	e000      	b.n	800153a <lcd_ShowChar+0x18e>
		else return;
 8001538:	bf00      	nop
				}
			}
		}
	}
}
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	08009ec4 	.word	0x08009ec4
 8001544:	0800a4b4 	.word	0x0800a4b4
 8001548:	0800b684 	.word	0x0800b684

0800154c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <lcd_SetDir+0x44>)
 8001568:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800156c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <lcd_SetDir+0x44>)
 8001570:	22f0      	movs	r2, #240	; 0xf0
 8001572:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001574:	e006      	b.n	8001584 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <lcd_SetDir+0x44>)
 8001578:	22f0      	movs	r2, #240	; 0xf0
 800157a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <lcd_SetDir+0x44>)
 800157e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001582:	805a      	strh	r2, [r3, #2]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000118 	.word	0x20000118

08001594 <lcd_init>:


void lcd_init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159e:	48aa      	ldr	r0, [pc, #680]	; (8001848 <lcd_init+0x2b4>)
 80015a0:	f003 fe98 	bl	80052d4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a8:	f002 fb96 	bl	8003cd8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b2:	48a5      	ldr	r0, [pc, #660]	; (8001848 <lcd_init+0x2b4>)
 80015b4:	f003 fe8e 	bl	80052d4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80015b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015bc:	f002 fb8c 	bl	8003cd8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ffc3 	bl	800154c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80015c6:	20d3      	movs	r0, #211	; 0xd3
 80015c8:	f7ff fd6e 	bl	80010a8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80015cc:	f7ff fd8c 	bl	80010e8 <LCD_RD_DATA>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b9d      	ldr	r3, [pc, #628]	; (800184c <lcd_init+0x2b8>)
 80015d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80015d8:	f7ff fd86 	bl	80010e8 <LCD_RD_DATA>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	4b9a      	ldr	r3, [pc, #616]	; (800184c <lcd_init+0x2b8>)
 80015e2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80015e4:	f7ff fd80 	bl	80010e8 <LCD_RD_DATA>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b97      	ldr	r3, [pc, #604]	; (800184c <lcd_init+0x2b8>)
 80015ee:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80015f0:	4b96      	ldr	r3, [pc, #600]	; (800184c <lcd_init+0x2b8>)
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b94      	ldr	r3, [pc, #592]	; (800184c <lcd_init+0x2b8>)
 80015fa:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80015fc:	f7ff fd74 	bl	80010e8 <LCD_RD_DATA>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b91      	ldr	r3, [pc, #580]	; (800184c <lcd_init+0x2b8>)
 8001606:	889b      	ldrh	r3, [r3, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b8f      	ldr	r3, [pc, #572]	; (800184c <lcd_init+0x2b8>)
 800160e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001610:	20cf      	movs	r0, #207	; 0xcf
 8001612:	f7ff fd49 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fd56 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800161c:	20c1      	movs	r0, #193	; 0xc1
 800161e:	f7ff fd53 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001622:	2030      	movs	r0, #48	; 0x30
 8001624:	f7ff fd50 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001628:	20ed      	movs	r0, #237	; 0xed
 800162a:	f7ff fd3d 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800162e:	2064      	movs	r0, #100	; 0x64
 8001630:	f7ff fd4a 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001634:	2003      	movs	r0, #3
 8001636:	f7ff fd47 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800163a:	2012      	movs	r0, #18
 800163c:	f7ff fd44 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001640:	2081      	movs	r0, #129	; 0x81
 8001642:	f7ff fd41 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001646:	20e8      	movs	r0, #232	; 0xe8
 8001648:	f7ff fd2e 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800164c:	2085      	movs	r0, #133	; 0x85
 800164e:	f7ff fd3b 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001652:	2010      	movs	r0, #16
 8001654:	f7ff fd38 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001658:	207a      	movs	r0, #122	; 0x7a
 800165a:	f7ff fd35 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800165e:	20cb      	movs	r0, #203	; 0xcb
 8001660:	f7ff fd22 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001664:	2039      	movs	r0, #57	; 0x39
 8001666:	f7ff fd2f 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800166a:	202c      	movs	r0, #44	; 0x2c
 800166c:	f7ff fd2c 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff fd29 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001676:	2034      	movs	r0, #52	; 0x34
 8001678:	f7ff fd26 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800167c:	2002      	movs	r0, #2
 800167e:	f7ff fd23 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001682:	20f7      	movs	r0, #247	; 0xf7
 8001684:	f7ff fd10 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001688:	2020      	movs	r0, #32
 800168a:	f7ff fd1d 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800168e:	20ea      	movs	r0, #234	; 0xea
 8001690:	f7ff fd0a 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fd17 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fd14 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80016a0:	20c0      	movs	r0, #192	; 0xc0
 80016a2:	f7ff fd01 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80016a6:	201b      	movs	r0, #27
 80016a8:	f7ff fd0e 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80016ac:	20c1      	movs	r0, #193	; 0xc1
 80016ae:	f7ff fcfb 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fd08 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80016b8:	20c5      	movs	r0, #197	; 0xc5
 80016ba:	f7ff fcf5 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80016be:	2030      	movs	r0, #48	; 0x30
 80016c0:	f7ff fd02 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80016c4:	2030      	movs	r0, #48	; 0x30
 80016c6:	f7ff fcff 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80016ca:	20c7      	movs	r0, #199	; 0xc7
 80016cc:	f7ff fcec 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80016d0:	20b7      	movs	r0, #183	; 0xb7
 80016d2:	f7ff fcf9 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80016d6:	2036      	movs	r0, #54	; 0x36
 80016d8:	f7ff fce6 	bl	80010a8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80016dc:	2008      	movs	r0, #8
 80016de:	f7ff fcf3 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80016e2:	203a      	movs	r0, #58	; 0x3a
 80016e4:	f7ff fce0 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80016e8:	2055      	movs	r0, #85	; 0x55
 80016ea:	f7ff fced 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80016ee:	20b1      	movs	r0, #177	; 0xb1
 80016f0:	f7ff fcda 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fce7 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80016fa:	201a      	movs	r0, #26
 80016fc:	f7ff fce4 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001700:	20b6      	movs	r0, #182	; 0xb6
 8001702:	f7ff fcd1 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001706:	200a      	movs	r0, #10
 8001708:	f7ff fcde 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800170c:	20a2      	movs	r0, #162	; 0xa2
 800170e:	f7ff fcdb 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001712:	20f2      	movs	r0, #242	; 0xf2
 8001714:	f7ff fcc8 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fcd5 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800171e:	2026      	movs	r0, #38	; 0x26
 8001720:	f7ff fcc2 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff fccf 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800172a:	20e0      	movs	r0, #224	; 0xe0
 800172c:	f7ff fcbc 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001730:	200f      	movs	r0, #15
 8001732:	f7ff fcc9 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001736:	202a      	movs	r0, #42	; 0x2a
 8001738:	f7ff fcc6 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800173c:	2028      	movs	r0, #40	; 0x28
 800173e:	f7ff fcc3 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001742:	2008      	movs	r0, #8
 8001744:	f7ff fcc0 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001748:	200e      	movs	r0, #14
 800174a:	f7ff fcbd 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800174e:	2008      	movs	r0, #8
 8001750:	f7ff fcba 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001754:	2054      	movs	r0, #84	; 0x54
 8001756:	f7ff fcb7 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800175a:	20a9      	movs	r0, #169	; 0xa9
 800175c:	f7ff fcb4 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001760:	2043      	movs	r0, #67	; 0x43
 8001762:	f7ff fcb1 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001766:	200a      	movs	r0, #10
 8001768:	f7ff fcae 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800176c:	200f      	movs	r0, #15
 800176e:	f7ff fcab 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fca8 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fca5 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fca2 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fc9f 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800178a:	20e1      	movs	r0, #225	; 0xe1
 800178c:	f7ff fc8c 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fc99 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001796:	2015      	movs	r0, #21
 8001798:	f7ff fc96 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800179c:	2017      	movs	r0, #23
 800179e:	f7ff fc93 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80017a2:	2007      	movs	r0, #7
 80017a4:	f7ff fc90 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80017a8:	2011      	movs	r0, #17
 80017aa:	f7ff fc8d 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80017ae:	2006      	movs	r0, #6
 80017b0:	f7ff fc8a 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80017b4:	202b      	movs	r0, #43	; 0x2b
 80017b6:	f7ff fc87 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80017ba:	2056      	movs	r0, #86	; 0x56
 80017bc:	f7ff fc84 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80017c0:	203c      	movs	r0, #60	; 0x3c
 80017c2:	f7ff fc81 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80017c6:	2005      	movs	r0, #5
 80017c8:	f7ff fc7e 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80017cc:	2010      	movs	r0, #16
 80017ce:	f7ff fc7b 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017d2:	200f      	movs	r0, #15
 80017d4:	f7ff fc78 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017d8:	203f      	movs	r0, #63	; 0x3f
 80017da:	f7ff fc75 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80017de:	203f      	movs	r0, #63	; 0x3f
 80017e0:	f7ff fc72 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80017e4:	200f      	movs	r0, #15
 80017e6:	f7ff fc6f 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80017ea:	202b      	movs	r0, #43	; 0x2b
 80017ec:	f7ff fc5c 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fc69 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fc66 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff fc63 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001802:	203f      	movs	r0, #63	; 0x3f
 8001804:	f7ff fc60 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001808:	202a      	movs	r0, #42	; 0x2a
 800180a:	f7ff fc4d 	bl	80010a8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fc5a 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fc57 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fc54 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001820:	20ef      	movs	r0, #239	; 0xef
 8001822:	f7ff fc51 	bl	80010c8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001826:	2011      	movs	r0, #17
 8001828:	f7ff fc3e 	bl	80010a8 <LCD_WR_REG>
	HAL_Delay(120);
 800182c:	2078      	movs	r0, #120	; 0x78
 800182e:	f002 fa53 	bl	8003cd8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001832:	2029      	movs	r0, #41	; 0x29
 8001834:	f7ff fc38 	bl	80010a8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <lcd_init+0x2bc>)
 8001840:	f003 fd48 	bl	80052d4 <HAL_GPIO_WritePin>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020800 	.word	0x40020800
 800184c:	20000118 	.word	0x20000118
 8001850:	40020000 	.word	0x40020000

08001854 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4413      	add	r3, r2
 800186c:	b298      	uxth	r0, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	b29a      	uxth	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b29b      	uxth	r3, r3
 800187a:	8b3a      	ldrh	r2, [r7, #24]
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff fcf9 	bl	8001274 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	b29b      	uxth	r3, r3
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	b298      	uxth	r0, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	b29a      	uxth	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	8b3a      	ldrh	r2, [r7, #24]
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff fce9 	bl	8001274 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b298      	uxth	r0, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	8b3a      	ldrh	r2, [r7, #24]
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff fcd9 	bl	8001274 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b298      	uxth	r0, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	8b3a      	ldrh	r2, [r7, #24]
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff fcc9 	bl	8001274 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b298      	uxth	r0, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	8b3a      	ldrh	r2, [r7, #24]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff fcb9 	bl	8001274 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	b29a      	uxth	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	b298      	uxth	r0, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	8b3a      	ldrh	r2, [r7, #24]
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff fca9 	bl	8001274 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	b29a      	uxth	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	b298      	uxth	r0, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	b29b      	uxth	r3, r3
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b29b      	uxth	r3, r3
 800193a:	8b3a      	ldrh	r2, [r7, #24]
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff fc99 	bl	8001274 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	b29a      	uxth	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b298      	uxth	r0, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	b29a      	uxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	b29b      	uxth	r3, r3
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	8b3a      	ldrh	r2, [r7, #24]
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff fc89 	bl	8001274 <lcd_DrawPoint>
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b08a      	sub	sp, #40	; 0x28
 800196e:	af02      	add	r7, sp, #8
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4613      	mov	r3, r2
 8001978:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	f1c3 0303 	rsb	r3, r3, #3
 800198a:	613b      	str	r3, [r7, #16]


	if (fill)
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04f      	beq.n	8001a32 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001992:	e029      	b.n	80019e8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e00a      	b.n	80019b0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff55 	bl	8001854 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	ddf0      	ble.n	800199a <lcd_DrawCircle+0x30>

			if (d < 0) {
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da06      	bge.n	80019cc <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	009a      	lsls	r2, r3, #2
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4413      	add	r3, r2
 80019c6:	3306      	adds	r3, #6
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00a      	b.n	80019e2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	009a      	lsls	r2, r3, #2
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4413      	add	r3, r2
 80019d8:	330a      	adds	r3, #10
 80019da:	613b      	str	r3, [r7, #16]
				y--;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	3b01      	subs	r3, #1
 80019e0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	ddd1      	ble.n	8001994 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80019f0:	e023      	b.n	8001a3a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff ff29 	bl	8001854 <_draw_circle_8>
			if (d < 0) {
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da06      	bge.n	8001a16 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	009a      	lsls	r2, r3, #2
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4413      	add	r3, r2
 8001a10:	3306      	adds	r3, #6
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	e00a      	b.n	8001a2c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	009a      	lsls	r2, r3, #2
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4413      	add	r3, r2
 8001a22:	330a      	adds	r3, #10
 8001a24:	613b      	str	r3, [r7, #16]
				y--;
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
			x++;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dddb      	ble.n	80019f2 <lcd_DrawCircle+0x88>
}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b08b      	sub	sp, #44	; 0x2c
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	81fb      	strh	r3, [r7, #14]
 8001a52:	460b      	mov	r3, r1
 8001a54:	81bb      	strh	r3, [r7, #12]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001a62:	e048      	b.n	8001af6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d145      	bne.n	8001af6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001a6a:	89fa      	ldrh	r2, [r7, #14]
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <lcd_ShowStr+0xc4>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	1acb      	subs	r3, r1, r3
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dc3f      	bgt.n	8001b00 <lcd_ShowStr+0xbc>
 8001a80:	89ba      	ldrh	r2, [r7, #12]
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <lcd_ShowStr+0xc4>)
 8001a84:	885b      	ldrh	r3, [r3, #2]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a8c:	1acb      	subs	r3, r1, r3
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dc36      	bgt.n	8001b00 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b80      	cmp	r3, #128	; 0x80
 8001a98:	d902      	bls.n	8001aa0 <lcd_ShowStr+0x5c>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	75fb      	strb	r3, [r7, #23]
 8001a9e:	e02a      	b.n	8001af6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b0d      	cmp	r3, #13
 8001aa6:	d10b      	bne.n	8001ac0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	89bb      	ldrh	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001ab4:	8abb      	ldrh	r3, [r7, #20]
 8001ab6:	81fb      	strh	r3, [r7, #14]
					str++;
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	e017      	b.n	8001af0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	88fc      	ldrh	r4, [r7, #6]
 8001ac6:	89b9      	ldrh	r1, [r7, #12]
 8001ac8:	89f8      	ldrh	r0, [r7, #14]
 8001aca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4623      	mov	r3, r4
 8001adc:	f7ff fc66 	bl	80013ac <lcd_ShowChar>
					x+=sizey/2;
 8001ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	4413      	add	r3, r2
 8001aee:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1b2      	bne.n	8001a64 <lcd_ShowStr+0x20>
 8001afe:	e000      	b.n	8001b02 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001b00:	bf00      	nop
			}
		}
	}
}
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}
 8001b08:	20000118 	.word	0x20000118

08001b0c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2140      	movs	r1, #64	; 0x40
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <led7_init+0x14>)
 8001b16:	f003 fbdd 	bl	80052d4 <HAL_GPIO_WritePin>
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021800 	.word	0x40021800

08001b24 <led7_Scan>:

void led7_Scan(){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <led7_Scan+0x104>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <led7_Scan+0x104>)
 8001b32:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <led7_Scan+0x108>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3d      	ldr	r2, [pc, #244]	; (8001c30 <led7_Scan+0x10c>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <led7_Scan+0x104>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <led7_Scan+0x104>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <led7_Scan+0x108>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d847      	bhi.n	8001be8 <led7_Scan+0xc4>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <led7_Scan+0x3c>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b8f 	.word	0x08001b8f
 8001b68:	08001bad 	.word	0x08001bad
 8001b6c:	08001bcb 	.word	0x08001bcb
	case 0:
		spi_buffer |= 0x00b0;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <led7_Scan+0x104>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <led7_Scan+0x104>)
 8001b7c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <led7_Scan+0x104>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <led7_Scan+0x104>)
 8001b8a:	801a      	strh	r2, [r3, #0]
		break;
 8001b8c:	e02d      	b.n	8001bea <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <led7_Scan+0x104>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <led7_Scan+0x104>)
 8001b9a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <led7_Scan+0x104>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	f023 0320 	bic.w	r3, r3, #32
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <led7_Scan+0x104>)
 8001ba8:	801a      	strh	r2, [r3, #0]
		break;
 8001baa:	e01e      	b.n	8001bea <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <led7_Scan+0x104>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <led7_Scan+0x104>)
 8001bb8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <led7_Scan+0x104>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	f023 0310 	bic.w	r3, r3, #16
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <led7_Scan+0x104>)
 8001bc6:	801a      	strh	r2, [r3, #0]
		break;
 8001bc8:	e00f      	b.n	8001bea <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <led7_Scan+0x104>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <led7_Scan+0x104>)
 8001bd6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <led7_Scan+0x104>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <led7_Scan+0x104>)
 8001be4:	801a      	strh	r2, [r3, #0]
		break;
 8001be6:	e000      	b.n	8001bea <led7_Scan+0xc6>
	default:
		break;
 8001be8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <led7_Scan+0x108>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	425a      	negs	r2, r3
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	bf58      	it	pl
 8001bfc:	4253      	negpl	r3, r2
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <led7_Scan+0x108>)
 8001c00:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <led7_Scan+0x110>)
 8001c08:	f003 fb64 	bl	80052d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4905      	ldr	r1, [pc, #20]	; (8001c28 <led7_Scan+0x104>)
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <led7_Scan+0x114>)
 8001c14:	f005 f97d 	bl	8006f12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2140      	movs	r1, #64	; 0x40
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <led7_Scan+0x110>)
 8001c1e:	f003 fb59 	bl	80052d4 <HAL_GPIO_WritePin>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	200000d4 	.word	0x200000d4
 8001c30:	20000000 	.word	0x20000000
 8001c34:	40021800 	.word	0x40021800
 8001c38:	20000374 	.word	0x20000374

08001c3c <lightProcess>:

#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <lightProcess+0x58>)
 8001c42:	8b5b      	ldrh	r3, [r3, #26]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d113      	bne.n	8001c70 <lightProcess+0x34>
		light_status = 1 - light_status;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <lightProcess+0x5c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	f1c3 0301 	rsb	r3, r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <lightProcess+0x5c>)
 8001c54:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <lightProcess+0x5c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d104      	bne.n	8001c68 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 8001c5e:	2101      	movs	r1, #1
 8001c60:	480e      	ldr	r0, [pc, #56]	; (8001c9c <lightProcess+0x60>)
 8001c62:	f001 ff0d 	bl	8003a80 <uart_EspSendBytes>
 8001c66:	e003      	b.n	8001c70 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8001c68:	2101      	movs	r1, #1
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <lightProcess+0x64>)
 8001c6c:	f001 ff08 	bl	8003a80 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <lightProcess+0x5c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2120      	movs	r1, #32
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <lightProcess+0x68>)
 8001c7e:	f003 fb29 	bl	80052d4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 8001c82:	e004      	b.n	8001c8e <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2120      	movs	r1, #32
 8001c88:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <lightProcess+0x68>)
 8001c8a:	f003 fb23 	bl	80052d4 <HAL_GPIO_WritePin>
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200000e8 	.word	0x200000e8
 8001c98:	200000d8 	.word	0x200000d8
 8001c9c:	08009dcc 	.word	0x08009dcc
 8001ca0:	08009dd0 	.word	0x08009dd0
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <test_Esp>:

void test_Esp(){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 8001cae:	f001 ff43 	bl	8003b38 <uart_EspCheck>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <test_Esp+0x1a>
 8001cb8:	2101      	movs	r1, #1
 8001cba:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <test_Esp+0x3c>)
 8001cbc:	f001 fee0 	bl	8003a80 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 8001cc0:	e00c      	b.n	8001cdc <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	2318      	movs	r3, #24
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <test_Esp+0x40>)
 8001cd4:	2132      	movs	r1, #50	; 0x32
 8001cd6:	200a      	movs	r0, #10
 8001cd8:	f7ff feb4 	bl	8001a44 <lcd_ShowStr>
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08009dd4 	.word	0x08009dd4
 8001ce8:	08009dd8 	.word	0x08009dd8

08001cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f001 ff80 	bl	8003bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 f82c 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f000 fab6 	bl	8002268 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001cfc:	f000 f9d0 	bl	80020a0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001d00:	f000 f948 	bl	8001f94 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001d04:	f000 fbc6 	bl	8002494 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001d08:	f000 fa64 	bl	80021d4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001d0c:	f000 fa8c 	bl	8002228 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d10:	f000 f888 	bl	8001e24 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d14:	f000 f910 	bl	8001f38 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001d18:	f000 fa0e 	bl	8002138 <MX_TIM13_Init>
  MX_TIM1_Init();
 8001d1c:	f000 f970 	bl	8002000 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001d20:	f000 fc32 	bl	8002588 <system_init>
  lcd_Clear(BLACK);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fa3d 	bl	80011a4 <lcd_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!flag_timer2);
 8001d2a:	bf00      	nop
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <main+0x60>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0fb      	beq.n	8001d2c <main+0x40>
	  flag_timer2 = 0;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <main+0x60>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001d3a:	f7ff f8fb 	bl	8000f34 <button_Scan>
	  test_Esp();
 8001d3e:	f7ff ffb3 	bl	8001ca8 <test_Esp>
	  lightProcess();
 8001d42:	f7ff ff7b 	bl	8001c3c <lightProcess>
	  test_ledDebug();
 8001d46:	f000 fc4b 	bl	80025e0 <test_ledDebug>
	  while (!flag_timer2);
 8001d4a:	e7ee      	b.n	8001d2a <main+0x3e>
 8001d4c:	200000da 	.word	0x200000da

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	; 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	2230      	movs	r2, #48	; 0x30
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f007 ff38 	bl	8009bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <SystemClock_Config+0xcc>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <SystemClock_Config+0xcc>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <SystemClock_Config+0xcc>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <SystemClock_Config+0xd0>)
 8001d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <SystemClock_Config+0xd0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db4:	2310      	movs	r3, #16
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db8:	2302      	movs	r3, #2
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dc4:	23a8      	movs	r3, #168	; 0xa8
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f004 fb9f 	bl	8006518 <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de0:	f000 fc22 	bl	8002628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de4:	230f      	movs	r3, #15
 8001de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2105      	movs	r1, #5
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fe00 	bl	8006a08 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e0e:	f000 fc0b 	bl	8002628 <Error_Handler>
  }
}
 8001e12:	bf00      	nop
 8001e14:	3750      	adds	r7, #80	; 0x50
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000

08001e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e38:	4a3d      	ldr	r2, [pc, #244]	; (8001f30 <MX_ADC1_Init+0x10c>)
 8001e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e48:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e64:	4a33      	ldr	r2, [pc, #204]	; (8001f34 <MX_ADC1_Init+0x110>)
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e70:	2205      	movs	r2, #5
 8001e72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e74:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e82:	482a      	ldr	r0, [pc, #168]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001e84:	f001 ff4c 	bl	8003d20 <HAL_ADC_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e8e:	f000 fbcb 	bl	8002628 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e92:	2308      	movs	r3, #8
 8001e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4822      	ldr	r0, [pc, #136]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001ea4:	f002 f8ae 	bl	8004004 <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001eae:	f000 fbbb 	bl	8002628 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481b      	ldr	r0, [pc, #108]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001ec0:	f002 f8a0 	bl	8004004 <HAL_ADC_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001eca:	f000 fbad 	bl	8002628 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ece:	230a      	movs	r3, #10
 8001ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001edc:	f002 f892 	bl	8004004 <HAL_ADC_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001ee6:	f000 fb9f 	bl	8002628 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001eea:	230b      	movs	r3, #11
 8001eec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001ef8:	f002 f884 	bl	8004004 <HAL_ADC_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001f02:	f000 fb91 	bl	8002628 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f06:	230c      	movs	r3, #12
 8001f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0e:	463b      	mov	r3, r7
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <MX_ADC1_Init+0x108>)
 8001f14:	f002 f876 	bl	8004004 <HAL_ADC_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001f1e:	f000 fb83 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001f8 	.word	0x200001f8
 8001f30:	40012000 	.word	0x40012000
 8001f34:	0f000001 	.word	0x0f000001

08001f38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <MX_I2C1_Init+0x54>)
 8001f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <MX_I2C1_Init+0x58>)
 8001f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <MX_I2C1_Init+0x50>)
 8001f76:	f003 f9e1 	bl	800533c <HAL_I2C_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f80:	f000 fb52 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000154 	.word	0x20000154
 8001f8c:	40005400 	.word	0x40005400
 8001f90:	000186a0 	.word	0x000186a0

08001f94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <MX_SPI1_Init+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_SPI1_Init+0x64>)
 8001fe6:	f004 ff0b 	bl	8006e00 <HAL_SPI_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ff0:	f000 fb1a 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000374 	.word	0x20000374
 8001ffc:	40013000 	.word	0x40013000

08002000 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	463b      	mov	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <MX_TIM1_Init+0x98>)
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <MX_TIM1_Init+0x9c>)
 8002020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <MX_TIM1_Init+0x98>)
 8002024:	2253      	movs	r2, #83	; 0x53
 8002026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <MX_TIM1_Init+0x98>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <MX_TIM1_Init+0x98>)
 8002030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <MX_TIM1_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <MX_TIM1_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <MX_TIM1_Init+0x98>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002048:	4813      	ldr	r0, [pc, #76]	; (8002098 <MX_TIM1_Init+0x98>)
 800204a:	f005 fcc5 	bl	80079d8 <HAL_TIM_Base_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002054:	f000 fae8 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <MX_TIM1_Init+0x98>)
 8002066:	f006 f863 	bl	8008130 <HAL_TIM_ConfigClockSource>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002070:	f000 fada 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800207c:	463b      	mov	r3, r7
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_TIM1_Init+0x98>)
 8002082:	f006 fc55 	bl	8008930 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800208c:	f000 facc 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000032c 	.word	0x2000032c
 800209c:	40010000 	.word	0x40010000

080020a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM2_Init+0x94>)
 80020be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_TIM2_Init+0x94>)
 80020c6:	f240 3247 	movw	r2, #839	; 0x347
 80020ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_TIM2_Init+0x94>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_TIM2_Init+0x94>)
 80020d4:	2263      	movs	r2, #99	; 0x63
 80020d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_TIM2_Init+0x94>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_TIM2_Init+0x94>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <MX_TIM2_Init+0x94>)
 80020e6:	f005 fc77 	bl	80079d8 <HAL_TIM_Base_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020f0:	f000 fa9a 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4619      	mov	r1, r3
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <MX_TIM2_Init+0x94>)
 8002102:	f006 f815 	bl	8008130 <HAL_TIM_ConfigClockSource>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800210c:	f000 fa8c 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002118:	463b      	mov	r3, r7
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_TIM2_Init+0x94>)
 800211e:	f006 fc07 	bl	8008930 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002128:	f000 fa7e 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200003cc 	.word	0x200003cc

08002138 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
 800214c:	615a      	str	r2, [r3, #20]
 800214e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <MX_TIM13_Init+0x94>)
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <MX_TIM13_Init+0x98>)
 8002154:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_TIM13_Init+0x94>)
 8002158:	f240 3247 	movw	r2, #839	; 0x347
 800215c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <MX_TIM13_Init+0x94>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <MX_TIM13_Init+0x94>)
 8002166:	2263      	movs	r2, #99	; 0x63
 8002168:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_TIM13_Init+0x94>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <MX_TIM13_Init+0x94>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002176:	4815      	ldr	r0, [pc, #84]	; (80021cc <MX_TIM13_Init+0x94>)
 8002178:	f005 fc2e 	bl	80079d8 <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002182:	f000 fa51 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002186:	4811      	ldr	r0, [pc, #68]	; (80021cc <MX_TIM13_Init+0x94>)
 8002188:	f005 fce6 	bl	8007b58 <HAL_TIM_PWM_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002192:	f000 fa49 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002196:	2360      	movs	r3, #96	; 0x60
 8002198:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	4807      	ldr	r0, [pc, #28]	; (80021cc <MX_TIM13_Init+0x94>)
 80021ae:	f005 fefd 	bl	8007fac <HAL_TIM_PWM_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80021b8:	f000 fa36 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <MX_TIM13_Init+0x94>)
 80021be:	f000 fc4f 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000240 	.word	0x20000240
 80021d0:	40001c00 	.word	0x40001c00

080021d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <MX_USART1_UART_Init+0x50>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_USART1_UART_Init+0x4c>)
 800220c:	f006 fc20 	bl	8008a50 <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002216:	f000 fa07 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000288 	.word	0x20000288
 8002224:	40011000 	.word	0x40011000

08002228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_DMA_Init+0x3c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <MX_DMA_Init+0x3c>)
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_DMA_Init+0x3c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2038      	movs	r0, #56	; 0x38
 8002250:	f002 fa53 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002254:	2038      	movs	r0, #56	; 0x38
 8002256:	f002 fa6c 	bl	8004732 <HAL_NVIC_EnableIRQ>

}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	4b7e      	ldr	r3, [pc, #504]	; (800247c <MX_GPIO_Init+0x214>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a7d      	ldr	r2, [pc, #500]	; (800247c <MX_GPIO_Init+0x214>)
 8002288:	f043 0310 	orr.w	r3, r3, #16
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b7b      	ldr	r3, [pc, #492]	; (800247c <MX_GPIO_Init+0x214>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	623b      	str	r3, [r7, #32]
 8002298:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	4b77      	ldr	r3, [pc, #476]	; (800247c <MX_GPIO_Init+0x214>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a76      	ldr	r2, [pc, #472]	; (800247c <MX_GPIO_Init+0x214>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <MX_GPIO_Init+0x214>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	4b70      	ldr	r3, [pc, #448]	; (800247c <MX_GPIO_Init+0x214>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a6f      	ldr	r2, [pc, #444]	; (800247c <MX_GPIO_Init+0x214>)
 80022c0:	f043 0320 	orr.w	r3, r3, #32
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <MX_GPIO_Init+0x214>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	4b69      	ldr	r3, [pc, #420]	; (800247c <MX_GPIO_Init+0x214>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a68      	ldr	r2, [pc, #416]	; (800247c <MX_GPIO_Init+0x214>)
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b66      	ldr	r3, [pc, #408]	; (800247c <MX_GPIO_Init+0x214>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b62      	ldr	r3, [pc, #392]	; (800247c <MX_GPIO_Init+0x214>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a61      	ldr	r2, [pc, #388]	; (800247c <MX_GPIO_Init+0x214>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <MX_GPIO_Init+0x214>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b5b      	ldr	r3, [pc, #364]	; (800247c <MX_GPIO_Init+0x214>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a5a      	ldr	r2, [pc, #360]	; (800247c <MX_GPIO_Init+0x214>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b58      	ldr	r3, [pc, #352]	; (800247c <MX_GPIO_Init+0x214>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <MX_GPIO_Init+0x214>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a53      	ldr	r2, [pc, #332]	; (800247c <MX_GPIO_Init+0x214>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b51      	ldr	r3, [pc, #324]	; (800247c <MX_GPIO_Init+0x214>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b4d      	ldr	r3, [pc, #308]	; (800247c <MX_GPIO_Init+0x214>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a4c      	ldr	r2, [pc, #304]	; (800247c <MX_GPIO_Init+0x214>)
 800234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b4a      	ldr	r3, [pc, #296]	; (800247c <MX_GPIO_Init+0x214>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	2170      	movs	r1, #112	; 0x70
 8002362:	4847      	ldr	r0, [pc, #284]	; (8002480 <MX_GPIO_Init+0x218>)
 8002364:	f002 ffb6 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800236e:	4845      	ldr	r0, [pc, #276]	; (8002484 <MX_GPIO_Init+0x21c>)
 8002370:	f002 ffb0 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800237a:	4843      	ldr	r0, [pc, #268]	; (8002488 <MX_GPIO_Init+0x220>)
 800237c:	f002 ffaa 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	4841      	ldr	r0, [pc, #260]	; (800248c <MX_GPIO_Init+0x224>)
 8002388:	f002 ffa4 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	2108      	movs	r1, #8
 8002390:	483f      	ldr	r0, [pc, #252]	; (8002490 <MX_GPIO_Init+0x228>)
 8002392:	f002 ff9f 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8002396:	2370      	movs	r3, #112	; 0x70
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	4834      	ldr	r0, [pc, #208]	; (8002480 <MX_GPIO_Init+0x218>)
 80023ae:	f002 fddd 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80023b2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c8:	4619      	mov	r1, r3
 80023ca:	482e      	ldr	r0, [pc, #184]	; (8002484 <MX_GPIO_Init+0x21c>)
 80023cc:	f002 fdce 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X0_Pin INPUT_X1_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80023d0:	23c0      	movs	r3, #192	; 0xc0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e0:	4619      	mov	r1, r3
 80023e2:	482a      	ldr	r0, [pc, #168]	; (800248c <MX_GPIO_Init+0x224>)
 80023e4:	f002 fdc2 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80023e8:	2330      	movs	r3, #48	; 0x30
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f8:	4619      	mov	r1, r3
 80023fa:	4822      	ldr	r0, [pc, #136]	; (8002484 <MX_GPIO_Init+0x21c>)
 80023fc:	f002 fdb6 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002400:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	4619      	mov	r1, r3
 8002418:	481b      	ldr	r0, [pc, #108]	; (8002488 <MX_GPIO_Init+0x220>)
 800241a:	f002 fda7 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_PEN_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 800241e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002428:	2301      	movs	r3, #1
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002430:	4619      	mov	r1, r3
 8002432:	4814      	ldr	r0, [pc, #80]	; (8002484 <MX_GPIO_Init+0x21c>)
 8002434:	f002 fd9a 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244e:	4619      	mov	r1, r3
 8002450:	480e      	ldr	r0, [pc, #56]	; (800248c <MX_GPIO_Init+0x224>)
 8002452:	f002 fd8b 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002456:	2308      	movs	r3, #8
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245a:	2301      	movs	r3, #1
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	4619      	mov	r1, r3
 800246c:	4808      	ldr	r0, [pc, #32]	; (8002490 <MX_GPIO_Init+0x228>)
 800246e:	f002 fd7d 	bl	8004f6c <HAL_GPIO_Init>

}
 8002472:	bf00      	nop
 8002474:	3738      	adds	r7, #56	; 0x38
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40021000 	.word	0x40021000
 8002484:	40020800 	.word	0x40020800
 8002488:	40021800 	.word	0x40021800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020c00 	.word	0x40020c00

08002494 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800249a:	f107 031c 	add.w	r3, r7, #28
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]
 80024aa:	615a      	str	r2, [r3, #20]
 80024ac:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80024ae:	463b      	mov	r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	615a      	str	r2, [r3, #20]
 80024be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80024c0:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <MX_FSMC_Init+0xec>)
 80024c2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80024c6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <MX_FSMC_Init+0xec>)
 80024ca:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <MX_FSMC_Init+0xf0>)
 80024cc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <MX_FSMC_Init+0xec>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <MX_FSMC_Init+0xec>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <MX_FSMC_Init+0xec>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <MX_FSMC_Init+0xec>)
 80024e2:	2210      	movs	r2, #16
 80024e4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <MX_FSMC_Init+0xec>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <MX_FSMC_Init+0xec>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <MX_FSMC_Init+0xec>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <MX_FSMC_Init+0xec>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <MX_FSMC_Init+0xec>)
 8002500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_FSMC_Init+0xec>)
 8002508:	2200      	movs	r2, #0
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <MX_FSMC_Init+0xec>)
 800250e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_FSMC_Init+0xec>)
 8002516:	2200      	movs	r2, #0
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <MX_FSMC_Init+0xec>)
 800251c:	2200      	movs	r2, #0
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <MX_FSMC_Init+0xec>)
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8002526:	230f      	movs	r3, #15
 8002528:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800252a:	230f      	movs	r3, #15
 800252c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800252e:	233c      	movs	r3, #60	; 0x3c
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8002536:	2310      	movs	r3, #16
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800253a:	2311      	movs	r3, #17
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8002542:	2308      	movs	r3, #8
 8002544:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8002546:	230f      	movs	r3, #15
 8002548:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800254a:	2309      	movs	r3, #9
 800254c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002552:	2310      	movs	r3, #16
 8002554:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8002556:	2311      	movs	r3, #17
 8002558:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800255e:	463a      	mov	r2, r7
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <MX_FSMC_Init+0xec>)
 8002568:	f005 f9f2 	bl	8007950 <HAL_SRAM_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8002572:	f000 f859 	bl	8002628 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002576:	bf00      	nop
 8002578:	3738      	adds	r7, #56	; 0x38
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001a8 	.word	0x200001a8
 8002584:	a0000104 	.word	0xa0000104

08002588 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2120      	movs	r1, #32
 8002590:	4812      	ldr	r0, [pc, #72]	; (80025dc <system_init+0x54>)
 8002592:	f002 fe9f 	bl	80052d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2140      	movs	r1, #64	; 0x40
 800259a:	4810      	ldr	r0, [pc, #64]	; (80025dc <system_init+0x54>)
 800259c:	f002 fe9a 	bl	80052d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2110      	movs	r1, #16
 80025a4:	480d      	ldr	r0, [pc, #52]	; (80025dc <system_init+0x54>)
 80025a6:	f002 fe95 	bl	80052d4 <HAL_GPIO_WritePin>

	timer_init();
 80025aa:	f000 f851 	bl	8002650 <timer_init>
	led7_init();
 80025ae:	f7ff faad 	bl	8001b0c <led7_init>
	button_init();
 80025b2:	f7fe fcb3 	bl	8000f1c <button_init>
	lcd_init();
 80025b6:	f7fe ffed 	bl	8001594 <lcd_init>
	ds3231_init();
 80025ba:	f7fe fd31 	bl	8001020 <ds3231_init>
	uart_init_rs232();
 80025be:	f001 fa3d 	bl	8003a3c <uart_init_rs232>
	sensor_init();
 80025c2:	f000 f837 	bl	8002634 <sensor_init>
	buzzer_init();
 80025c6:	f7fe fd21 	bl	800100c <buzzer_init>
	touch_init();
 80025ca:	f001 fa27 	bl	8003a1c <touch_init>
	uart_init_esp();
 80025ce:	f001 fa43 	bl	8003a58 <uart_init_esp>
	setTimer2(50);
 80025d2:	2032      	movs	r0, #50	; 0x32
 80025d4:	f000 f846 	bl	8002664 <setTimer2>
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000

080025e0 <test_ledDebug>:

uint8_t count_LED_debug = 0;
uint8_t count_LED_Y0 = 0;
uint8_t count_LED_Y1 = 0;

void test_ledDebug(){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	count_LED_debug = (count_LED_debug + 1) % 20;
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <test_ledDebug+0x3c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <test_ledDebug+0x40>)
 80025ec:	fb83 1302 	smull	r1, r3, r3, r2
 80025f0:	10d9      	asrs	r1, r3, #3
 80025f2:	17d3      	asrs	r3, r2, #31
 80025f4:	1ac9      	subs	r1, r1, r3
 80025f6:	460b      	mov	r3, r1
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	1ad1      	subs	r1, r2, r3
 8002600:	b2ca      	uxtb	r2, r1
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <test_ledDebug+0x3c>)
 8002604:	701a      	strb	r2, [r3, #0]
	if (count_LED_debug == 0) {
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <test_ledDebug+0x3c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <test_ledDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800260e:	2110      	movs	r1, #16
 8002610:	4804      	ldr	r0, [pc, #16]	; (8002624 <test_ledDebug+0x44>)
 8002612:	f002 fe78 	bl	8005306 <HAL_GPIO_TogglePin>
	}
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200000d9 	.word	0x200000d9
 8002620:	66666667 	.word	0x66666667
 8002624:	40021000 	.word	0x40021000

08002628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002630:	e7fe      	b.n	8002630 <Error_Handler+0x8>
	...

08002634 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002638:	2205      	movs	r2, #5
 800263a:	4903      	ldr	r1, [pc, #12]	; (8002648 <sensor_init+0x14>)
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <sensor_init+0x18>)
 800263e:	f001 fbb3 	bl	8003da8 <HAL_ADC_Start_DMA>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000414 	.word	0x20000414
 800264c:	200001f8 	.word	0x200001f8

08002650 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <timer_init+0x10>)
 8002656:	f005 fa0f 	bl	8007a78 <HAL_TIM_Base_Start_IT>
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200003cc 	.word	0x200003cc

08002664 <setTimer2>:

void setTimer2(uint16_t duration){
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <setTimer2+0x2c>)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <setTimer2+0x2c>)
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <setTimer2+0x30>)
 800267a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <setTimer2+0x34>)
 800267e:	2200      	movs	r2, #0
 8002680:	801a      	strh	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	200000de 	.word	0x200000de
 8002694:	200000dc 	.word	0x200000dc
 8002698:	200000da 	.word	0x200000da

0800269c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d116      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026c0:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_TIM_PeriodElapsedCallback+0x40>
				flag_timer2 = 1;
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026d6:	801a      	strh	r2, [r3, #0]
				led7_Scan();
 80026d8:	f7ff fa24 	bl	8001b24 <led7_Scan>
			}
		}

	}
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200000dc 	.word	0x200000dc
 80026e8:	200000da 	.word	0x200000da
 80026ec:	200000de 	.word	0x200000de

080026f0 <delay_us>:
void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void delay_us (uint16_t us)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <delay_us+0x30>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002702:	bf00      	nop
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <delay_us+0x30>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3f9      	bcc.n	8002704 <delay_us+0x14>
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000032c 	.word	0x2000032c

08002724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_MspInit+0x4c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_MspInit+0x4c>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_MspInit+0x4c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_MspInit+0x4c>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_MspInit+0x4c>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_MspInit+0x4c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3c      	ldr	r2, [pc, #240]	; (8002884 <HAL_ADC_MspInit+0x110>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d171      	bne.n	800287a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_ADC_MspInit+0x114>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b34      	ldr	r3, [pc, #208]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a33      	ldr	r2, [pc, #204]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <HAL_ADC_MspInit+0x114>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80027ea:	2307      	movs	r3, #7
 80027ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ee:	2303      	movs	r3, #3
 80027f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4823      	ldr	r0, [pc, #140]	; (800288c <HAL_ADC_MspInit+0x118>)
 80027fe:	f002 fbb5 	bl	8004f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002802:	2303      	movs	r3, #3
 8002804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002806:	2303      	movs	r3, #3
 8002808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	481e      	ldr	r0, [pc, #120]	; (8002890 <HAL_ADC_MspInit+0x11c>)
 8002816:	f002 fba9 	bl	8004f6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_ADC_MspInit+0x120>)
 800281c:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_ADC_MspInit+0x124>)
 800281e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_ADC_MspInit+0x120>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002838:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_ADC_MspInit+0x120>)
 800283c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002840:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002848:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_ADC_MspInit+0x120>)
 800284c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002850:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_ADC_MspInit+0x120>)
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800285e:	480d      	ldr	r0, [pc, #52]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002860:	f001 ff82 	bl	8004768 <HAL_DMA_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800286a:	f7ff fedd 	bl	8002628 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_ADC_MspInit+0x120>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40012000 	.word	0x40012000
 8002888:	40023800 	.word	0x40023800
 800288c:	40020800 	.word	0x40020800
 8002890:	40020400 	.word	0x40020400
 8002894:	200002cc 	.word	0x200002cc
 8002898:	40026410 	.word	0x40026410

0800289c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_I2C_MspInit+0x84>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12b      	bne.n	8002916 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_I2C_MspInit+0x88>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_I2C_MspInit+0x88>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_I2C_MspInit+0x88>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028da:	23c0      	movs	r3, #192	; 0xc0
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028de:	2312      	movs	r3, #18
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e6:	2303      	movs	r3, #3
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ea:	2304      	movs	r3, #4
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	480c      	ldr	r0, [pc, #48]	; (8002928 <HAL_I2C_MspInit+0x8c>)
 80028f6:	f002 fb39 	bl	8004f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_I2C_MspInit+0x88>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_I2C_MspInit+0x88>)
 8002904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_I2C_MspInit+0x88>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40005400 	.word	0x40005400
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400

0800292c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <HAL_SPI_MspInit+0x84>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d12b      	bne.n	80029a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_SPI_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002986:	2338      	movs	r3, #56	; 0x38
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002996:	2305      	movs	r3, #5
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_SPI_MspInit+0x8c>)
 80029a2:	f002 fae3 	bl	8004f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40013000 	.word	0x40013000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020400 	.word	0x40020400

080029bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_TIM_Base_MspInit+0x98>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80029ea:	e02e      	b.n	8002a4a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d116      	bne.n	8002a24 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	201c      	movs	r0, #28
 8002a18:	f001 fe6f 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a1c:	201c      	movs	r0, #28
 8002a1e:	f001 fe88 	bl	8004732 <HAL_NVIC_EnableIRQ>
}
 8002a22:	e012      	b.n	8002a4a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <HAL_TIM_Base_MspInit+0xa0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10d      	bne.n	8002a4a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_TIM_Base_MspInit+0x9c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40001c00 	.word	0x40001c00

08002a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <HAL_TIM_MspPostInit+0x68>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11e      	bne.n	8002ac0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_TIM_MspPostInit+0x6c>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_TIM_MspPostInit+0x6c>)
 8002a8c:	f043 0320 	orr.w	r3, r3, #32
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_TIM_MspPostInit+0x6c>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002ab0:	2309      	movs	r3, #9
 8002ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <HAL_TIM_MspPostInit+0x70>)
 8002abc:	f002 fa56 	bl	8004f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002ac0:	bf00      	nop
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40001c00 	.word	0x40001c00
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40021400 	.word	0x40021400

08002ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	; 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_UART_MspInit+0x94>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d134      	bne.n	8002b60 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_UART_MspInit+0x98>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_UART_MspInit+0x98>)
 8002b00:	f043 0310 	orr.w	r3, r3, #16
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_UART_MspInit+0x98>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_UART_MspInit+0x98>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_UART_MspInit+0x98>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_UART_MspInit+0x98>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b40:	2307      	movs	r3, #7
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4809      	ldr	r0, [pc, #36]	; (8002b70 <HAL_UART_MspInit+0x9c>)
 8002b4c:	f002 fa0e 	bl	8004f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2100      	movs	r1, #0
 8002b54:	2025      	movs	r0, #37	; 0x25
 8002b56:	f001 fdd0 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b5a:	2025      	movs	r0, #37	; 0x25
 8002b5c:	f001 fde9 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b60:	bf00      	nop
 8002b62:	3728      	adds	r7, #40	; 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40011000 	.word	0x40011000
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020000 	.word	0x40020000

08002b74 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_FSMC_MspInit+0x88>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d131      	bne.n	8002bf4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_FSMC_MspInit+0x88>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_FSMC_MspInit+0x8c>)
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_FSMC_MspInit+0x8c>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_FSMC_MspInit+0x8c>)
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002bb2:	f64f 7388 	movw	r3, #65416	; 0xff88
 8002bb6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <HAL_FSMC_MspInit+0x90>)
 8002bce:	f002 f9cd 	bl	8004f6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002bd2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002bd6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002be4:	230c      	movs	r3, #12
 8002be6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4806      	ldr	r0, [pc, #24]	; (8002c08 <HAL_FSMC_MspInit+0x94>)
 8002bee:	f002 f9bd 	bl	8004f6c <HAL_GPIO_Init>
 8002bf2:	e000      	b.n	8002bf6 <HAL_FSMC_MspInit+0x82>
    return;
 8002bf4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	200000e0 	.word	0x200000e0
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40020c00 	.word	0x40020c00

08002c0c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002c14:	f7ff ffae 	bl	8002b74 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <NMI_Handler+0x4>

08002c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <HardFault_Handler+0x4>

08002c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <MemManage_Handler+0x4>

08002c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <BusFault_Handler+0x4>

08002c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <UsageFault_Handler+0x4>

08002c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6c:	f001 f814 	bl	8003c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <TIM2_IRQHandler+0x10>)
 8002c7a:	f005 f88f 	bl	8007d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003cc 	.word	0x200003cc

08002c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <USART1_IRQHandler+0x10>)
 8002c8e:	f005 ffef 	bl	8008c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000288 	.word	0x20000288

08002c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA2_Stream0_IRQHandler+0x10>)
 8002ca2:	f001 fef9 	bl	8004a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200002cc 	.word	0x200002cc

08002cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <SystemInit+0x20>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <SystemInit+0x20>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e025      	b.n	8002d34 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	da06      	bge.n	8002cfe <TP_Write_Byte+0x2a>
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf6:	4813      	ldr	r0, [pc, #76]	; (8002d44 <TP_Write_Byte+0x70>)
 8002cf8:	f002 faec 	bl	80052d4 <HAL_GPIO_WritePin>
 8002cfc:	e005      	b.n	8002d0a <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d04:	480f      	ldr	r0, [pc, #60]	; (8002d44 <TP_Write_Byte+0x70>)
 8002d06:	f002 fae5 	bl	80052d4 <HAL_GPIO_WritePin>
		num<<=1;
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d16:	480c      	ldr	r0, [pc, #48]	; (8002d48 <TP_Write_Byte+0x74>)
 8002d18:	f002 fadc 	bl	80052d4 <HAL_GPIO_WritePin>
		delay_us(1);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7ff fce7 	bl	80026f0 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002d22:	2201      	movs	r2, #1
 8002d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <TP_Write_Byte+0x74>)
 8002d2a:	f002 fad3 	bl	80052d4 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3301      	adds	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b07      	cmp	r3, #7
 8002d38:	d9d6      	bls.n	8002ce8 <TP_Write_Byte+0x14>
	}
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40021800 	.word	0x40021800

08002d4c <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d64:	482f      	ldr	r0, [pc, #188]	; (8002e24 <TP_Read_AD+0xd8>)
 8002d66:	f002 fab5 	bl	80052d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d70:	482d      	ldr	r0, [pc, #180]	; (8002e28 <TP_Read_AD+0xdc>)
 8002d72:	f002 faaf 	bl	80052d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	482a      	ldr	r0, [pc, #168]	; (8002e24 <TP_Read_AD+0xd8>)
 8002d7c:	f002 faaa 	bl	80052d4 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ffa6 	bl	8002cd4 <TP_Write_Byte>
	delay_us(6);
 8002d88:	2006      	movs	r0, #6
 8002d8a:	f7ff fcb1 	bl	80026f0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d94:	4823      	ldr	r0, [pc, #140]	; (8002e24 <TP_Read_AD+0xd8>)
 8002d96:	f002 fa9d 	bl	80052d4 <HAL_GPIO_WritePin>
	delay_us(1);
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7ff fca8 	bl	80026f0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da6:	481f      	ldr	r0, [pc, #124]	; (8002e24 <TP_Read_AD+0xd8>)
 8002da8:	f002 fa94 	bl	80052d4 <HAL_GPIO_WritePin>
	delay_us(1);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7ff fc9f 	bl	80026f0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002db8:	481a      	ldr	r0, [pc, #104]	; (8002e24 <TP_Read_AD+0xd8>)
 8002dba:	f002 fa8b 	bl	80052d4 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e01f      	b.n	8002e04 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8002dc4:	89bb      	ldrh	r3, [r7, #12]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd0:	4814      	ldr	r0, [pc, #80]	; (8002e24 <TP_Read_AD+0xd8>)
 8002dd2:	f002 fa7f 	bl	80052d4 <HAL_GPIO_WritePin>
		delay_us(1);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7ff fc8a 	bl	80026f0 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de2:	4810      	ldr	r0, [pc, #64]	; (8002e24 <TP_Read_AD+0xd8>)
 8002de4:	f002 fa76 	bl	80052d4 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8002de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dec:	480e      	ldr	r0, [pc, #56]	; (8002e28 <TP_Read_AD+0xdc>)
 8002dee:	f002 fa59 	bl	80052a4 <HAL_GPIO_ReadPin>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <TP_Read_AD+0xb2>
 8002df8:	89bb      	ldrh	r3, [r7, #12]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	3301      	adds	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d9dc      	bls.n	8002dc4 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8002e0a:	89bb      	ldrh	r3, [r7, #12]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8002e10:	2201      	movs	r2, #1
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	4803      	ldr	r0, [pc, #12]	; (8002e24 <TP_Read_AD+0xd8>)
 8002e16:	f002 fa5d 	bl	80052d4 <HAL_GPIO_WritePin>
	return(Num);
 8002e1a:	89bb      	ldrh	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021800 	.word	0x40021800
 8002e28:	40020800 	.word	0x40020800

08002e2c <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	83fb      	strh	r3, [r7, #30]
 8002e3e:	e00f      	b.n	8002e60 <TP_Read_XOY+0x34>
 8002e40:	8bfc      	ldrh	r4, [r7, #30]
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff81 	bl	8002d4c <TP_Read_AD>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	0063      	lsls	r3, r4, #1
 8002e50:	f107 0120 	add.w	r1, r7, #32
 8002e54:	440b      	add	r3, r1
 8002e56:	f823 2c14 	strh.w	r2, [r3, #-20]
 8002e5a:	8bfb      	ldrh	r3, [r7, #30]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	83fb      	strh	r3, [r7, #30]
 8002e60:	8bfb      	ldrh	r3, [r7, #30]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d9ec      	bls.n	8002e40 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	83fb      	strh	r3, [r7, #30]
 8002e6a:	e03b      	b.n	8002ee4 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8002e6c:	8bfb      	ldrh	r3, [r7, #30]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	83bb      	strh	r3, [r7, #28]
 8002e72:	e031      	b.n	8002ed8 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8002e74:	8bfb      	ldrh	r3, [r7, #30]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	f107 0220 	add.w	r2, r7, #32
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002e82:	8bbb      	ldrh	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	f107 0120 	add.w	r1, r7, #32
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d91e      	bls.n	8002ed2 <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8002e94:	8bfb      	ldrh	r3, [r7, #30]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	f107 0220 	add.w	r2, r7, #32
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002ea2:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8002ea4:	8bbb      	ldrh	r3, [r7, #28]
 8002ea6:	8bfa      	ldrh	r2, [r7, #30]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	f107 0120 	add.w	r1, r7, #32
 8002eae:	440b      	add	r3, r1
 8002eb0:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8002eb4:	0053      	lsls	r3, r2, #1
 8002eb6:	f107 0220 	add.w	r2, r7, #32
 8002eba:	4413      	add	r3, r2
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8002ec2:	8bbb      	ldrh	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	f107 0220 	add.w	r2, r7, #32
 8002eca:	4413      	add	r3, r2
 8002ecc:	8b3a      	ldrh	r2, [r7, #24]
 8002ece:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8002ed2:	8bbb      	ldrh	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	83bb      	strh	r3, [r7, #28]
 8002ed8:	8bbb      	ldrh	r3, [r7, #28]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d9ca      	bls.n	8002e74 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8002ede:	8bfb      	ldrh	r3, [r7, #30]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	83fb      	strh	r3, [r7, #30]
 8002ee4:	8bfb      	ldrh	r3, [r7, #30]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d9c0      	bls.n	8002e6c <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8002eee:	2301      	movs	r3, #1
 8002ef0:	83fb      	strh	r3, [r7, #30]
 8002ef2:	e00c      	b.n	8002f0e <TP_Read_XOY+0xe2>
 8002ef4:	8bfb      	ldrh	r3, [r7, #30]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	f107 0220 	add.w	r2, r7, #32
 8002efc:	4413      	add	r3, r2
 8002efe:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002f02:	8b7b      	ldrh	r3, [r7, #26]
 8002f04:	4413      	add	r3, r2
 8002f06:	837b      	strh	r3, [r7, #26]
 8002f08:	8bfb      	ldrh	r3, [r7, #30]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	83fb      	strh	r3, [r7, #30]
 8002f0e:	8bfb      	ldrh	r3, [r7, #30]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d9ef      	bls.n	8002ef4 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8002f14:	8b7b      	ldrh	r3, [r7, #26]
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <TP_Read_XOY+0x100>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	833b      	strh	r3, [r7, #24]
	return temp;
 8002f20:	8b3b      	ldrh	r3, [r7, #24]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd90      	pop	{r4, r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	aaaaaaab 	.word	0xaaaaaaab

08002f30 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <TP_Read_XY+0x3c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff74 	bl	8002e2c <TP_Read_XOY>
 8002f44:	4603      	mov	r3, r0
 8002f46:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <TP_Read_XY+0x40>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff6d 	bl	8002e2c <TP_Read_XOY>
 8002f52:	4603      	mov	r3, r0
 8002f54:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	89fa      	ldrh	r2, [r7, #14]
 8002f5a:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	89ba      	ldrh	r2, [r7, #12]
 8002f60:	801a      	strh	r2, [r3, #0]
	return 1;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000040 	.word	0x20000040
 8002f70:	20000041 	.word	0x20000041

08002f74 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8002f7e:	f107 0212 	add.w	r2, r7, #18
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ffd1 	bl	8002f30 <TP_Read_XY>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <TP_Read_XY2+0x28>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e049      	b.n	8003030 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8002f9c:	f107 020e 	add.w	r2, r7, #14
 8002fa0:	f107 0310 	add.w	r3, r7, #16
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ffc2 	bl	8002f30 <TP_Read_XY>
 8002fac:	4603      	mov	r3, r0
 8002fae:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <TP_Read_XY2+0x46>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e03a      	b.n	8003030 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8002fba:	8a3a      	ldrh	r2, [r7, #16]
 8002fbc:	8abb      	ldrh	r3, [r7, #20]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d804      	bhi.n	8002fcc <TP_Read_XY2+0x58>
 8002fc2:	8a3b      	ldrh	r3, [r7, #16]
 8002fc4:	3363      	adds	r3, #99	; 0x63
 8002fc6:	8aba      	ldrh	r2, [r7, #20]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	da08      	bge.n	8002fde <TP_Read_XY2+0x6a>
 8002fcc:	8aba      	ldrh	r2, [r7, #20]
 8002fce:	8a3b      	ldrh	r3, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d82c      	bhi.n	800302e <TP_Read_XY2+0xba>
 8002fd4:	8abb      	ldrh	r3, [r7, #20]
 8002fd6:	3363      	adds	r3, #99	; 0x63
 8002fd8:	8a3a      	ldrh	r2, [r7, #16]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	db27      	blt.n	800302e <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8002fde:	89fa      	ldrh	r2, [r7, #14]
 8002fe0:	8a7b      	ldrh	r3, [r7, #18]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d804      	bhi.n	8002ff0 <TP_Read_XY2+0x7c>
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	3363      	adds	r3, #99	; 0x63
 8002fea:	8a7a      	ldrh	r2, [r7, #18]
 8002fec:	4293      	cmp	r3, r2
 8002fee:	da08      	bge.n	8003002 <TP_Read_XY2+0x8e>
 8002ff0:	8a7a      	ldrh	r2, [r7, #18]
 8002ff2:	89fb      	ldrh	r3, [r7, #14]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d81a      	bhi.n	800302e <TP_Read_XY2+0xba>
 8002ff8:	8a7b      	ldrh	r3, [r7, #18]
 8002ffa:	3363      	adds	r3, #99	; 0x63
 8002ffc:	89fa      	ldrh	r2, [r7, #14]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	db15      	blt.n	800302e <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8003002:	8abb      	ldrh	r3, [r7, #20]
 8003004:	461a      	mov	r2, r3
 8003006:	8a3b      	ldrh	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	0fda      	lsrs	r2, r3, #31
 800300c:	4413      	add	r3, r2
 800300e:	105b      	asrs	r3, r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8003016:	8a7b      	ldrh	r3, [r7, #18]
 8003018:	461a      	mov	r2, r3
 800301a:	89fb      	ldrh	r3, [r7, #14]
 800301c:	4413      	add	r3, r2
 800301e:	0fda      	lsrs	r2, r3, #31
 8003020:	4413      	add	r3, r2
 8003022:	105b      	asrs	r3, r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	801a      	strh	r2, [r3, #0]
		return 1;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <TP_Read_XY2+0xbc>
	}else return 0;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b085      	sub	sp, #20
 800303c:	af02      	add	r7, sp, #8
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
 8003042:	460b      	mov	r3, r1
 8003044:	80bb      	strh	r3, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	3b0c      	subs	r3, #12
 800304e:	b298      	uxth	r0, r3
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	330d      	adds	r3, #13
 8003054:	b29a      	uxth	r2, r3
 8003056:	88bc      	ldrh	r4, [r7, #4]
 8003058:	88b9      	ldrh	r1, [r7, #4]
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	4623      	mov	r3, r4
 8003060:	f7fe f91f 	bl	80012a2 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8003064:	88bb      	ldrh	r3, [r7, #4]
 8003066:	3b0c      	subs	r3, #12
 8003068:	b299      	uxth	r1, r3
 800306a:	88bb      	ldrh	r3, [r7, #4]
 800306c:	330d      	adds	r3, #13
 800306e:	b29c      	uxth	r4, r3
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	88f8      	ldrh	r0, [r7, #6]
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	4623      	mov	r3, r4
 800307a:	f7fe f912 	bl	80012a2 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	3301      	adds	r3, #1
 8003082:	b298      	uxth	r0, r3
 8003084:	88bb      	ldrh	r3, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	4619      	mov	r1, r3
 800308e:	f7fe f8f1 	bl	8001274 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	3b01      	subs	r3, #1
 8003096:	b298      	uxth	r0, r3
 8003098:	88bb      	ldrh	r3, [r7, #4]
 800309a:	3301      	adds	r3, #1
 800309c:	b29b      	uxth	r3, r3
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f7fe f8e7 	bl	8001274 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	3301      	adds	r3, #1
 80030aa:	b298      	uxth	r0, r3
 80030ac:	88bb      	ldrh	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fe f8dd 	bl	8001274 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	3b01      	subs	r3, #1
 80030be:	b298      	uxth	r0, r3
 80030c0:	88bb      	ldrh	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f7fe f8d3 	bl	8001274 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 80030ce:	88f8      	ldrh	r0, [r7, #6]
 80030d0:	88b9      	ldrh	r1, [r7, #4]
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2306      	movs	r3, #6
 80030da:	f7fe fc46 	bl	800196a <lcd_DrawCircle>
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
	...

080030e8 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 80030f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f6:	4843      	ldr	r0, [pc, #268]	; (8003204 <TP_Scan+0x11c>)
 80030f8:	f002 f8d4 	bl	80052a4 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d157      	bne.n	80031b2 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <TP_Scan+0x2a>
 8003108:	493f      	ldr	r1, [pc, #252]	; (8003208 <TP_Scan+0x120>)
 800310a:	4840      	ldr	r0, [pc, #256]	; (800320c <TP_Scan+0x124>)
 800310c:	f7ff ff32 	bl	8002f74 <TP_Read_XY2>
 8003110:	e03c      	b.n	800318c <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8003112:	493d      	ldr	r1, [pc, #244]	; (8003208 <TP_Scan+0x120>)
 8003114:	483d      	ldr	r0, [pc, #244]	; (800320c <TP_Scan+0x124>)
 8003116:	f7ff ff2d 	bl	8002f74 <TP_Read_XY2>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d035      	beq.n	800318c <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8003120:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <TP_Scan+0x128>)
 8003122:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003126:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <TP_Scan+0x128>)
 8003128:	899b      	ldrh	r3, [r3, #12]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <TP_Scan+0x128>)
 8003138:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800314c:	ee17 3a90 	vmov	r3, s15
 8003150:	b29a      	uxth	r2, r3
 8003152:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <TP_Scan+0x128>)
 8003154:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <TP_Scan+0x128>)
 8003158:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800315c:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <TP_Scan+0x128>)
 800315e:	8adb      	ldrh	r3, [r3, #22]
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <TP_Scan+0x128>)
 800316e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003182:	ee17 3a90 	vmov	r3, s15
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b21      	ldr	r3, [pc, #132]	; (8003210 <TP_Scan+0x128>)
 800318a:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <TP_Scan+0x128>)
 800318e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003192:	b25b      	sxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	db2a      	blt.n	80031ee <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <TP_Scan+0x128>)
 800319a:	22c0      	movs	r2, #192	; 0xc0
 800319c:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <TP_Scan+0x128>)
 80031a2:	899a      	ldrh	r2, [r3, #12]
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <TP_Scan+0x128>)
 80031a6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <TP_Scan+0x128>)
 80031aa:	8ada      	ldrh	r2, [r3, #22]
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <TP_Scan+0x128>)
 80031ae:	83da      	strh	r2, [r3, #30]
 80031b0:	e01d      	b.n	80031ee <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <TP_Scan+0x128>)
 80031b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da09      	bge.n	80031d2 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <TP_Scan+0x128>)
 80031c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <TP_Scan+0x128>)
 80031cc:	f883 2020 	strb.w	r2, [r3, #32]
 80031d0:	e00d      	b.n	80031ee <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <TP_Scan+0x128>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <TP_Scan+0x128>)
 80031da:	2200      	movs	r2, #0
 80031dc:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <TP_Scan+0x128>)
 80031e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e4:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <TP_Scan+0x128>)
 80031e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ec:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <TP_Scan+0x128>)
 80031f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031f8:	b2db      	uxtb	r3, r3
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40020800 	.word	0x40020800
 8003208:	20000022 	.word	0x20000022
 800320c:	20000018 	.word	0x20000018
 8003210:	2000000c 	.word	0x2000000c

08003214 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003218:	220e      	movs	r2, #14
 800321a:	4905      	ldr	r1, [pc, #20]	; (8003230 <TP_Save_Adjdata+0x1c>)
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd fe5d 	bl	8000edc <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8003222:	2100      	movs	r1, #0
 8003224:	200e      	movs	r0, #14
 8003226:	f7fd fdf9 	bl	8000e1c <at24c_WriteOneByte>
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000030 	.word	0x20000030

08003234 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800323e:	200e      	movs	r0, #14
 8003240:	f7fd fdd0 	bl	8000de4 <at24c_ReadOneByte>
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800324e:	220e      	movs	r2, #14
 8003250:	4905      	ldr	r1, [pc, #20]	; (8003268 <TP_Get_Adjdata+0x34>)
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fe23 	bl	8000e9e <at24c_Read>
		return 1;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <TP_Get_Adjdata+0x2a>
	}
	return 0;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000030 	.word	0x20000030
 800326c:	00000000 	.word	0x00000000

08003270 <touch_Adjust>:


void touch_Adjust(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003282:	4b61      	ldr	r3, [pc, #388]	; (8003408 <touch_Adjust+0x198>)
 8003284:	881a      	ldrh	r2, [r3, #0]
 8003286:	4b60      	ldr	r3, [pc, #384]	; (8003408 <touch_Adjust+0x198>)
 8003288:	885b      	ldrh	r3, [r3, #2]
 800328a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800328e:	9100      	str	r1, [sp, #0]
 8003290:	2100      	movs	r1, #0
 8003292:	2000      	movs	r0, #0
 8003294:	f7fd ffb8 	bl	8001208 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003298:	2300      	movs	r3, #0
 800329a:	9302      	str	r3, [sp, #8]
 800329c:	2310      	movs	r3, #16
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032aa:	4a58      	ldr	r2, [pc, #352]	; (800340c <touch_Adjust+0x19c>)
 80032ac:	2128      	movs	r1, #40	; 0x28
 80032ae:	2005      	movs	r0, #5
 80032b0:	f7fe fbc8 	bl	8001a44 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80032b4:	2300      	movs	r3, #0
 80032b6:	9302      	str	r3, [sp, #8]
 80032b8:	2310      	movs	r3, #16
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032c6:	4a52      	ldr	r2, [pc, #328]	; (8003410 <touch_Adjust+0x1a0>)
 80032c8:	2141      	movs	r1, #65	; 0x41
 80032ca:	2005      	movs	r0, #5
 80032cc:	f7fe fbba 	bl	8001a44 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 80032d0:	2300      	movs	r3, #0
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	2310      	movs	r3, #16
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032e2:	4a4c      	ldr	r2, [pc, #304]	; (8003414 <touch_Adjust+0x1a4>)
 80032e4:	215a      	movs	r1, #90	; 0x5a
 80032e6:	2005      	movs	r0, #5
 80032e8:	f7fe fbac 	bl	8001a44 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 80032ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80032f0:	2114      	movs	r1, #20
 80032f2:	2014      	movs	r0, #20
 80032f4:	f7ff fea0 	bl	8003038 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 80032f8:	4b47      	ldr	r3, [pc, #284]	; (8003418 <touch_Adjust+0x1a8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8003300:	4b45      	ldr	r3, [pc, #276]	; (8003418 <touch_Adjust+0x1a8>)
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8003308:	2032      	movs	r0, #50	; 0x32
 800330a:	f000 fce5 	bl	8003cd8 <HAL_Delay>
		tp_dev.scan(1);
 800330e:	4b42      	ldr	r3, [pc, #264]	; (8003418 <touch_Adjust+0x1a8>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2001      	movs	r0, #1
 8003314:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8003316:	4b40      	ldr	r3, [pc, #256]	; (8003418 <touch_Adjust+0x1a8>)
 8003318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	f040 835e 	bne.w	80039e2 <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8003326:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <touch_Adjust+0x1a8>)
 8003328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <touch_Adjust+0x1a8>)
 8003334:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8003338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800333c:	4a36      	ldr	r2, [pc, #216]	; (8003418 <touch_Adjust+0x1a8>)
 800333e:	8992      	ldrh	r2, [r2, #12]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003346:	440b      	add	r3, r1
 8003348:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 800334c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003350:	4a31      	ldr	r2, [pc, #196]	; (8003418 <touch_Adjust+0x1a8>)
 8003352:	8ad2      	ldrh	r2, [r2, #22]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800335a:	440b      	add	r3, r1
 800335c:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8003360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003364:	3301      	adds	r3, #1
 8003366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 800336a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800336e:	3b01      	subs	r3, #1
 8003370:	2b03      	cmp	r3, #3
 8003372:	d8c9      	bhi.n	8003308 <touch_Adjust+0x98>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <touch_Adjust+0x10c>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	0800338d 	.word	0x0800338d
 8003380:	080033af 	.word	0x080033af
 8003384:	080033d9 	.word	0x080033d9
 8003388:	0800341d 	.word	0x0800341d
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 800338c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003390:	2114      	movs	r1, #20
 8003392:	2014      	movs	r0, #20
 8003394:	f7ff fe50 	bl	8003038 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <touch_Adjust+0x198>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	3b14      	subs	r3, #20
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033a4:	2114      	movs	r1, #20
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fe46 	bl	8003038 <TP_Drow_Touch_Point>
					break;
 80033ac:	e31a      	b.n	80039e4 <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <touch_Adjust+0x198>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	3b14      	subs	r3, #20
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ba:	2114      	movs	r1, #20
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fe3b 	bl	8003038 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <touch_Adjust+0x198>)
 80033c4:	885b      	ldrh	r3, [r3, #2]
 80033c6:	3b14      	subs	r3, #20
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033ce:	4619      	mov	r1, r3
 80033d0:	2014      	movs	r0, #20
 80033d2:	f7ff fe31 	bl	8003038 <TP_Drow_Touch_Point>
					break;
 80033d6:	e305      	b.n	80039e4 <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <touch_Adjust+0x198>)
 80033da:	885b      	ldrh	r3, [r3, #2]
 80033dc:	3b14      	subs	r3, #20
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033e4:	4619      	mov	r1, r3
 80033e6:	2014      	movs	r0, #20
 80033e8:	f7ff fe26 	bl	8003038 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <touch_Adjust+0x198>)
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	3b14      	subs	r3, #20
 80033f2:	b298      	uxth	r0, r3
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <touch_Adjust+0x198>)
 80033f6:	885b      	ldrh	r3, [r3, #2]
 80033f8:	3b14      	subs	r3, #20
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003400:	4619      	mov	r1, r3
 8003402:	f7ff fe19 	bl	8003038 <TP_Drow_Touch_Point>
					break;
 8003406:	e2ed      	b.n	80039e4 <touch_Adjust+0x774>
 8003408:	20000118 	.word	0x20000118
 800340c:	08009de4 	.word	0x08009de4
 8003410:	08009e00 	.word	0x08009e00
 8003414:	08009e18 	.word	0x08009e18
 8003418:	2000000c 	.word	0x2000000c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 800341c:	883b      	ldrh	r3, [r7, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	88bb      	ldrh	r3, [r7, #4]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bfb8      	it	lt
 8003428:	425b      	neglt	r3, r3
 800342a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	461a      	mov	r2, r3
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	bfb8      	it	lt
 8003438:	425b      	neglt	r3, r3
 800343a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	fb03 f303 	mul.w	r3, r3, r3
 8003442:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	fb03 f303 	mul.w	r3, r3, r3
 800344a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f7fc fffa 	bl	800044c <__aeabi_ui2d>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	ec43 2b10 	vmov	d0, r2, r3
 8003460:	f006 fbc0 	bl	8009be4 <sqrt>
 8003464:	ec53 2b10 	vmov	r2, r3, d0
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fb18 	bl	8000aa0 <__aeabi_d2uiz>
 8003470:	4603      	mov	r3, r0
 8003472:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8003474:	893b      	ldrh	r3, [r7, #8]
 8003476:	461a      	mov	r2, r3
 8003478:	89bb      	ldrh	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bfb8      	it	lt
 8003480:	425b      	neglt	r3, r3
 8003482:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8003484:	897b      	ldrh	r3, [r7, #10]
 8003486:	461a      	mov	r2, r3
 8003488:	89fb      	ldrh	r3, [r7, #14]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bfb8      	it	lt
 8003490:	425b      	neglt	r3, r3
 8003492:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	fb03 f303 	mul.w	r3, r3, r3
 800349a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	fb03 f303 	mul.w	r3, r3, r3
 80034a2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fc ffce 	bl	800044c <__aeabi_ui2d>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	ec43 2b10 	vmov	d0, r2, r3
 80034b8:	f006 fb94 	bl	8009be4 <sqrt>
 80034bc:	ec53 2b10 	vmov	r2, r3, d0
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fd faec 	bl	8000aa0 <__aeabi_d2uiz>
 80034c8:	4603      	mov	r3, r0
 80034ca:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80034cc:	8b7b      	ldrh	r3, [r7, #26]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d6:	8b3b      	ldrh	r3, [r7, #24]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034e4:	ee16 0a90 	vmov	r0, s13
 80034e8:	f7fc ffd2 	bl	8000490 <__aeabi_f2d>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 80034f4:	a384      	add	r3, pc, #528	; (adr r3, 8003708 <touch_Adjust+0x498>)
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034fe:	f7fd fa91 	bl	8000a24 <__aeabi_dcmplt>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <touch_Adjust+0x2b8>
 8003508:	a381      	add	r3, pc, #516	; (adr r3, 8003710 <touch_Adjust+0x4a0>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003512:	f7fd faa5 	bl	8000a60 <__aeabi_dcmpgt>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <touch_Adjust+0x2b8>
 800351c:	8b7b      	ldrh	r3, [r7, #26]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <touch_Adjust+0x2b8>
 8003522:	8b3b      	ldrh	r3, [r7, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d136      	bne.n	8003596 <touch_Adjust+0x326>
					{
						cnt=0;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800352e:	4b7a      	ldr	r3, [pc, #488]	; (8003718 <touch_Adjust+0x4a8>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	3b14      	subs	r3, #20
 8003534:	b298      	uxth	r0, r3
 8003536:	4b78      	ldr	r3, [pc, #480]	; (8003718 <touch_Adjust+0x4a8>)
 8003538:	885b      	ldrh	r3, [r3, #2]
 800353a:	3b14      	subs	r3, #20
 800353c:	b29b      	uxth	r3, r3
 800353e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003542:	4619      	mov	r1, r3
 8003544:	f7ff fd78 	bl	8003038 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003548:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800354c:	2114      	movs	r1, #20
 800354e:	2014      	movs	r0, #20
 8003550:	f7ff fd72 	bl	8003038 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003554:	2300      	movs	r3, #0
 8003556:	9302      	str	r3, [sp, #8]
 8003558:	2310      	movs	r3, #16
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003566:	4a6d      	ldr	r2, [pc, #436]	; (800371c <touch_Adjust+0x4ac>)
 8003568:	2128      	movs	r1, #40	; 0x28
 800356a:	2005      	movs	r0, #5
 800356c:	f7fe fa6a 	bl	8001a44 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003570:	2300      	movs	r3, #0
 8003572:	9302      	str	r3, [sp, #8]
 8003574:	2310      	movs	r3, #16
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003582:	4a67      	ldr	r2, [pc, #412]	; (8003720 <touch_Adjust+0x4b0>)
 8003584:	213c      	movs	r1, #60	; 0x3c
 8003586:	2005      	movs	r0, #5
 8003588:	f7fe fa5c 	bl	8001a44 <lcd_ShowStr>
						HAL_Delay(1000);
 800358c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003590:	f000 fba2 	bl	8003cd8 <HAL_Delay>
 						continue;
 8003594:	e226      	b.n	80039e4 <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003596:	883b      	ldrh	r3, [r7, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bfb8      	it	lt
 80035a2:	425b      	neglt	r3, r3
 80035a4:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	461a      	mov	r2, r3
 80035aa:	897b      	ldrh	r3, [r7, #10]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bfb8      	it	lt
 80035b2:	425b      	neglt	r3, r3
 80035b4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	fb03 f303 	mul.w	r3, r3, r3
 80035bc:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fb03 f303 	mul.w	r3, r3, r3
 80035c4:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc ff3d 	bl	800044c <__aeabi_ui2d>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	ec43 2b10 	vmov	d0, r2, r3
 80035da:	f006 fb03 	bl	8009be4 <sqrt>
 80035de:	ec53 2b10 	vmov	r2, r3, d0
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f7fd fa5b 	bl	8000aa0 <__aeabi_d2uiz>
 80035ea:	4603      	mov	r3, r0
 80035ec:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 80035ee:	88bb      	ldrh	r3, [r7, #4]
 80035f0:	461a      	mov	r2, r3
 80035f2:	89bb      	ldrh	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bfb8      	it	lt
 80035fa:	425b      	neglt	r3, r3
 80035fc:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	461a      	mov	r2, r3
 8003602:	89fb      	ldrh	r3, [r7, #14]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	bfb8      	it	lt
 800360a:	425b      	neglt	r3, r3
 800360c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	fb03 f303 	mul.w	r3, r3, r3
 8003614:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fb03 f303 	mul.w	r3, r3, r3
 800361c:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ff11 	bl	800044c <__aeabi_ui2d>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	ec43 2b10 	vmov	d0, r2, r3
 8003632:	f006 fad7 	bl	8009be4 <sqrt>
 8003636:	ec53 2b10 	vmov	r2, r3, d0
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd fa2f 	bl	8000aa0 <__aeabi_d2uiz>
 8003642:	4603      	mov	r3, r0
 8003644:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003646:	8b7b      	ldrh	r3, [r7, #26]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003650:	8b3b      	ldrh	r3, [r7, #24]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800365e:	ee16 0a90 	vmov	r0, s13
 8003662:	f7fc ff15 	bl	8000490 <__aeabi_f2d>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 800366e:	a326      	add	r3, pc, #152	; (adr r3, 8003708 <touch_Adjust+0x498>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003678:	f7fd f9d4 	bl	8000a24 <__aeabi_dcmplt>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <touch_Adjust+0x426>
 8003682:	a323      	add	r3, pc, #140	; (adr r3, 8003710 <touch_Adjust+0x4a0>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800368c:	f7fd f9e8 	bl	8000a60 <__aeabi_dcmpgt>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d046      	beq.n	8003724 <touch_Adjust+0x4b4>
					{
						cnt=0;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <touch_Adjust+0x4a8>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	3b14      	subs	r3, #20
 80036a2:	b298      	uxth	r0, r3
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <touch_Adjust+0x4a8>)
 80036a6:	885b      	ldrh	r3, [r3, #2]
 80036a8:	3b14      	subs	r3, #20
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7ff fcc1 	bl	8003038 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80036b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036ba:	2114      	movs	r1, #20
 80036bc:	2014      	movs	r0, #20
 80036be:	f7ff fcbb 	bl	8003038 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80036c2:	2300      	movs	r3, #0
 80036c4:	9302      	str	r3, [sp, #8]
 80036c6:	2310      	movs	r3, #16
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036d4:	4a11      	ldr	r2, [pc, #68]	; (800371c <touch_Adjust+0x4ac>)
 80036d6:	2128      	movs	r1, #40	; 0x28
 80036d8:	2005      	movs	r0, #5
 80036da:	f7fe f9b3 	bl	8001a44 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80036de:	2300      	movs	r3, #0
 80036e0:	9302      	str	r3, [sp, #8]
 80036e2:	2310      	movs	r3, #16
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036f0:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <touch_Adjust+0x4b0>)
 80036f2:	213c      	movs	r1, #60	; 0x3c
 80036f4:	2005      	movs	r0, #5
 80036f6:	f7fe f9a5 	bl	8001a44 <lcd_ShowStr>
						HAL_Delay(1000);
 80036fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036fe:	f000 faeb 	bl	8003cd8 <HAL_Delay>
						continue;
 8003702:	e16f      	b.n	80039e4 <touch_Adjust+0x774>
 8003704:	f3af 8000 	nop.w
 8003708:	66666666 	.word	0x66666666
 800370c:	3fee6666 	.word	0x3fee6666
 8003710:	cccccccd 	.word	0xcccccccd
 8003714:	3ff0cccc 	.word	0x3ff0cccc
 8003718:	20000118 	.word	0x20000118
 800371c:	08009e2c 	.word	0x08009e2c
 8003720:	08009e4c 	.word	0x08009e4c
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8003724:	88bb      	ldrh	r3, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bfb8      	it	lt
 8003730:	425b      	neglt	r3, r3
 8003732:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	461a      	mov	r2, r3
 8003738:	897b      	ldrh	r3, [r7, #10]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bfb8      	it	lt
 8003740:	425b      	neglt	r3, r3
 8003742:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	fb03 f303 	mul.w	r3, r3, r3
 800374a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	fb03 f303 	mul.w	r3, r3, r3
 8003752:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc fe76 	bl	800044c <__aeabi_ui2d>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	ec43 2b10 	vmov	d0, r2, r3
 8003768:	f006 fa3c 	bl	8009be4 <sqrt>
 800376c:	ec53 2b10 	vmov	r2, r3, d0
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd f994 	bl	8000aa0 <__aeabi_d2uiz>
 8003778:	4603      	mov	r3, r0
 800377a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 800377c:	883b      	ldrh	r3, [r7, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	89bb      	ldrh	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	bfb8      	it	lt
 8003788:	425b      	neglt	r3, r3
 800378a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	461a      	mov	r2, r3
 8003790:	89fb      	ldrh	r3, [r7, #14]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	bfb8      	it	lt
 8003798:	425b      	neglt	r3, r3
 800379a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	fb03 f303 	mul.w	r3, r3, r3
 80037a2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	fb03 f303 	mul.w	r3, r3, r3
 80037aa:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80037ac:	6a3a      	ldr	r2, [r7, #32]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc fe4a 	bl	800044c <__aeabi_ui2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	ec43 2b10 	vmov	d0, r2, r3
 80037c0:	f006 fa10 	bl	8009be4 <sqrt>
 80037c4:	ec53 2b10 	vmov	r2, r3, d0
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	f7fd f968 	bl	8000aa0 <__aeabi_d2uiz>
 80037d0:	4603      	mov	r3, r0
 80037d2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80037d4:	8b7b      	ldrh	r3, [r7, #26]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037de:	8b3b      	ldrh	r3, [r7, #24]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037ec:	ee16 0a90 	vmov	r0, s13
 80037f0:	f7fc fe4e 	bl	8000490 <__aeabi_f2d>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80037fc:	a383      	add	r3, pc, #524	; (adr r3, 8003a0c <touch_Adjust+0x79c>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003806:	f7fd f90d 	bl	8000a24 <__aeabi_dcmplt>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <touch_Adjust+0x5b4>
 8003810:	a380      	add	r3, pc, #512	; (adr r3, 8003a14 <touch_Adjust+0x7a4>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800381a:	f7fd f921 	bl	8000a60 <__aeabi_dcmpgt>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d036      	beq.n	8003892 <touch_Adjust+0x622>
					{
						cnt=0;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800382a:	4b71      	ldr	r3, [pc, #452]	; (80039f0 <touch_Adjust+0x780>)
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	3b14      	subs	r3, #20
 8003830:	b298      	uxth	r0, r3
 8003832:	4b6f      	ldr	r3, [pc, #444]	; (80039f0 <touch_Adjust+0x780>)
 8003834:	885b      	ldrh	r3, [r3, #2]
 8003836:	3b14      	subs	r3, #20
 8003838:	b29b      	uxth	r3, r3
 800383a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800383e:	4619      	mov	r1, r3
 8003840:	f7ff fbfa 	bl	8003038 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003844:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003848:	2114      	movs	r1, #20
 800384a:	2014      	movs	r0, #20
 800384c:	f7ff fbf4 	bl	8003038 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003850:	2300      	movs	r3, #0
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	2310      	movs	r3, #16
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003862:	4a64      	ldr	r2, [pc, #400]	; (80039f4 <touch_Adjust+0x784>)
 8003864:	2128      	movs	r1, #40	; 0x28
 8003866:	2005      	movs	r0, #5
 8003868:	f7fe f8ec 	bl	8001a44 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800386c:	2300      	movs	r3, #0
 800386e:	9302      	str	r3, [sp, #8]
 8003870:	2310      	movs	r3, #16
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800387e:	4a5e      	ldr	r2, [pc, #376]	; (80039f8 <touch_Adjust+0x788>)
 8003880:	213c      	movs	r1, #60	; 0x3c
 8003882:	2005      	movs	r0, #5
 8003884:	f7fe f8de 	bl	8001a44 <lcd_ShowStr>

						HAL_Delay(1000);
 8003888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800388c:	f000 fa24 	bl	8003cd8 <HAL_Delay>
 							continue;
 8003890:	e0a8      	b.n	80039e4 <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8003892:	4b57      	ldr	r3, [pc, #348]	; (80039f0 <touch_Adjust+0x780>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	3b28      	subs	r3, #40	; 0x28
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038a0:	88bb      	ldrh	r3, [r7, #4]
 80038a2:	461a      	mov	r2, r3
 80038a4:	883b      	ldrh	r3, [r7, #0]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b4:	4b51      	ldr	r3, [pc, #324]	; (80039fc <touch_Adjust+0x78c>)
 80038b6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 80038ba:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <touch_Adjust+0x780>)
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <touch_Adjust+0x78c>)
 80038c8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80038cc:	88bb      	ldrh	r3, [r7, #4]
 80038ce:	461a      	mov	r2, r3
 80038d0:	883b      	ldrh	r3, [r7, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f0:	ee17 3a90 	vmov	r3, s15
 80038f4:	b21a      	sxth	r2, r3
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <touch_Adjust+0x78c>)
 80038f8:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 80038fa:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <touch_Adjust+0x780>)
 80038fc:	885b      	ldrh	r3, [r3, #2]
 80038fe:	3b28      	subs	r3, #40	; 0x28
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003908:	897b      	ldrh	r3, [r7, #10]
 800390a:	461a      	mov	r2, r3
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391c:	4b37      	ldr	r3, [pc, #220]	; (80039fc <touch_Adjust+0x78c>)
 800391e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8003922:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <touch_Adjust+0x780>)
 8003924:	885b      	ldrh	r3, [r3, #2]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800392e:	4b33      	ldr	r3, [pc, #204]	; (80039fc <touch_Adjust+0x78c>)
 8003930:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003934:	897b      	ldrh	r3, [r7, #10]
 8003936:	461a      	mov	r2, r3
 8003938:	887b      	ldrh	r3, [r7, #2]
 800393a:	4413      	add	r3, r2
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003958:	ee17 3a90 	vmov	r3, s15
 800395c:	b21a      	sxth	r2, r3
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <touch_Adjust+0x78c>)
 8003960:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <touch_Adjust+0x780>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	3b14      	subs	r3, #20
 8003968:	b298      	uxth	r0, r3
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <touch_Adjust+0x780>)
 800396c:	885b      	ldrh	r3, [r3, #2]
 800396e:	3b14      	subs	r3, #20
 8003970:	b29b      	uxth	r3, r3
 8003972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003976:	4619      	mov	r1, r3
 8003978:	f7ff fb5e 	bl	8003038 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 800397c:	2300      	movs	r3, #0
 800397e:	9302      	str	r3, [sp, #8]
 8003980:	2310      	movs	r3, #16
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800398e:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <touch_Adjust+0x790>)
 8003990:	2128      	movs	r1, #40	; 0x28
 8003992:	2005      	movs	r0, #5
 8003994:	f7fe f856 	bl	8001a44 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003998:	2300      	movs	r3, #0
 800399a:	9302      	str	r3, [sp, #8]
 800399c:	2310      	movs	r3, #16
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <touch_Adjust+0x794>)
 80039ac:	213c      	movs	r1, #60	; 0x3c
 80039ae:	2005      	movs	r0, #5
 80039b0:	f7fe f848 	bl	8001a44 <lcd_ShowStr>
					HAL_Delay(1000);
 80039b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039b8:	f000 f98e 	bl	8003cd8 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 80039bc:	2300      	movs	r3, #0
 80039be:	9302      	str	r3, [sp, #8]
 80039c0:	2310      	movs	r3, #16
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039ce:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <touch_Adjust+0x798>)
 80039d0:	2128      	movs	r1, #40	; 0x28
 80039d2:	2005      	movs	r0, #5
 80039d4:	f7fe f836 	bl	8001a44 <lcd_ShowStr>
					TP_Save_Adjdata();
 80039d8:	f7ff fc1c 	bl	8003214 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 80039dc:	f7ff fc2a 	bl	8003234 <TP_Get_Adjdata>
					return;
 80039e0:	e001      	b.n	80039e6 <touch_Adjust+0x776>
			}
		}
 80039e2:	bf00      	nop
		HAL_Delay(50);
 80039e4:	e490      	b.n	8003308 <touch_Adjust+0x98>
 	}
}
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	f3af 8000 	nop.w
 80039f0:	20000118 	.word	0x20000118
 80039f4:	08009e2c 	.word	0x08009e2c
 80039f8:	08009e4c 	.word	0x08009e4c
 80039fc:	2000000c 	.word	0x2000000c
 8003a00:	08009e6c 	.word	0x08009e6c
 8003a04:	08009e8c 	.word	0x08009e8c
 8003a08:	08009eac 	.word	0x08009eac
 8003a0c:	66666666 	.word	0x66666666
 8003a10:	3fee6666 	.word	0x3fee6666
 8003a14:	cccccccd 	.word	0xcccccccd
 8003a18:	3ff0cccc 	.word	0x3ff0cccc

08003a1c <touch_init>:

void touch_init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8003a20:	4904      	ldr	r1, [pc, #16]	; (8003a34 <touch_init+0x18>)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <touch_init+0x1c>)
 8003a24:	f7ff fa84 	bl	8002f30 <TP_Read_XY>
	at24c_init();
 8003a28:	f7fd f9d6 	bl	8000dd8 <at24c_init>
	TP_Get_Adjdata();
 8003a2c:	f7ff fc02 	bl	8003234 <TP_Get_Adjdata>
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000022 	.word	0x20000022
 8003a38:	20000018 	.word	0x20000018

08003a3c <uart_init_rs232>:
uint8_t msg[100];

uint8_t receive_buffer1 = 0, receive_buffer2 = 0;
uint8_t check_esp = 0;

void uart_init_rs232(){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003a40:	2201      	movs	r2, #1
 8003a42:	4903      	ldr	r1, [pc, #12]	; (8003a50 <uart_init_rs232+0x14>)
 8003a44:	4803      	ldr	r0, [pc, #12]	; (8003a54 <uart_init_rs232+0x18>)
 8003a46:	f005 f8e2 	bl	8008c0e <HAL_UART_Receive_IT>
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200000e4 	.word	0x200000e4
 8003a54:	20000288 	.word	0x20000288

08003a58 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4905      	ldr	r1, [pc, #20]	; (8003a74 <uart_init_esp+0x1c>)
 8003a60:	4805      	ldr	r0, [pc, #20]	; (8003a78 <uart_init_esp+0x20>)
 8003a62:	f005 f8d4 	bl	8008c0e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8003a66:	2201      	movs	r2, #1
 8003a68:	2120      	movs	r1, #32
 8003a6a:	4804      	ldr	r0, [pc, #16]	; (8003a7c <uart_init_esp+0x24>)
 8003a6c:	f001 fc32 	bl	80052d4 <HAL_GPIO_WritePin>
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200000e5 	.word	0x200000e5
 8003a78:	20000420 	.word	0x20000420
 8003a7c:	40021000 	.word	0x40021000

08003a80 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8003a8c:	887a      	ldrh	r2, [r7, #2]
 8003a8e:	230a      	movs	r3, #10
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4803      	ldr	r0, [pc, #12]	; (8003aa0 <uart_EspSendBytes+0x20>)
 8003a94:	f005 f829 	bl	8008aea <HAL_UART_Transmit>
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000420 	.word	0x20000420

08003aa4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_UART_RxCpltCallback+0x74>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10a      	bne.n	8003acc <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003ab6:	230a      	movs	r3, #10
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4918      	ldr	r1, [pc, #96]	; (8003b1c <HAL_UART_RxCpltCallback+0x78>)
 8003abc:	4818      	ldr	r0, [pc, #96]	; (8003b20 <HAL_UART_RxCpltCallback+0x7c>)
 8003abe:	f005 f814 	bl	8008aea <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4915      	ldr	r1, [pc, #84]	; (8003b1c <HAL_UART_RxCpltCallback+0x78>)
 8003ac6:	4816      	ldr	r0, [pc, #88]	; (8003b20 <HAL_UART_RxCpltCallback+0x7c>)
 8003ac8:	f005 f8a1 	bl	8008c0e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_UART_RxCpltCallback+0x80>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d11b      	bne.n	8003b0e <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_UART_RxCpltCallback+0x84>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b4f      	cmp	r3, #79	; 0x4f
 8003adc:	d103      	bne.n	8003ae6 <HAL_UART_RxCpltCallback+0x42>
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_UART_RxCpltCallback+0x88>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e00e      	b.n	8003b04 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_UART_RxCpltCallback+0x84>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b61      	cmp	r3, #97	; 0x61
 8003aec:	d103      	bne.n	8003af6 <HAL_UART_RxCpltCallback+0x52>
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_UART_RxCpltCallback+0x8c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e006      	b.n	8003b04 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_UART_RxCpltCallback+0x84>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b41      	cmp	r3, #65	; 0x41
 8003afc:	d102      	bne.n	8003b04 <HAL_UART_RxCpltCallback+0x60>
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <HAL_UART_RxCpltCallback+0x8c>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003b04:	2201      	movs	r2, #1
 8003b06:	4908      	ldr	r1, [pc, #32]	; (8003b28 <HAL_UART_RxCpltCallback+0x84>)
 8003b08:	480a      	ldr	r0, [pc, #40]	; (8003b34 <HAL_UART_RxCpltCallback+0x90>)
 8003b0a:	f005 f880 	bl	8008c0e <HAL_UART_Receive_IT>
	}
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40011000 	.word	0x40011000
 8003b1c:	200000e4 	.word	0x200000e4
 8003b20:	20000288 	.word	0x20000288
 8003b24:	40004400 	.word	0x40004400
 8003b28:	200000e5 	.word	0x200000e5
 8003b2c:	200000e6 	.word	0x200000e6
 8003b30:	200000d8 	.word	0x200000d8
 8003b34:	20000420 	.word	0x20000420

08003b38 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <uart_EspCheck+0x1c>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <uart_EspCheck+0x10>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <uart_EspCheck+0x12>
	return 0;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	200000e6 	.word	0x200000e6

08003b58 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <DEC2BCD+0x44>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	08db      	lsrs	r3, r3, #3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	b258      	sxtb	r0, r3
 8003b72:	79fa      	ldrb	r2, [r7, #7]
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <DEC2BCD+0x44>)
 8003b76:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7a:	08d9      	lsrs	r1, r3, #3
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	4303      	orrs	r3, r0
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	cccccccd 	.word	0xcccccccd

08003ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba4:	480d      	ldr	r0, [pc, #52]	; (8003bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ba6:	490e      	ldr	r1, [pc, #56]	; (8003be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ba8:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bac:	e002      	b.n	8003bb4 <LoopCopyDataInit>

08003bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bb2:	3304      	adds	r3, #4

08003bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb8:	d3f9      	bcc.n	8003bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bbc:	4c0b      	ldr	r4, [pc, #44]	; (8003bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bc0:	e001      	b.n	8003bc6 <LoopFillZerobss>

08003bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc4:	3204      	adds	r2, #4

08003bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc8:	d3fb      	bcc.n	8003bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bca:	f7ff f871 	bl	8002cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bce:	f005 ffdd 	bl	8009b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bd2:	f7fe f88b 	bl	8001cec <main>
  bx  lr    
 8003bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003be4:	0800ce74 	.word	0x0800ce74
  ldr r2, =_sbss
 8003be8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8003bec:	20000468 	.word	0x20000468

08003bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf0:	e7fe      	b.n	8003bf0 <ADC_IRQHandler>
	...

08003bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_Init+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <HAL_Init+0x40>)
 8003bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_Init+0x40>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <HAL_Init+0x40>)
 8003c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_Init+0x40>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <HAL_Init+0x40>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f000 fd61 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c22:	200f      	movs	r0, #15
 8003c24:	f000 f808 	bl	8003c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c28:	f7fe fd7c 	bl	8002724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00

08003c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_InitTick+0x54>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_InitTick+0x58>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fd79 	bl	800474e <HAL_SYSTICK_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e00e      	b.n	8003c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b0f      	cmp	r3, #15
 8003c6a:	d80a      	bhi.n	8003c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	f000 fd41 	bl	80046fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c78:	4a06      	ldr	r2, [pc, #24]	; (8003c94 <HAL_InitTick+0x5c>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e000      	b.n	8003c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000008 	.word	0x20000008
 8003c90:	20000048 	.word	0x20000048
 8003c94:	20000044 	.word	0x20000044

08003c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_IncTick+0x20>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_IncTick+0x24>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_IncTick+0x24>)
 8003caa:	6013      	str	r3, [r2, #0]
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000048 	.word	0x20000048
 8003cbc:	20000464 	.word	0x20000464

08003cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_GetTick+0x14>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000464 	.word	0x20000464

08003cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ce0:	f7ff ffee 	bl	8003cc0 <HAL_GetTick>
 8003ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d005      	beq.n	8003cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_Delay+0x44>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cfe:	bf00      	nop
 8003d00:	f7ff ffde 	bl	8003cc0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d8f7      	bhi.n	8003d00 <HAL_Delay+0x28>
  {
  }
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000048 	.word	0x20000048

08003d20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e033      	b.n	8003d9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fd18 	bl	8002774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d66:	f023 0302 	bic.w	r3, r3, #2
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa68 	bl	8004248 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d8e:	e001      	b.n	8003d94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_Start_DMA+0x1e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0e9      	b.n	8003f9a <HAL_ADC_Start_DMA+0x1f2>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d018      	beq.n	8003e0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dec:	4b6d      	ldr	r3, [pc, #436]	; (8003fa4 <HAL_ADC_Start_DMA+0x1fc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6d      	ldr	r2, [pc, #436]	; (8003fa8 <HAL_ADC_Start_DMA+0x200>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0c9a      	lsrs	r2, r3, #18
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e00:	e002      	b.n	8003e08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f9      	bne.n	8003e02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1c:	d107      	bne.n	8003e2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f040 80a1 	bne.w	8003f80 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7c:	d106      	bne.n	8003e8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f023 0206 	bic.w	r2, r3, #6
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
 8003e8a:	e002      	b.n	8003e92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_ADC_Start_DMA+0x204>)
 8003e9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <HAL_ADC_Start_DMA+0x208>)
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	4a42      	ldr	r2, [pc, #264]	; (8003fb4 <HAL_ADC_Start_DMA+0x20c>)
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	4a41      	ldr	r2, [pc, #260]	; (8003fb8 <HAL_ADC_Start_DMA+0x210>)
 8003eb4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ece:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ede:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	334c      	adds	r3, #76	; 0x4c
 8003eea:	4619      	mov	r1, r3
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f000 fce8 	bl	80048c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d12a      	bne.n	8003f56 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <HAL_ADC_Start_DMA+0x214>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d015      	beq.n	8003f36 <HAL_ADC_Start_DMA+0x18e>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <HAL_ADC_Start_DMA+0x218>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d105      	bne.n	8003f20 <HAL_ADC_Start_DMA+0x178>
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_ADC_Start_DMA+0x204>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <HAL_ADC_Start_DMA+0x21c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d136      	bne.n	8003f98 <HAL_ADC_Start_DMA+0x1f0>
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_ADC_Start_DMA+0x204>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d130      	bne.n	8003f98 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d129      	bne.n	8003f98 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e020      	b.n	8003f98 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_ADC_Start_DMA+0x214>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d11b      	bne.n	8003f98 <HAL_ADC_Start_DMA+0x1f0>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d114      	bne.n	8003f98 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	e00b      	b.n	8003f98 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0210 	orr.w	r2, r3, #16
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	f043 0201 	orr.w	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000008 	.word	0x20000008
 8003fa8:	431bde83 	.word	0x431bde83
 8003fac:	40012300 	.word	0x40012300
 8003fb0:	08004441 	.word	0x08004441
 8003fb4:	080044fb 	.word	0x080044fb
 8003fb8:	08004517 	.word	0x08004517
 8003fbc:	40012000 	.word	0x40012000
 8003fc0:	40012100 	.word	0x40012100
 8003fc4:	40012200 	.word	0x40012200

08003fc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1c>
 800401c:	2302      	movs	r3, #2
 800401e:	e105      	b.n	800422c <HAL_ADC_ConfigChannel+0x228>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b09      	cmp	r3, #9
 800402e:	d925      	bls.n	800407c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68d9      	ldr	r1, [r3, #12]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	4613      	mov	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	3b1e      	subs	r3, #30
 8004046:	2207      	movs	r2, #7
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43da      	mvns	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	400a      	ands	r2, r1
 8004054:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68d9      	ldr	r1, [r3, #12]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	4618      	mov	r0, r3
 8004068:	4603      	mov	r3, r0
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4403      	add	r3, r0
 800406e:	3b1e      	subs	r3, #30
 8004070:	409a      	lsls	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	e022      	b.n	80040c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6919      	ldr	r1, [r3, #16]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	2207      	movs	r2, #7
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43da      	mvns	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	400a      	ands	r2, r1
 800409e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6919      	ldr	r1, [r3, #16]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4403      	add	r3, r0
 80040b8:	409a      	lsls	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d824      	bhi.n	8004114 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	3b05      	subs	r3, #5
 80040dc:	221f      	movs	r2, #31
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43da      	mvns	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	400a      	ands	r2, r1
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	3b05      	subs	r3, #5
 8004106:	fa00 f203 	lsl.w	r2, r0, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	635a      	str	r2, [r3, #52]	; 0x34
 8004112:	e04c      	b.n	80041ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d824      	bhi.n	8004166 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	3b23      	subs	r3, #35	; 0x23
 800412e:	221f      	movs	r2, #31
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43da      	mvns	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	400a      	ands	r2, r1
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	4618      	mov	r0, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	3b23      	subs	r3, #35	; 0x23
 8004158:	fa00 f203 	lsl.w	r2, r0, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
 8004164:	e023      	b.n	80041ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	3b41      	subs	r3, #65	; 0x41
 8004178:	221f      	movs	r2, #31
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	400a      	ands	r2, r1
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	4618      	mov	r0, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	3b41      	subs	r3, #65	; 0x41
 80041a2:	fa00 f203 	lsl.w	r2, r0, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_ADC_ConfigChannel+0x234>)
 80041b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <HAL_ADC_ConfigChannel+0x238>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d109      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x1cc>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b12      	cmp	r3, #18
 80041c2:	d105      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_ADC_ConfigChannel+0x238>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d123      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x21e>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d003      	beq.n	80041ea <HAL_ADC_ConfigChannel+0x1e6>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b11      	cmp	r3, #17
 80041e8:	d11b      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d111      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <HAL_ADC_ConfigChannel+0x23c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <HAL_ADC_ConfigChannel+0x240>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	0c9a      	lsrs	r2, r3, #18
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004214:	e002      	b.n	800421c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3b01      	subs	r3, #1
 800421a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f9      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40012300 	.word	0x40012300
 800423c:	40012000 	.word	0x40012000
 8004240:	20000008 	.word	0x20000008
 8004244:	431bde83 	.word	0x431bde83

08004248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004250:	4b79      	ldr	r3, [pc, #484]	; (8004438 <ADC_Init+0x1f0>)
 8004252:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	4a58      	ldr	r2, [pc, #352]	; (800443c <ADC_Init+0x1f4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e00f      	b.n	8004346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0202 	bic.w	r2, r2, #2
 8004354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7e1b      	ldrb	r3, [r3, #24]
 8004360:	005a      	lsls	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	3b01      	subs	r3, #1
 80043a0:	035a      	lsls	r2, r3, #13
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	e007      	b.n	80043bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	051a      	lsls	r2, r3, #20
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043fe:	025a      	lsls	r2, r3, #9
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6899      	ldr	r1, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	029a      	lsls	r2, r3, #10
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40012300 	.word	0x40012300
 800443c:	0f000001 	.word	0x0f000001

08004440 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004456:	2b00      	cmp	r3, #0
 8004458:	d13c      	bne.n	80044d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12b      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004478:	2b00      	cmp	r3, #0
 800447a:	d127      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004494:	2b00      	cmp	r3, #0
 8004496:	d119      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0220 	bic.w	r2, r2, #32
 80044a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff fd7b 	bl	8003fc8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044d2:	e00e      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fd85 	bl	8003ff0 <HAL_ADC_ErrorCallback>
}
 80044e6:	e004      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fd67 	bl	8003fdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2240      	movs	r2, #64	; 0x40
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fd5a 	bl	8003ff0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004560:	4013      	ands	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800456c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004576:	4a04      	ldr	r2, [pc, #16]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	60d3      	str	r3, [r2, #12]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 0307 	and.w	r3, r3, #7
}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	db0b      	blt.n	80045d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	f003 021f 	and.w	r2, r3, #31
 80045c0:	4907      	ldr	r1, [pc, #28]	; (80045e0 <__NVIC_EnableIRQ+0x38>)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2001      	movs	r0, #1
 80045ca:	fa00 f202 	lsl.w	r2, r0, r2
 80045ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db0a      	blt.n	800460e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	490c      	ldr	r1, [pc, #48]	; (8004630 <__NVIC_SetPriority+0x4c>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	440b      	add	r3, r1
 8004608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800460c:	e00a      	b.n	8004624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <__NVIC_SetPriority+0x50>)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3b04      	subs	r3, #4
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	440b      	add	r3, r1
 8004622:	761a      	strb	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000e100 	.word	0xe000e100
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	bf28      	it	cs
 8004656:	2304      	movcs	r3, #4
 8004658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3304      	adds	r3, #4
 800465e:	2b06      	cmp	r3, #6
 8004660:	d902      	bls.n	8004668 <NVIC_EncodePriority+0x30>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3b03      	subs	r3, #3
 8004666:	e000      	b.n	800466a <NVIC_EncodePriority+0x32>
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	f04f 32ff 	mov.w	r2, #4294967295
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	401a      	ands	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004680:	f04f 31ff 	mov.w	r1, #4294967295
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43d9      	mvns	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	4313      	orrs	r3, r2
         );
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b0:	d301      	bcc.n	80046b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b2:	2301      	movs	r3, #1
 80046b4:	e00f      	b.n	80046d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <SysTick_Config+0x40>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046be:	210f      	movs	r1, #15
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f7ff ff8e 	bl	80045e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <SysTick_Config+0x40>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <SysTick_Config+0x40>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff29 	bl	8004544 <__NVIC_SetPriorityGrouping>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800470c:	f7ff ff3e 	bl	800458c <__NVIC_GetPriorityGrouping>
 8004710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff8e 	bl	8004638 <NVIC_EncodePriority>
 800471c:	4602      	mov	r2, r0
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff5d 	bl	80045e4 <__NVIC_SetPriority>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff31 	bl	80045a8 <__NVIC_EnableIRQ>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ffa2 	bl	80046a0 <SysTick_Config>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004774:	f7ff faa4 	bl	8003cc0 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e099      	b.n	80048b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a4:	e00f      	b.n	80047c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047a6:	f7ff fa8b 	bl	8003cc0 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d908      	bls.n	80047c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2203      	movs	r2, #3
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e078      	b.n	80048b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e8      	bne.n	80047a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <HAL_DMA_Init+0x158>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2b04      	cmp	r3, #4
 800481e:	d107      	bne.n	8004830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	4313      	orrs	r3, r2
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b04      	cmp	r3, #4
 8004858:	d117      	bne.n	800488a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb01 	bl	8004e74 <DMA_CheckFifoParam>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2240      	movs	r2, #64	; 0x40
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004886:	2301      	movs	r3, #1
 8004888:	e016      	b.n	80048b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fab8 	bl	8004e08 <DMA_CalcBaseAndBitshift>
 8004898:	4603      	mov	r3, r0
 800489a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	223f      	movs	r2, #63	; 0x3f
 80048a2:	409a      	lsls	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	f010803f 	.word	0xf010803f

080048c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_DMA_Start_IT+0x26>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e040      	b.n	800496c <HAL_DMA_Start_IT+0xa8>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d12f      	bne.n	800495e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa4a 	bl	8004dac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	223f      	movs	r2, #63	; 0x3f
 800491e:	409a      	lsls	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0216 	orr.w	r2, r2, #22
 8004932:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0208 	orr.w	r2, r2, #8
 800494a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e005      	b.n	800496a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004982:	f7ff f99d 	bl	8003cc0 <HAL_GetTick>
 8004986:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d008      	beq.n	80049a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2280      	movs	r2, #128	; 0x80
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e052      	b.n	8004a4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0216 	bic.w	r2, r2, #22
 80049b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695a      	ldr	r2, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <HAL_DMA_Abort+0x62>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0208 	bic.w	r2, r2, #8
 80049e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049f6:	e013      	b.n	8004a20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049f8:	f7ff f962 	bl	8003cc0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d90c      	bls.n	8004a20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2203      	movs	r2, #3
 8004a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e015      	b.n	8004a4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e4      	bne.n	80049f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	223f      	movs	r2, #63	; 0x3f
 8004a34:	409a      	lsls	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d004      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e00c      	b.n	8004a8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2205      	movs	r2, #5
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004aa4:	4b92      	ldr	r3, [pc, #584]	; (8004cf0 <HAL_DMA_IRQHandler+0x258>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a92      	ldr	r2, [pc, #584]	; (8004cf4 <HAL_DMA_IRQHandler+0x25c>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0a9b      	lsrs	r3, r3, #10
 8004ab0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01a      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	2208      	movs	r2, #8
 8004af2:	409a      	lsls	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d012      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	2201      	movs	r2, #1
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	f043 0202 	orr.w	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	2204      	movs	r2, #4
 8004b40:	409a      	lsls	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00b      	beq.n	8004b70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	f043 0204 	orr.w	r2, r3, #4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	2210      	movs	r2, #16
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d043      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d03c      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b92:	2210      	movs	r2, #16
 8004b94:	409a      	lsls	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d018      	beq.n	8004bda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d108      	bne.n	8004bc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d024      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
 8004bc6:	e01f      	b.n	8004c08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
 8004bd8:	e016      	b.n	8004c08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0208 	bic.w	r2, r2, #8
 8004bf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 808e 	beq.w	8004d36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8086 	beq.w	8004d36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	2220      	movs	r2, #32
 8004c30:	409a      	lsls	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d136      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0216 	bic.w	r2, r2, #22
 8004c50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <HAL_DMA_IRQHandler+0x1da>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0208 	bic.w	r2, r2, #8
 8004c80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	223f      	movs	r2, #63	; 0x3f
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d07d      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
        }
        return;
 8004cae:	e078      	b.n	8004da2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01c      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d030      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	e02b      	b.n	8004d36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d027      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
 8004cee:	e022      	b.n	8004d36 <HAL_DMA_IRQHandler+0x29e>
 8004cf0:	20000008 	.word	0x20000008
 8004cf4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10f      	bne.n	8004d26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0210 	bic.w	r2, r2, #16
 8004d14:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d032      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d022      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2205      	movs	r2, #5
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d307      	bcc.n	8004d7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f2      	bne.n	8004d62 <HAL_DMA_IRQHandler+0x2ca>
 8004d7c:	e000      	b.n	8004d80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d7e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
 8004da0:	e000      	b.n	8004da4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004da2:	bf00      	nop
    }
  }
}
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop

08004dac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d108      	bne.n	8004dec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dea:	e007      	b.n	8004dfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	3b10      	subs	r3, #16
 8004e18:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <DMA_CalcBaseAndBitshift+0x64>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <DMA_CalcBaseAndBitshift+0x68>)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d909      	bls.n	8004e4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	1d1a      	adds	r2, r3, #4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	659a      	str	r2, [r3, #88]	; 0x58
 8004e48:	e007      	b.n	8004e5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	aaaaaaab 	.word	0xaaaaaaab
 8004e70:	0800ce5c 	.word	0x0800ce5c

08004e74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d11f      	bne.n	8004ece <DMA_CheckFifoParam+0x5a>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d856      	bhi.n	8004f42 <DMA_CheckFifoParam+0xce>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <DMA_CheckFifoParam+0x28>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004ebf 	.word	0x08004ebf
 8004ea4:	08004ead 	.word	0x08004ead
 8004ea8:	08004f43 	.word	0x08004f43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d046      	beq.n	8004f46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ebc:	e043      	b.n	8004f46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ec6:	d140      	bne.n	8004f4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ecc:	e03d      	b.n	8004f4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	d121      	bne.n	8004f1c <DMA_CheckFifoParam+0xa8>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d837      	bhi.n	8004f4e <DMA_CheckFifoParam+0xda>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <DMA_CheckFifoParam+0x70>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004efb 	.word	0x08004efb
 8004eec:	08004ef5 	.word	0x08004ef5
 8004ef0:	08004f0d 	.word	0x08004f0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef8:	e030      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d025      	beq.n	8004f52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0a:	e022      	b.n	8004f52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f14:	d11f      	bne.n	8004f56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f1a:	e01c      	b.n	8004f56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d903      	bls.n	8004f2a <DMA_CheckFifoParam+0xb6>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d003      	beq.n	8004f30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f28:	e018      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2e:	e015      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f40:	e00b      	b.n	8004f5a <DMA_CheckFifoParam+0xe6>
      break;
 8004f42:	bf00      	nop
 8004f44:	e00a      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f46:	bf00      	nop
 8004f48:	e008      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f4a:	bf00      	nop
 8004f4c:	e006      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <DMA_CheckFifoParam+0xe8>
      break;
 8004f5a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b089      	sub	sp, #36	; 0x24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	e16b      	b.n	8005260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f88:	2201      	movs	r2, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	f040 815a 	bne.w	800525a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d005      	beq.n	8004fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d130      	bne.n	8005020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	2203      	movs	r2, #3
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 0201 	and.w	r2, r3, #1
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	2b03      	cmp	r3, #3
 800502a:	d017      	beq.n	800505c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	2203      	movs	r2, #3
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d123      	bne.n	80050b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	08da      	lsrs	r2, r3, #3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3208      	adds	r2, #8
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	220f      	movs	r2, #15
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	08da      	lsrs	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3208      	adds	r2, #8
 80050aa:	69b9      	ldr	r1, [r7, #24]
 80050ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	2203      	movs	r2, #3
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4013      	ands	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0203 	and.w	r2, r3, #3
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80b4 	beq.w	800525a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	4b60      	ldr	r3, [pc, #384]	; (8005278 <HAL_GPIO_Init+0x30c>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	4a5f      	ldr	r2, [pc, #380]	; (8005278 <HAL_GPIO_Init+0x30c>)
 80050fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005100:	6453      	str	r3, [r2, #68]	; 0x44
 8005102:	4b5d      	ldr	r3, [pc, #372]	; (8005278 <HAL_GPIO_Init+0x30c>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800510e:	4a5b      	ldr	r2, [pc, #364]	; (800527c <HAL_GPIO_Init+0x310>)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	3302      	adds	r3, #2
 8005116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	220f      	movs	r2, #15
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a52      	ldr	r2, [pc, #328]	; (8005280 <HAL_GPIO_Init+0x314>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d02b      	beq.n	8005192 <HAL_GPIO_Init+0x226>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a51      	ldr	r2, [pc, #324]	; (8005284 <HAL_GPIO_Init+0x318>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d025      	beq.n	800518e <HAL_GPIO_Init+0x222>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a50      	ldr	r2, [pc, #320]	; (8005288 <HAL_GPIO_Init+0x31c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01f      	beq.n	800518a <HAL_GPIO_Init+0x21e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a4f      	ldr	r2, [pc, #316]	; (800528c <HAL_GPIO_Init+0x320>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d019      	beq.n	8005186 <HAL_GPIO_Init+0x21a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a4e      	ldr	r2, [pc, #312]	; (8005290 <HAL_GPIO_Init+0x324>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_GPIO_Init+0x216>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a4d      	ldr	r2, [pc, #308]	; (8005294 <HAL_GPIO_Init+0x328>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00d      	beq.n	800517e <HAL_GPIO_Init+0x212>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a4c      	ldr	r2, [pc, #304]	; (8005298 <HAL_GPIO_Init+0x32c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <HAL_GPIO_Init+0x20e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a4b      	ldr	r2, [pc, #300]	; (800529c <HAL_GPIO_Init+0x330>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_GPIO_Init+0x20a>
 8005172:	2307      	movs	r3, #7
 8005174:	e00e      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005176:	2308      	movs	r3, #8
 8005178:	e00c      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800517a:	2306      	movs	r3, #6
 800517c:	e00a      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800517e:	2305      	movs	r3, #5
 8005180:	e008      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005182:	2304      	movs	r3, #4
 8005184:	e006      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005186:	2303      	movs	r3, #3
 8005188:	e004      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800518a:	2302      	movs	r3, #2
 800518c:	e002      	b.n	8005194 <HAL_GPIO_Init+0x228>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_GPIO_Init+0x228>
 8005192:	2300      	movs	r3, #0
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	f002 0203 	and.w	r2, r2, #3
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	4093      	lsls	r3, r2
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a4:	4935      	ldr	r1, [pc, #212]	; (800527c <HAL_GPIO_Init+0x310>)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	3302      	adds	r3, #2
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b2:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <HAL_GPIO_Init+0x334>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051d6:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <HAL_GPIO_Init+0x334>)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051dc:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <HAL_GPIO_Init+0x334>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005206:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_GPIO_Init+0x334>)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005254:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <HAL_GPIO_Init+0x334>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	f67f ae90 	bls.w	8004f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	40013800 	.word	0x40013800
 8005280:	40020000 	.word	0x40020000
 8005284:	40020400 	.word	0x40020400
 8005288:	40020800 	.word	0x40020800
 800528c:	40020c00 	.word	0x40020c00
 8005290:	40021000 	.word	0x40021000
 8005294:	40021400 	.word	0x40021400
 8005298:	40021800 	.word	0x40021800
 800529c:	40021c00 	.word	0x40021c00
 80052a0:	40013c00 	.word	0x40013c00

080052a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
 80052c0:	e001      	b.n	80052c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
 80052e0:	4613      	mov	r3, r2
 80052e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052e4:	787b      	ldrb	r3, [r7, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052f0:	e003      	b.n	80052fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	041a      	lsls	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	619a      	str	r2, [r3, #24]
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005318:	887a      	ldrh	r2, [r7, #2]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4013      	ands	r3, r2
 800531e:	041a      	lsls	r2, r3, #16
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	43d9      	mvns	r1, r3
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	400b      	ands	r3, r1
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	619a      	str	r2, [r3, #24]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e12b      	b.n	80055a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fd fa9a 	bl	800289c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2224      	movs	r2, #36	; 0x24
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800538e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800539e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053a0:	f001 fd06 	bl	8006db0 <HAL_RCC_GetPCLK1Freq>
 80053a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4a81      	ldr	r2, [pc, #516]	; (80055b0 <HAL_I2C_Init+0x274>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d807      	bhi.n	80053c0 <HAL_I2C_Init+0x84>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a80      	ldr	r2, [pc, #512]	; (80055b4 <HAL_I2C_Init+0x278>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	bf94      	ite	ls
 80053b8:	2301      	movls	r3, #1
 80053ba:	2300      	movhi	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e006      	b.n	80053ce <HAL_I2C_Init+0x92>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a7d      	ldr	r2, [pc, #500]	; (80055b8 <HAL_I2C_Init+0x27c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	bf94      	ite	ls
 80053c8:	2301      	movls	r3, #1
 80053ca:	2300      	movhi	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0e7      	b.n	80055a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a78      	ldr	r2, [pc, #480]	; (80055bc <HAL_I2C_Init+0x280>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0c9b      	lsrs	r3, r3, #18
 80053e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a6a      	ldr	r2, [pc, #424]	; (80055b0 <HAL_I2C_Init+0x274>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d802      	bhi.n	8005410 <HAL_I2C_Init+0xd4>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	3301      	adds	r3, #1
 800540e:	e009      	b.n	8005424 <HAL_I2C_Init+0xe8>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	4a69      	ldr	r2, [pc, #420]	; (80055c0 <HAL_I2C_Init+0x284>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	099b      	lsrs	r3, r3, #6
 8005422:	3301      	adds	r3, #1
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	430b      	orrs	r3, r1
 800542a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005436:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	495c      	ldr	r1, [pc, #368]	; (80055b0 <HAL_I2C_Init+0x274>)
 8005440:	428b      	cmp	r3, r1
 8005442:	d819      	bhi.n	8005478 <HAL_I2C_Init+0x13c>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1e59      	subs	r1, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005458:	400b      	ands	r3, r1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_I2C_Init+0x138>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1e59      	subs	r1, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	fbb1 f3f3 	udiv	r3, r1, r3
 800546c:	3301      	adds	r3, #1
 800546e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005472:	e051      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 8005474:	2304      	movs	r3, #4
 8005476:	e04f      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d111      	bne.n	80054a4 <HAL_I2C_Init+0x168>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1e58      	subs	r0, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6859      	ldr	r1, [r3, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	440b      	add	r3, r1
 800548e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005492:	3301      	adds	r3, #1
 8005494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e012      	b.n	80054ca <HAL_I2C_Init+0x18e>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1e58      	subs	r0, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	0099      	lsls	r1, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ba:	3301      	adds	r3, #1
 80054bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Init+0x196>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e022      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10e      	bne.n	80054f8 <HAL_I2C_Init+0x1bc>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1e58      	subs	r0, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	440b      	add	r3, r1
 80054e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ec:	3301      	adds	r3, #1
 80054ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f6:	e00f      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1e58      	subs	r0, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	0099      	lsls	r1, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	fbb0 f3f3 	udiv	r3, r0, r3
 800550e:	3301      	adds	r3, #1
 8005510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	6809      	ldr	r1, [r1, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005546:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6911      	ldr	r1, [r2, #16]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68d2      	ldr	r2, [r2, #12]
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	430b      	orrs	r3, r1
 800555a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	000186a0 	.word	0x000186a0
 80055b4:	001e847f 	.word	0x001e847f
 80055b8:	003d08ff 	.word	0x003d08ff
 80055bc:	431bde83 	.word	0x431bde83
 80055c0:	10624dd3 	.word	0x10624dd3

080055c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	4608      	mov	r0, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	461a      	mov	r2, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	817b      	strh	r3, [r7, #10]
 80055d6:	460b      	mov	r3, r1
 80055d8:	813b      	strh	r3, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055de:	f7fe fb6f 	bl	8003cc0 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	f040 80d9 	bne.w	80057a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2319      	movs	r3, #25
 80055f8:	2201      	movs	r2, #1
 80055fa:	496d      	ldr	r1, [pc, #436]	; (80057b0 <HAL_I2C_Mem_Write+0x1ec>)
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 fdad 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005608:	2302      	movs	r3, #2
 800560a:	e0cc      	b.n	80057a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_I2C_Mem_Write+0x56>
 8005616:	2302      	movs	r3, #2
 8005618:	e0c5      	b.n	80057a6 <HAL_I2C_Mem_Write+0x1e2>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b01      	cmp	r3, #1
 800562e:	d007      	beq.n	8005640 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800564e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2221      	movs	r2, #33	; 0x21
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2240      	movs	r2, #64	; 0x40
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a4d      	ldr	r2, [pc, #308]	; (80057b4 <HAL_I2C_Mem_Write+0x1f0>)
 8005680:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005682:	88f8      	ldrh	r0, [r7, #6]
 8005684:	893a      	ldrh	r2, [r7, #8]
 8005686:	8979      	ldrh	r1, [r7, #10]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	4603      	mov	r3, r0
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fbe4 	bl	8005e60 <I2C_RequestMemoryWrite>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d052      	beq.n	8005744 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e081      	b.n	80057a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fe2e 	bl	8006308 <I2C_WaitOnTXEFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00d      	beq.n	80056ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d107      	bne.n	80056ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e06b      	b.n	80057a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b04      	cmp	r3, #4
 800570a:	d11b      	bne.n	8005744 <HAL_I2C_Mem_Write+0x180>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005710:	2b00      	cmp	r3, #0
 8005712:	d017      	beq.n	8005744 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1aa      	bne.n	80056a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fe1a 	bl	800638a <I2C_WaitOnBTFFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b04      	cmp	r3, #4
 8005762:	d107      	bne.n	8005774 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e016      	b.n	80057a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	00100002 	.word	0x00100002
 80057b4:	ffff0000 	.word	0xffff0000

080057b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	4608      	mov	r0, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	817b      	strh	r3, [r7, #10]
 80057ca:	460b      	mov	r3, r1
 80057cc:	813b      	strh	r3, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057d2:	f7fe fa75 	bl	8003cc0 <HAL_GetTick>
 80057d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	f040 8208 	bne.w	8005bf6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	2319      	movs	r3, #25
 80057ec:	2201      	movs	r2, #1
 80057ee:	497b      	ldr	r1, [pc, #492]	; (80059dc <HAL_I2C_Mem_Read+0x224>)
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fcb3 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
 80057fe:	e1fb      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_I2C_Mem_Read+0x56>
 800580a:	2302      	movs	r3, #2
 800580c:	e1f4      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d007      	beq.n	8005834 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005842:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2222      	movs	r2, #34	; 0x22
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a5b      	ldr	r2, [pc, #364]	; (80059e0 <HAL_I2C_Mem_Read+0x228>)
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005876:	88f8      	ldrh	r0, [r7, #6]
 8005878:	893a      	ldrh	r2, [r7, #8]
 800587a:	8979      	ldrh	r1, [r7, #10]
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4603      	mov	r3, r0
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fb80 	bl	8005f8c <I2C_RequestMemoryRead>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1b0      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d113      	bne.n	80058c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589e:	2300      	movs	r3, #0
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e184      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d11b      	bne.n	8005906 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e164      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590a:	2b02      	cmp	r3, #2
 800590c:	d11b      	bne.n	8005946 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	e144      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800595c:	e138      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	2b03      	cmp	r3, #3
 8005964:	f200 80f1 	bhi.w	8005b4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596c:	2b01      	cmp	r3, #1
 800596e:	d123      	bne.n	80059b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fd49 	bl	800640c <I2C_WaitOnRXNEFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e139      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059b6:	e10b      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d14e      	bne.n	8005a5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c6:	2200      	movs	r2, #0
 80059c8:	4906      	ldr	r1, [pc, #24]	; (80059e4 <HAL_I2C_Mem_Read+0x22c>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fbc6 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e10e      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
 80059da:	bf00      	nop
 80059dc:	00100002 	.word	0x00100002
 80059e0:	ffff0000 	.word	0xffff0000
 80059e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a5c:	e0b8      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2200      	movs	r2, #0
 8005a66:	4966      	ldr	r1, [pc, #408]	; (8005c00 <HAL_I2C_Mem_Read+0x448>)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fb77 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0bf      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	494f      	ldr	r1, [pc, #316]	; (8005c00 <HAL_I2C_Mem_Read+0x448>)
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fb49 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e091      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b48:	e042      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fc5c 	bl	800640c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e04c      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d118      	bne.n	8005bd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f47f aec2 	bne.w	800595e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	; 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	00010004 	.word	0x00010004

08005c04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	460b      	mov	r3, r1
 8005c12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005c14:	f7fe f854 	bl	8003cc0 <HAL_GetTick>
 8005c18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	f040 8111 	bne.w	8005e4e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	2319      	movs	r3, #25
 8005c32:	2201      	movs	r2, #1
 8005c34:	4988      	ldr	r1, [pc, #544]	; (8005e58 <HAL_I2C_IsDeviceReady+0x254>)
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fa90 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
 8005c44:	e104      	b.n	8005e50 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_I2C_IsDeviceReady+0x50>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e0fd      	b.n	8005e50 <HAL_I2C_IsDeviceReady+0x24c>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d007      	beq.n	8005c7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2224      	movs	r2, #36	; 0x24
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4a70      	ldr	r2, [pc, #448]	; (8005e5c <HAL_I2C_IsDeviceReady+0x258>)
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fa4e 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00d      	beq.n	8005ce2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd4:	d103      	bne.n	8005cde <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e0b6      	b.n	8005e50 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ce2:	897b      	ldrh	r3, [r7, #10]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cf0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005cf2:	f7fd ffe5 	bl	8003cc0 <HAL_GetTick>
 8005cf6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2301      	moveq	r3, #1
 8005d20:	2300      	movne	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d26:	e025      	b.n	8005d74 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d28:	f7fd ffca 	bl	8003cc0 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <HAL_I2C_IsDeviceReady+0x13a>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	22a0      	movs	r2, #160	; 0xa0
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	bf0c      	ite	eq
 8005d54:	2301      	moveq	r3, #1
 8005d56:	2300      	movne	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2ba0      	cmp	r3, #160	; 0xa0
 8005d7e:	d005      	beq.n	8005d8c <HAL_I2C_IsDeviceReady+0x188>
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <HAL_I2C_IsDeviceReady+0x188>
 8005d86:	7dbb      	ldrb	r3, [r7, #22]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0cd      	beq.n	8005d28 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d129      	bne.n	8005df6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	2319      	movs	r3, #25
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4921      	ldr	r1, [pc, #132]	; (8005e58 <HAL_I2C_IsDeviceReady+0x254>)
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f9c2 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e036      	b.n	8005e50 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e02c      	b.n	8005e50 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e04:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e0e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	2319      	movs	r3, #25
 8005e16:	2201      	movs	r2, #1
 8005e18:	490f      	ldr	r1, [pc, #60]	; (8005e58 <HAL_I2C_IsDeviceReady+0x254>)
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f99e 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e012      	b.n	8005e50 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	f4ff af32 	bcc.w	8005c9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	00100002 	.word	0x00100002
 8005e5c:	ffff0000 	.word	0xffff0000

08005e60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	4608      	mov	r0, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	817b      	strh	r3, [r7, #10]
 8005e72:	460b      	mov	r3, r1
 8005e74:	813b      	strh	r3, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f960 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00d      	beq.n	8005ebe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb0:	d103      	bne.n	8005eba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e05f      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ebe:	897b      	ldrh	r3, [r7, #10]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ecc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	492d      	ldr	r1, [pc, #180]	; (8005f88 <I2C_RequestMemoryWrite+0x128>)
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f998 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e04c      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efc:	6a39      	ldr	r1, [r7, #32]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fa02 	bl	8006308 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d107      	bne.n	8005f22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e02b      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f2c:	893b      	ldrh	r3, [r7, #8]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	e021      	b.n	8005f7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f38:	893b      	ldrh	r3, [r7, #8]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	6a39      	ldr	r1, [r7, #32]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f9dc 	bl	8006308 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d107      	bne.n	8005f6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e005      	b.n	8005f7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f72:	893b      	ldrh	r3, [r7, #8]
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	00010002 	.word	0x00010002

08005f8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	4608      	mov	r0, r1
 8005f96:	4611      	mov	r1, r2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	817b      	strh	r3, [r7, #10]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	813b      	strh	r3, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f8c2 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fec:	d103      	bne.n	8005ff6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0aa      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ffa:	897b      	ldrh	r3, [r7, #10]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	4952      	ldr	r1, [pc, #328]	; (8006158 <I2C_RequestMemoryRead+0x1cc>)
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f8fa 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e097      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	6a39      	ldr	r1, [r7, #32]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f964 	bl	8006308 <I2C_WaitOnTXEFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b04      	cmp	r3, #4
 800604c:	d107      	bne.n	800605e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e076      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d105      	bne.n	8006074 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	611a      	str	r2, [r3, #16]
 8006072:	e021      	b.n	80060b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	b29b      	uxth	r3, r3
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006084:	6a39      	ldr	r1, [r7, #32]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f93e 	bl	8006308 <I2C_WaitOnTXEFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00d      	beq.n	80060ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b04      	cmp	r3, #4
 8006098:	d107      	bne.n	80060aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e050      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060ae:	893b      	ldrh	r3, [r7, #8]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	6a39      	ldr	r1, [r7, #32]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f923 	bl	8006308 <I2C_WaitOnTXEFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d107      	bne.n	80060e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e035      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f82b 	bl	800615c <I2C_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00d      	beq.n	8006128 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611a:	d103      	bne.n	8006124 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e013      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006128:	897b      	ldrh	r3, [r7, #10]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	4906      	ldr	r1, [pc, #24]	; (8006158 <I2C_RequestMemoryRead+0x1cc>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f863 	bl	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	00010002 	.word	0x00010002

0800615c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	4613      	mov	r3, r2
 800616a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800616c:	e025      	b.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d021      	beq.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fd fda3 	bl	8003cc0 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e023      	b.n	8006202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d10d      	bne.n	80061e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	43da      	mvns	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4013      	ands	r3, r2
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	e00c      	b.n	80061fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf0c      	ite	eq
 80061f2:	2301      	moveq	r3, #1
 80061f4:	2300      	movne	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d0b6      	beq.n	800616e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006218:	e051      	b.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d123      	bne.n	8006272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006242:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f043 0204 	orr.w	r2, r3, #4
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e046      	b.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d021      	beq.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627a:	f7fd fd21 	bl	8003cc0 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d302      	bcc.n	8006290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d116      	bne.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e020      	b.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10c      	bne.n	80062e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	43da      	mvns	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4013      	ands	r3, r2
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	e00b      	b.n	80062fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	43da      	mvns	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d18d      	bne.n	800621a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006314:	e02d      	b.n	8006372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f8ce 	bl	80064b8 <I2C_IsAcknowledgeFailed>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e02d      	b.n	8006382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d021      	beq.n	8006372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fd fcc7 	bl	8003cc0 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d116      	bne.n	8006372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f043 0220 	orr.w	r2, r3, #32
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e007      	b.n	8006382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637c:	2b80      	cmp	r3, #128	; 0x80
 800637e:	d1ca      	bne.n	8006316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006396:	e02d      	b.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f88d 	bl	80064b8 <I2C_IsAcknowledgeFailed>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e02d      	b.n	8006404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d021      	beq.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b0:	f7fd fc86 	bl	8003cc0 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e007      	b.n	8006404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d1ca      	bne.n	8006398 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006418:	e042      	b.n	80064a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b10      	cmp	r3, #16
 8006426:	d119      	bne.n	800645c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0210 	mvn.w	r2, #16
 8006430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e029      	b.n	80064b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645c:	f7fd fc30 	bl	8003cc0 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d116      	bne.n	80064a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e007      	b.n	80064b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d1b5      	bne.n	800641a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ce:	d11b      	bne.n	8006508 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	f043 0204 	orr.w	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e264      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d075      	beq.n	8006622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006536:	4ba3      	ldr	r3, [pc, #652]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b04      	cmp	r3, #4
 8006540:	d00c      	beq.n	800655c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006542:	4ba0      	ldr	r3, [pc, #640]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800654a:	2b08      	cmp	r3, #8
 800654c:	d112      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800654e:	4b9d      	ldr	r3, [pc, #628]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655a:	d10b      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655c:	4b99      	ldr	r3, [pc, #612]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05b      	beq.n	8006620 <HAL_RCC_OscConfig+0x108>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d157      	bne.n	8006620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e23f      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d106      	bne.n	800658c <HAL_RCC_OscConfig+0x74>
 800657e:	4b91      	ldr	r3, [pc, #580]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a90      	ldr	r2, [pc, #576]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e01d      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x98>
 8006596:	4b8b      	ldr	r3, [pc, #556]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a8a      	ldr	r2, [pc, #552]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800659c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	4b88      	ldr	r3, [pc, #544]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a87      	ldr	r2, [pc, #540]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e00b      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 80065b0:	4b84      	ldr	r3, [pc, #528]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a83      	ldr	r2, [pc, #524]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b81      	ldr	r3, [pc, #516]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a80      	ldr	r2, [pc, #512]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d013      	beq.n	80065f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fd fb76 	bl	8003cc0 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fd fb72 	bl	8003cc0 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b64      	cmp	r3, #100	; 0x64
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e204      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0xc0>
 80065f6:	e014      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fd fb62 	bl	8003cc0 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006600:	f7fd fb5e 	bl	8003cc0 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	; 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e1f0      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006612:	4b6c      	ldr	r3, [pc, #432]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0xe8>
 800661e:	e000      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d063      	beq.n	80066f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800662e:	4b65      	ldr	r3, [pc, #404]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663a:	4b62      	ldr	r3, [pc, #392]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006642:	2b08      	cmp	r3, #8
 8006644:	d11c      	bne.n	8006680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006646:	4b5f      	ldr	r3, [pc, #380]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d116      	bne.n	8006680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006652:	4b5c      	ldr	r3, [pc, #368]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_RCC_OscConfig+0x152>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d001      	beq.n	800666a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e1c4      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666a:	4b56      	ldr	r3, [pc, #344]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4952      	ldr	r1, [pc, #328]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	4313      	orrs	r3, r2
 800667c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800667e:	e03a      	b.n	80066f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006688:	4b4f      	ldr	r3, [pc, #316]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fd fb17 	bl	8003cc0 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006696:	f7fd fb13 	bl	8003cc0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e1a5      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a8:	4b46      	ldr	r3, [pc, #280]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b4:	4b43      	ldr	r3, [pc, #268]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4940      	ldr	r1, [pc, #256]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]
 80066c8:	e015      	b.n	80066f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ca:	4b3f      	ldr	r3, [pc, #252]	; (80067c8 <HAL_RCC_OscConfig+0x2b0>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d0:	f7fd faf6 	bl	8003cc0 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d8:	f7fd faf2 	bl	8003cc0 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e184      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ea:	4b36      	ldr	r3, [pc, #216]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f0      	bne.n	80066d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d030      	beq.n	8006764 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d016      	beq.n	8006738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800670a:	4b30      	ldr	r3, [pc, #192]	; (80067cc <HAL_RCC_OscConfig+0x2b4>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7fd fad6 	bl	8003cc0 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006718:	f7fd fad2 	bl	8003cc0 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e164      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800672c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x200>
 8006736:	e015      	b.n	8006764 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006738:	4b24      	ldr	r3, [pc, #144]	; (80067cc <HAL_RCC_OscConfig+0x2b4>)
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800673e:	f7fd fabf 	bl	8003cc0 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006746:	f7fd fabb 	bl	8003cc0 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e14d      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006758:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800675a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f0      	bne.n	8006746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80a0 	beq.w	80068b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	4a0e      	ldr	r2, [pc, #56]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6413      	str	r3, [r2, #64]	; 0x40
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_RCC_OscConfig+0x2ac>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800679e:	2301      	movs	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d121      	bne.n	80067f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <HAL_RCC_OscConfig+0x2b8>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ba:	f7fd fa81 	bl	8003cc0 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c0:	e011      	b.n	80067e6 <HAL_RCC_OscConfig+0x2ce>
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	42470e80 	.word	0x42470e80
 80067d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d4:	f7fd fa74 	bl	8003cc0 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e106      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e6:	4b85      	ldr	r3, [pc, #532]	; (80069fc <HAL_RCC_OscConfig+0x4e4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d106      	bne.n	8006808 <HAL_RCC_OscConfig+0x2f0>
 80067fa:	4b81      	ldr	r3, [pc, #516]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a80      	ldr	r2, [pc, #512]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
 8006806:	e01c      	b.n	8006842 <HAL_RCC_OscConfig+0x32a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b05      	cmp	r3, #5
 800680e:	d10c      	bne.n	800682a <HAL_RCC_OscConfig+0x312>
 8006810:	4b7b      	ldr	r3, [pc, #492]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a7a      	ldr	r2, [pc, #488]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006816:	f043 0304 	orr.w	r3, r3, #4
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
 800681c:	4b78      	ldr	r3, [pc, #480]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a77      	ldr	r2, [pc, #476]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
 8006828:	e00b      	b.n	8006842 <HAL_RCC_OscConfig+0x32a>
 800682a:	4b75      	ldr	r3, [pc, #468]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	4a74      	ldr	r2, [pc, #464]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	6713      	str	r3, [r2, #112]	; 0x70
 8006836:	4b72      	ldr	r3, [pc, #456]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	4a71      	ldr	r2, [pc, #452]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 800683c:	f023 0304 	bic.w	r3, r3, #4
 8006840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d015      	beq.n	8006876 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fd fa39 	bl	8003cc0 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006850:	e00a      	b.n	8006868 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fd fa35 	bl	8003cc0 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e0c5      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006868:	4b65      	ldr	r3, [pc, #404]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0ee      	beq.n	8006852 <HAL_RCC_OscConfig+0x33a>
 8006874:	e014      	b.n	80068a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006876:	f7fd fa23 	bl	8003cc0 <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800687c:	e00a      	b.n	8006894 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800687e:	f7fd fa1f 	bl	8003cc0 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f241 3288 	movw	r2, #5000	; 0x1388
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e0af      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006894:	4b5a      	ldr	r3, [pc, #360]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1ee      	bne.n	800687e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a6:	4b56      	ldr	r3, [pc, #344]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	4a55      	ldr	r2, [pc, #340]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 809b 	beq.w	80069f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068bc:	4b50      	ldr	r3, [pc, #320]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d05c      	beq.n	8006982 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d141      	bne.n	8006954 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d0:	4b4c      	ldr	r3, [pc, #304]	; (8006a04 <HAL_RCC_OscConfig+0x4ec>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d6:	f7fd f9f3 	bl	8003cc0 <HAL_GetTick>
 80068da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068de:	f7fd f9ef 	bl	8003cc0 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e081      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f0:	4b43      	ldr	r3, [pc, #268]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f0      	bne.n	80068de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	019b      	lsls	r3, r3, #6
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	3b01      	subs	r3, #1
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	061b      	lsls	r3, r3, #24
 8006920:	4937      	ldr	r1, [pc, #220]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006922:	4313      	orrs	r3, r2
 8006924:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006926:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <HAL_RCC_OscConfig+0x4ec>)
 8006928:	2201      	movs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd f9c8 	bl	8003cc0 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006934:	f7fd f9c4 	bl	8003cc0 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e056      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006946:	4b2e      	ldr	r3, [pc, #184]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f0      	beq.n	8006934 <HAL_RCC_OscConfig+0x41c>
 8006952:	e04e      	b.n	80069f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006954:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <HAL_RCC_OscConfig+0x4ec>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695a:	f7fd f9b1 	bl	8003cc0 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006962:	f7fd f9ad 	bl	8003cc0 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e03f      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006974:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <HAL_RCC_OscConfig+0x44a>
 8006980:	e037      	b.n	80069f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d101      	bne.n	800698e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e032      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800698e:	4b1c      	ldr	r3, [pc, #112]	; (8006a00 <HAL_RCC_OscConfig+0x4e8>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d028      	beq.n	80069ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d121      	bne.n	80069ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d11a      	bne.n	80069ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069be:	4013      	ands	r3, r2
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d111      	bne.n	80069ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	3b01      	subs	r3, #1
 80069d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069da:	429a      	cmp	r2, r3
 80069dc:	d107      	bne.n	80069ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d001      	beq.n	80069f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40007000 	.word	0x40007000
 8006a00:	40023800 	.word	0x40023800
 8006a04:	42470060 	.word	0x42470060

08006a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0cc      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a1c:	4b68      	ldr	r3, [pc, #416]	; (8006bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d90c      	bls.n	8006a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a2a:	4b65      	ldr	r3, [pc, #404]	; (8006bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a32:	4b63      	ldr	r3, [pc, #396]	; (8006bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d001      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0b8      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d020      	beq.n	8006a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a5c:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	4a58      	ldr	r2, [pc, #352]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a74:	4b53      	ldr	r3, [pc, #332]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	4a52      	ldr	r2, [pc, #328]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a80:	4b50      	ldr	r3, [pc, #320]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	494d      	ldr	r1, [pc, #308]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d044      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d107      	bne.n	8006ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa6:	4b47      	ldr	r3, [pc, #284]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d119      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e07f      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d107      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ac6:	4b3f      	ldr	r3, [pc, #252]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e06f      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e067      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ae6:	4b37      	ldr	r3, [pc, #220]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f023 0203 	bic.w	r2, r3, #3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	4934      	ldr	r1, [pc, #208]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006af8:	f7fd f8e2 	bl	8003cc0 <HAL_GetTick>
 8006afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006afe:	e00a      	b.n	8006b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b00:	f7fd f8de 	bl	8003cc0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e04f      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b16:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 020c 	and.w	r2, r3, #12
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d1eb      	bne.n	8006b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b28:	4b25      	ldr	r3, [pc, #148]	; (8006bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d20c      	bcs.n	8006b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b36:	4b22      	ldr	r3, [pc, #136]	; (8006bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3e:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e032      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b5c:	4b19      	ldr	r3, [pc, #100]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	4916      	ldr	r1, [pc, #88]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b7a:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	490e      	ldr	r1, [pc, #56]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b8e:	f000 f821 	bl	8006bd4 <HAL_RCC_GetSysClockFreq>
 8006b92:	4602      	mov	r2, r0
 8006b94:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	091b      	lsrs	r3, r3, #4
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	490a      	ldr	r1, [pc, #40]	; (8006bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba0:	5ccb      	ldrb	r3, [r1, r3]
 8006ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <HAL_RCC_ClockConfig+0x1c4>)
 8006ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fd f842 	bl	8003c38 <HAL_InitTick>

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40023c00 	.word	0x40023c00
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	0800ce44 	.word	0x0800ce44
 8006bcc:	20000008 	.word	0x20000008
 8006bd0:	20000044 	.word	0x20000044

08006bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	2300      	movs	r3, #0
 8006be6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bec:	4b67      	ldr	r3, [pc, #412]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 030c 	and.w	r3, r3, #12
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d00d      	beq.n	8006c14 <HAL_RCC_GetSysClockFreq+0x40>
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	f200 80bd 	bhi.w	8006d78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_RCC_GetSysClockFreq+0x34>
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d003      	beq.n	8006c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c06:	e0b7      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c08:	4b61      	ldr	r3, [pc, #388]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c0a:	60bb      	str	r3, [r7, #8]
       break;
 8006c0c:	e0b7      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c0e:	4b61      	ldr	r3, [pc, #388]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006c10:	60bb      	str	r3, [r7, #8]
      break;
 8006c12:	e0b4      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c14:	4b5d      	ldr	r3, [pc, #372]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c1e:	4b5b      	ldr	r3, [pc, #364]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d04d      	beq.n	8006cc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2a:	4b58      	ldr	r3, [pc, #352]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	099b      	lsrs	r3, r3, #6
 8006c30:	461a      	mov	r2, r3
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	ea02 0800 	and.w	r8, r2, r0
 8006c42:	ea03 0901 	and.w	r9, r3, r1
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	014b      	lsls	r3, r1, #5
 8006c54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c58:	0142      	lsls	r2, r0, #5
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	ebb0 0008 	subs.w	r0, r0, r8
 8006c62:	eb61 0109 	sbc.w	r1, r1, r9
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	018b      	lsls	r3, r1, #6
 8006c70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c74:	0182      	lsls	r2, r0, #6
 8006c76:	1a12      	subs	r2, r2, r0
 8006c78:	eb63 0301 	sbc.w	r3, r3, r1
 8006c7c:	f04f 0000 	mov.w	r0, #0
 8006c80:	f04f 0100 	mov.w	r1, #0
 8006c84:	00d9      	lsls	r1, r3, #3
 8006c86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c8a:	00d0      	lsls	r0, r2, #3
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	eb12 0208 	adds.w	r2, r2, r8
 8006c94:	eb43 0309 	adc.w	r3, r3, r9
 8006c98:	f04f 0000 	mov.w	r0, #0
 8006c9c:	f04f 0100 	mov.w	r1, #0
 8006ca0:	0259      	lsls	r1, r3, #9
 8006ca2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006ca6:	0250      	lsls	r0, r2, #9
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4610      	mov	r0, r2
 8006cae:	4619      	mov	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	f7f9 ff12 	bl	8000ae0 <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e04a      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc6:	4b31      	ldr	r3, [pc, #196]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006cd6:	f04f 0100 	mov.w	r1, #0
 8006cda:	ea02 0400 	and.w	r4, r2, r0
 8006cde:	ea03 0501 	and.w	r5, r3, r1
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	014b      	lsls	r3, r1, #5
 8006cf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006cf4:	0142      	lsls	r2, r0, #5
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	1b00      	subs	r0, r0, r4
 8006cfc:	eb61 0105 	sbc.w	r1, r1, r5
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	018b      	lsls	r3, r1, #6
 8006d0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d0e:	0182      	lsls	r2, r0, #6
 8006d10:	1a12      	subs	r2, r2, r0
 8006d12:	eb63 0301 	sbc.w	r3, r3, r1
 8006d16:	f04f 0000 	mov.w	r0, #0
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	00d9      	lsls	r1, r3, #3
 8006d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d24:	00d0      	lsls	r0, r2, #3
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	1912      	adds	r2, r2, r4
 8006d2c:	eb45 0303 	adc.w	r3, r5, r3
 8006d30:	f04f 0000 	mov.w	r0, #0
 8006d34:	f04f 0100 	mov.w	r1, #0
 8006d38:	0299      	lsls	r1, r3, #10
 8006d3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d3e:	0290      	lsls	r0, r2, #10
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4610      	mov	r0, r2
 8006d46:	4619      	mov	r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	f7f9 fec6 	bl	8000ae0 <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4613      	mov	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	3301      	adds	r3, #1
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	60bb      	str	r3, [r7, #8]
      break;
 8006d76:	e002      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d7a:	60bb      	str	r3, [r7, #8]
      break;
 8006d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	00f42400 	.word	0x00f42400
 8006d94:	007a1200 	.word	0x007a1200

08006d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d9c:	4b03      	ldr	r3, [pc, #12]	; (8006dac <HAL_RCC_GetHCLKFreq+0x14>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20000008 	.word	0x20000008

08006db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006db4:	f7ff fff0 	bl	8006d98 <HAL_RCC_GetHCLKFreq>
 8006db8:	4602      	mov	r2, r0
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	0a9b      	lsrs	r3, r3, #10
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	4903      	ldr	r1, [pc, #12]	; (8006dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dc6:	5ccb      	ldrb	r3, [r1, r3]
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	0800ce54 	.word	0x0800ce54

08006dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ddc:	f7ff ffdc 	bl	8006d98 <HAL_RCC_GetHCLKFreq>
 8006de0:	4602      	mov	r2, r0
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	0b5b      	lsrs	r3, r3, #13
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	4903      	ldr	r1, [pc, #12]	; (8006dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dee:	5ccb      	ldrb	r3, [r1, r3]
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	0800ce54 	.word	0x0800ce54

08006e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e07b      	b.n	8006f0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d108      	bne.n	8006e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e22:	d009      	beq.n	8006e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	61da      	str	r2, [r3, #28]
 8006e2a:	e005      	b.n	8006e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb fd6a 	bl	800292c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	431a      	orrs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebc:	ea42 0103 	orr.w	r1, r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	f003 0104 	and.w	r1, r3, #4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	f003 0210 	and.w	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b088      	sub	sp, #32
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_SPI_Transmit+0x22>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e126      	b.n	8007182 <HAL_SPI_Transmit+0x270>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3c:	f7fc fec0 	bl	8003cc0 <HAL_GetTick>
 8006f40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f42:	88fb      	ldrh	r3, [r7, #6]
 8006f44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d002      	beq.n	8006f58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f52:	2302      	movs	r3, #2
 8006f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f56:	e10b      	b.n	8007170 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_SPI_Transmit+0x52>
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f68:	e102      	b.n	8007170 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb0:	d10f      	bne.n	8006fd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b40      	cmp	r3, #64	; 0x40
 8006fde:	d007      	beq.n	8006ff0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff8:	d14b      	bne.n	8007092 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_SPI_Transmit+0xf6>
 8007002:	8afb      	ldrh	r3, [r7, #22]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d13e      	bne.n	8007086 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	881a      	ldrh	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	1c9a      	adds	r2, r3, #2
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800702c:	e02b      	b.n	8007086 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b02      	cmp	r3, #2
 800703a:	d112      	bne.n	8007062 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	881a      	ldrh	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704c:	1c9a      	adds	r2, r3, #2
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007060:	e011      	b.n	8007086 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007062:	f7fc fe2d 	bl	8003cc0 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d803      	bhi.n	800707a <HAL_SPI_Transmit+0x168>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007078:	d102      	bne.n	8007080 <HAL_SPI_Transmit+0x16e>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007084:	e074      	b.n	8007170 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1ce      	bne.n	800702e <HAL_SPI_Transmit+0x11c>
 8007090:	e04c      	b.n	800712c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <HAL_SPI_Transmit+0x18e>
 800709a:	8afb      	ldrh	r3, [r7, #22]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d140      	bne.n	8007122 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070c6:	e02c      	b.n	8007122 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d113      	bne.n	80070fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	7812      	ldrb	r2, [r2, #0]
 80070e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80070fc:	e011      	b.n	8007122 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070fe:	f7fc fddf 	bl	8003cc0 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d803      	bhi.n	8007116 <HAL_SPI_Transmit+0x204>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d102      	bne.n	800711c <HAL_SPI_Transmit+0x20a>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007120:	e026      	b.n	8007170 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1cd      	bne.n	80070c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fbcb 	bl	80078cc <SPI_EndRxTxTransaction>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800714a:	2300      	movs	r3, #0
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	613b      	str	r3, [r7, #16]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e000      	b.n	8007170 <HAL_SPI_Transmit+0x25e>
  }

error:
 800716e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007180:	7ffb      	ldrb	r3, [r7, #31]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b088      	sub	sp, #32
 800718e:	af02      	add	r7, sp, #8
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	603b      	str	r3, [r7, #0]
 8007196:	4613      	mov	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a6:	d112      	bne.n	80071ce <HAL_SPI_Receive+0x44>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10e      	bne.n	80071ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2204      	movs	r2, #4
 80071b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071b8:	88fa      	ldrh	r2, [r7, #6]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	4613      	mov	r3, r2
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f8f1 	bl	80073ac <HAL_SPI_TransmitReceive>
 80071ca:	4603      	mov	r3, r0
 80071cc:	e0ea      	b.n	80073a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_SPI_Receive+0x52>
 80071d8:	2302      	movs	r3, #2
 80071da:	e0e3      	b.n	80073a4 <HAL_SPI_Receive+0x21a>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071e4:	f7fc fd6c 	bl	8003cc0 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d002      	beq.n	80071fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
 80071f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071fa:	e0ca      	b.n	8007392 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_SPI_Receive+0x7e>
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d102      	bne.n	800720e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800720c:	e0c1      	b.n	8007392 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2204      	movs	r2, #4
 8007212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	88fa      	ldrh	r2, [r7, #6]
 800722c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007254:	d10f      	bne.n	8007276 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007274:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d007      	beq.n	8007294 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007292:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d162      	bne.n	8007362 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800729c:	e02e      	b.n	80072fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d115      	bne.n	80072d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f103 020c 	add.w	r2, r3, #12
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072d6:	e011      	b.n	80072fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d8:	f7fc fcf2 	bl	8003cc0 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d803      	bhi.n	80072f0 <HAL_SPI_Receive+0x166>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Receive+0x16c>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072fa:	e04a      	b.n	8007392 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1cb      	bne.n	800729e <HAL_SPI_Receive+0x114>
 8007306:	e031      	b.n	800736c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	d113      	bne.n	800733e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	b292      	uxth	r2, r2
 8007322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	1c9a      	adds	r2, r3, #2
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800733c:	e011      	b.n	8007362 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800733e:	f7fc fcbf 	bl	8003cc0 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d803      	bhi.n	8007356 <HAL_SPI_Receive+0x1cc>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d102      	bne.n	800735c <HAL_SPI_Receive+0x1d2>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007360:	e017      	b.n	8007392 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1cd      	bne.n	8007308 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fa45 	bl	8007800 <SPI_EndRxTransaction>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	75fb      	strb	r3, [r7, #23]
 800738e:	e000      	b.n	8007392 <HAL_SPI_Receive+0x208>
  }

error :
 8007390:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	; 0x30
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073ba:	2301      	movs	r3, #1
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x26>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e18a      	b.n	80076e8 <HAL_SPI_TransmitReceive+0x33c>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073da:	f7fc fc71 	bl	8003cc0 <HAL_GetTick>
 80073de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073f0:	887b      	ldrh	r3, [r7, #2]
 80073f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d00f      	beq.n	800741c <HAL_SPI_TransmitReceive+0x70>
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007402:	d107      	bne.n	8007414 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <HAL_SPI_TransmitReceive+0x68>
 800740c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007410:	2b04      	cmp	r3, #4
 8007412:	d003      	beq.n	800741c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007414:	2302      	movs	r3, #2
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800741a:	e15b      	b.n	80076d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <HAL_SPI_TransmitReceive+0x82>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <HAL_SPI_TransmitReceive+0x82>
 8007428:	887b      	ldrh	r3, [r7, #2]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007434:	e14e      	b.n	80076d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b04      	cmp	r3, #4
 8007440:	d003      	beq.n	800744a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2205      	movs	r2, #5
 8007446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	887a      	ldrh	r2, [r7, #2]
 800745a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	887a      	ldrh	r2, [r7, #2]
 8007460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	887a      	ldrh	r2, [r7, #2]
 800746c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	887a      	ldrh	r2, [r7, #2]
 8007472:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d007      	beq.n	800749e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a6:	d178      	bne.n	800759a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_SPI_TransmitReceive+0x10a>
 80074b0:	8b7b      	ldrh	r3, [r7, #26]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d166      	bne.n	8007584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	881a      	ldrh	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	1c9a      	adds	r2, r3, #2
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074da:	e053      	b.n	8007584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d11b      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x176>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d016      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x176>
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d113      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	1c9a      	adds	r2, r3, #2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b01      	cmp	r3, #1
 800752e:	d119      	bne.n	8007564 <HAL_SPI_TransmitReceive+0x1b8>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d014      	beq.n	8007564 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	b292      	uxth	r2, r2
 8007546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	1c9a      	adds	r2, r3, #2
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007560:	2301      	movs	r3, #1
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007564:	f7fc fbac 	bl	8003cc0 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007570:	429a      	cmp	r2, r3
 8007572:	d807      	bhi.n	8007584 <HAL_SPI_TransmitReceive+0x1d8>
 8007574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d003      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007582:	e0a7      	b.n	80076d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1a6      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x130>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1a1      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x130>
 8007598:	e07c      	b.n	8007694 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x1fc>
 80075a2:	8b7b      	ldrh	r3, [r7, #26]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d16b      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ce:	e057      	b.n	8007680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d11c      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x26c>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d017      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x26c>
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d114      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d119      	bne.n	800765a <HAL_SPI_TransmitReceive+0x2ae>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d014      	beq.n	800765a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007656:	2301      	movs	r3, #1
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800765a:	f7fc fb31 	bl	8003cc0 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007666:	429a      	cmp	r2, r3
 8007668:	d803      	bhi.n	8007672 <HAL_SPI_TransmitReceive+0x2c6>
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d102      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x2cc>
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800767e:	e029      	b.n	80076d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1a2      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x224>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d19d      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 f917 	bl	80078cc <SPI_EndRxTxTransaction>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d006      	beq.n	80076b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2220      	movs	r2, #32
 80076ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80076b0:	e010      	b.n	80076d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	e000      	b.n	80076d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3730      	adds	r7, #48	; 0x30
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007700:	f7fc fade 	bl	8003cc0 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	1a9b      	subs	r3, r3, r2
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	4413      	add	r3, r2
 800770e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007710:	f7fc fad6 	bl	8003cc0 <HAL_GetTick>
 8007714:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007716:	4b39      	ldr	r3, [pc, #228]	; (80077fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	015b      	lsls	r3, r3, #5
 800771c:	0d1b      	lsrs	r3, r3, #20
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	fb02 f303 	mul.w	r3, r2, r3
 8007724:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007726:	e054      	b.n	80077d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772e:	d050      	beq.n	80077d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007730:	f7fc fac6 	bl	8003cc0 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	429a      	cmp	r2, r3
 800773e:	d902      	bls.n	8007746 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d13d      	bne.n	80077c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007754:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800775e:	d111      	bne.n	8007784 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007768:	d004      	beq.n	8007774 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007772:	d107      	bne.n	8007784 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800778c:	d10f      	bne.n	80077ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e017      	b.n	80077f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	4013      	ands	r3, r2
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	429a      	cmp	r2, r3
 80077e0:	bf0c      	ite	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	2300      	movne	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d19b      	bne.n	8007728 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000008 	.word	0x20000008

08007800 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007814:	d111      	bne.n	800783a <SPI_EndRxTransaction+0x3a>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781e:	d004      	beq.n	800782a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007828:	d107      	bne.n	800783a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007838:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007842:	d12a      	bne.n	800789a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784c:	d012      	beq.n	8007874 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2200      	movs	r2, #0
 8007856:	2180      	movs	r1, #128	; 0x80
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff ff49 	bl	80076f0 <SPI_WaitFlagStateUntilTimeout>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d02d      	beq.n	80078c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e026      	b.n	80078c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	2101      	movs	r1, #1
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f7ff ff36 	bl	80076f0 <SPI_WaitFlagStateUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01a      	beq.n	80078c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788e:	f043 0220 	orr.w	r2, r3, #32
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e013      	b.n	80078c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2200      	movs	r2, #0
 80078a2:	2101      	movs	r1, #1
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f7ff ff23 	bl	80076f0 <SPI_WaitFlagStateUntilTimeout>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d007      	beq.n	80078c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b4:	f043 0220 	orr.w	r2, r3, #32
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e000      	b.n	80078c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078d8:	4b1b      	ldr	r3, [pc, #108]	; (8007948 <SPI_EndRxTxTransaction+0x7c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1b      	ldr	r2, [pc, #108]	; (800794c <SPI_EndRxTxTransaction+0x80>)
 80078de:	fba2 2303 	umull	r2, r3, r2, r3
 80078e2:	0d5b      	lsrs	r3, r3, #21
 80078e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f6:	d112      	bne.n	800791e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2200      	movs	r2, #0
 8007900:	2180      	movs	r1, #128	; 0x80
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7ff fef4 	bl	80076f0 <SPI_WaitFlagStateUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d016      	beq.n	800793c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007912:	f043 0220 	orr.w	r2, r3, #32
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e00f      	b.n	800793e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	3b01      	subs	r3, #1
 8007928:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d0f2      	beq.n	800791e <SPI_EndRxTxTransaction+0x52>
 8007938:	e000      	b.n	800793c <SPI_EndRxTxTransaction+0x70>
        break;
 800793a:	bf00      	nop
  }

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000008 	.word	0x20000008
 800794c:	165e9f81 	.word	0x165e9f81

08007950 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e034      	b.n	80079d0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7fb f946 	bl	8002c0c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3308      	adds	r3, #8
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f002 f828 	bl	80099e0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	461a      	mov	r2, r3
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	f002 f872 	bl	8009a84 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6858      	ldr	r0, [r3, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	f002 f8a7 	bl	8009b00 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	6892      	ldr	r2, [r2, #8]
 80079ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	6892      	ldr	r2, [r2, #8]
 80079c6:	f041 0101 	orr.w	r1, r1, #1
 80079ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e041      	b.n	8007a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fa ffdc 	bl	80029bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f000 fc7a 	bl	8008310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d001      	beq.n	8007a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e04e      	b.n	8007b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a23      	ldr	r2, [pc, #140]	; (8007b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d022      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x80>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d01d      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x80>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1f      	ldr	r2, [pc, #124]	; (8007b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d018      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x80>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1e      	ldr	r2, [pc, #120]	; (8007b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d013      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x80>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1c      	ldr	r2, [pc, #112]	; (8007b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00e      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x80>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1b      	ldr	r2, [pc, #108]	; (8007b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x80>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a19      	ldr	r2, [pc, #100]	; (8007b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0x80>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a18      	ldr	r2, [pc, #96]	; (8007b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d111      	bne.n	8007b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d010      	beq.n	8007b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1a:	e007      	b.n	8007b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	40010400 	.word	0x40010400
 8007b50:	40014000 	.word	0x40014000
 8007b54:	40001800 	.word	0x40001800

08007b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e041      	b.n	8007bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f839 	bl	8007bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f000 fbba 	bl	8008310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
	...

08007c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d109      	bne.n	8007c30 <HAL_TIM_PWM_Start+0x24>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	bf14      	ite	ne
 8007c28:	2301      	movne	r3, #1
 8007c2a:	2300      	moveq	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	e022      	b.n	8007c76 <HAL_TIM_PWM_Start+0x6a>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d109      	bne.n	8007c4a <HAL_TIM_PWM_Start+0x3e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	bf14      	ite	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	2300      	moveq	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	e015      	b.n	8007c76 <HAL_TIM_PWM_Start+0x6a>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d109      	bne.n	8007c64 <HAL_TIM_PWM_Start+0x58>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	bf14      	ite	ne
 8007c5c:	2301      	movne	r3, #1
 8007c5e:	2300      	moveq	r3, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	e008      	b.n	8007c76 <HAL_TIM_PWM_Start+0x6a>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	bf14      	ite	ne
 8007c70:	2301      	movne	r3, #1
 8007c72:	2300      	moveq	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e07c      	b.n	8007d78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d104      	bne.n	8007c8e <HAL_TIM_PWM_Start+0x82>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c8c:	e013      	b.n	8007cb6 <HAL_TIM_PWM_Start+0xaa>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d104      	bne.n	8007c9e <HAL_TIM_PWM_Start+0x92>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c9c:	e00b      	b.n	8007cb6 <HAL_TIM_PWM_Start+0xaa>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d104      	bne.n	8007cae <HAL_TIM_PWM_Start+0xa2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cac:	e003      	b.n	8007cb6 <HAL_TIM_PWM_Start+0xaa>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fe10 	bl	80088e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a2d      	ldr	r2, [pc, #180]	; (8007d80 <HAL_TIM_PWM_Start+0x174>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d004      	beq.n	8007cd8 <HAL_TIM_PWM_Start+0xcc>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a2c      	ldr	r2, [pc, #176]	; (8007d84 <HAL_TIM_PWM_Start+0x178>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIM_PWM_Start+0xd0>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <HAL_TIM_PWM_Start+0xd2>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <HAL_TIM_PWM_Start+0x174>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d022      	beq.n	8007d42 <HAL_TIM_PWM_Start+0x136>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d04:	d01d      	beq.n	8007d42 <HAL_TIM_PWM_Start+0x136>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1f      	ldr	r2, [pc, #124]	; (8007d88 <HAL_TIM_PWM_Start+0x17c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d018      	beq.n	8007d42 <HAL_TIM_PWM_Start+0x136>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1d      	ldr	r2, [pc, #116]	; (8007d8c <HAL_TIM_PWM_Start+0x180>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <HAL_TIM_PWM_Start+0x136>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1c      	ldr	r2, [pc, #112]	; (8007d90 <HAL_TIM_PWM_Start+0x184>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00e      	beq.n	8007d42 <HAL_TIM_PWM_Start+0x136>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a16      	ldr	r2, [pc, #88]	; (8007d84 <HAL_TIM_PWM_Start+0x178>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d009      	beq.n	8007d42 <HAL_TIM_PWM_Start+0x136>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a18      	ldr	r2, [pc, #96]	; (8007d94 <HAL_TIM_PWM_Start+0x188>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d004      	beq.n	8007d42 <HAL_TIM_PWM_Start+0x136>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <HAL_TIM_PWM_Start+0x18c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d111      	bne.n	8007d66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b06      	cmp	r3, #6
 8007d52:	d010      	beq.n	8007d76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0201 	orr.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d64:	e007      	b.n	8007d76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0201 	orr.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40010400 	.word	0x40010400
 8007d88:	40000400 	.word	0x40000400
 8007d8c:	40000800 	.word	0x40000800
 8007d90:	40000c00 	.word	0x40000c00
 8007d94:	40014000 	.word	0x40014000
 8007d98:	40001800 	.word	0x40001800

08007d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d122      	bne.n	8007df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d11b      	bne.n	8007df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0202 	mvn.w	r2, #2
 8007dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa77 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 8007de4:	e005      	b.n	8007df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa69 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fa7a 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d122      	bne.n	8007e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d11b      	bne.n	8007e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f06f 0204 	mvn.w	r2, #4
 8007e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa4d 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 8007e38:	e005      	b.n	8007e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa3f 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa50 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b08      	cmp	r3, #8
 8007e58:	d122      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d11b      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0208 	mvn.w	r2, #8
 8007e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2204      	movs	r2, #4
 8007e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa23 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa15 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa26 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d122      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b10      	cmp	r3, #16
 8007eba:	d11b      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0210 	mvn.w	r2, #16
 8007ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2208      	movs	r2, #8
 8007eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9f9 	bl	80082d2 <HAL_TIM_IC_CaptureCallback>
 8007ee0:	e005      	b.n	8007eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9eb 	bl	80082be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9fc 	bl	80082e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10e      	bne.n	8007f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d107      	bne.n	8007f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0201 	mvn.w	r2, #1
 8007f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fa fbbe 	bl	800269c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b80      	cmp	r3, #128	; 0x80
 8007f2c:	d10e      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d107      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fd78 	bl	8008a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f56:	2b40      	cmp	r3, #64	; 0x40
 8007f58:	d10e      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f64:	2b40      	cmp	r3, #64	; 0x40
 8007f66:	d107      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f9c1 	bl	80082fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d10e      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d107      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0220 	mvn.w	r2, #32
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fd42 	bl	8008a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e0ae      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b0c      	cmp	r3, #12
 8007fd6:	f200 809f 	bhi.w	8008118 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007fda:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08008015 	.word	0x08008015
 8007fe4:	08008119 	.word	0x08008119
 8007fe8:	08008119 	.word	0x08008119
 8007fec:	08008119 	.word	0x08008119
 8007ff0:	08008055 	.word	0x08008055
 8007ff4:	08008119 	.word	0x08008119
 8007ff8:	08008119 	.word	0x08008119
 8007ffc:	08008119 	.word	0x08008119
 8008000:	08008097 	.word	0x08008097
 8008004:	08008119 	.word	0x08008119
 8008008:	08008119 	.word	0x08008119
 800800c:	08008119 	.word	0x08008119
 8008010:	080080d7 	.word	0x080080d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 fa18 	bl	8008450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0208 	orr.w	r2, r2, #8
 800802e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0204 	bic.w	r2, r2, #4
 800803e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6999      	ldr	r1, [r3, #24]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	691a      	ldr	r2, [r3, #16]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	619a      	str	r2, [r3, #24]
      break;
 8008052:	e064      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 fa68 	bl	8008530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699a      	ldr	r2, [r3, #24]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800806e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800807e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6999      	ldr	r1, [r3, #24]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	619a      	str	r2, [r3, #24]
      break;
 8008094:	e043      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fabd 	bl	800861c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0208 	orr.w	r2, r2, #8
 80080b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69da      	ldr	r2, [r3, #28]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0204 	bic.w	r2, r2, #4
 80080c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69d9      	ldr	r1, [r3, #28]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	61da      	str	r2, [r3, #28]
      break;
 80080d4:	e023      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fb11 	bl	8008704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69d9      	ldr	r1, [r3, #28]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	021a      	lsls	r2, r3, #8
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	61da      	str	r2, [r3, #28]
      break;
 8008116:	e002      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
      break;
 800811c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_TIM_ConfigClockSource+0x1c>
 8008148:	2302      	movs	r3, #2
 800814a:	e0b4      	b.n	80082b6 <HAL_TIM_ConfigClockSource+0x186>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800816a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008184:	d03e      	beq.n	8008204 <HAL_TIM_ConfigClockSource+0xd4>
 8008186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800818a:	f200 8087 	bhi.w	800829c <HAL_TIM_ConfigClockSource+0x16c>
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	f000 8086 	beq.w	80082a2 <HAL_TIM_ConfigClockSource+0x172>
 8008196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819a:	d87f      	bhi.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
 800819c:	2b70      	cmp	r3, #112	; 0x70
 800819e:	d01a      	beq.n	80081d6 <HAL_TIM_ConfigClockSource+0xa6>
 80081a0:	2b70      	cmp	r3, #112	; 0x70
 80081a2:	d87b      	bhi.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
 80081a4:	2b60      	cmp	r3, #96	; 0x60
 80081a6:	d050      	beq.n	800824a <HAL_TIM_ConfigClockSource+0x11a>
 80081a8:	2b60      	cmp	r3, #96	; 0x60
 80081aa:	d877      	bhi.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
 80081ac:	2b50      	cmp	r3, #80	; 0x50
 80081ae:	d03c      	beq.n	800822a <HAL_TIM_ConfigClockSource+0xfa>
 80081b0:	2b50      	cmp	r3, #80	; 0x50
 80081b2:	d873      	bhi.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
 80081b4:	2b40      	cmp	r3, #64	; 0x40
 80081b6:	d058      	beq.n	800826a <HAL_TIM_ConfigClockSource+0x13a>
 80081b8:	2b40      	cmp	r3, #64	; 0x40
 80081ba:	d86f      	bhi.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
 80081bc:	2b30      	cmp	r3, #48	; 0x30
 80081be:	d064      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x15a>
 80081c0:	2b30      	cmp	r3, #48	; 0x30
 80081c2:	d86b      	bhi.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d060      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x15a>
 80081c8:	2b20      	cmp	r3, #32
 80081ca:	d867      	bhi.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d05c      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x15a>
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d05a      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x15a>
 80081d4:	e062      	b.n	800829c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6899      	ldr	r1, [r3, #8]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f000 fb5d 	bl	80088a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	609a      	str	r2, [r3, #8]
      break;
 8008202:	e04f      	b.n	80082a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	6899      	ldr	r1, [r3, #8]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f000 fb46 	bl	80088a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008226:	609a      	str	r2, [r3, #8]
      break;
 8008228:	e03c      	b.n	80082a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	6859      	ldr	r1, [r3, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	461a      	mov	r2, r3
 8008238:	f000 faba 	bl	80087b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2150      	movs	r1, #80	; 0x50
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fb13 	bl	800886e <TIM_ITRx_SetConfig>
      break;
 8008248:	e02c      	b.n	80082a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	6859      	ldr	r1, [r3, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	461a      	mov	r2, r3
 8008258:	f000 fad9 	bl	800880e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2160      	movs	r1, #96	; 0x60
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fb03 	bl	800886e <TIM_ITRx_SetConfig>
      break;
 8008268:	e01c      	b.n	80082a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6859      	ldr	r1, [r3, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	461a      	mov	r2, r3
 8008278:	f000 fa9a 	bl	80087b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2140      	movs	r1, #64	; 0x40
 8008282:	4618      	mov	r0, r3
 8008284:	f000 faf3 	bl	800886e <TIM_ITRx_SetConfig>
      break;
 8008288:	e00c      	b.n	80082a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f000 faea 	bl	800886e <TIM_ITRx_SetConfig>
      break;
 800829a:	e003      	b.n	80082a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
      break;
 80082a0:	e000      	b.n	80082a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a40      	ldr	r2, [pc, #256]	; (8008424 <TIM_Base_SetConfig+0x114>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d013      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832e:	d00f      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a3d      	ldr	r2, [pc, #244]	; (8008428 <TIM_Base_SetConfig+0x118>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00b      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a3c      	ldr	r2, [pc, #240]	; (800842c <TIM_Base_SetConfig+0x11c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d007      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a3b      	ldr	r2, [pc, #236]	; (8008430 <TIM_Base_SetConfig+0x120>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a3a      	ldr	r2, [pc, #232]	; (8008434 <TIM_Base_SetConfig+0x124>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d108      	bne.n	8008362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a2f      	ldr	r2, [pc, #188]	; (8008424 <TIM_Base_SetConfig+0x114>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d02b      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008370:	d027      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a2c      	ldr	r2, [pc, #176]	; (8008428 <TIM_Base_SetConfig+0x118>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d023      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2b      	ldr	r2, [pc, #172]	; (800842c <TIM_Base_SetConfig+0x11c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d01f      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2a      	ldr	r2, [pc, #168]	; (8008430 <TIM_Base_SetConfig+0x120>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01b      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a29      	ldr	r2, [pc, #164]	; (8008434 <TIM_Base_SetConfig+0x124>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d017      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a28      	ldr	r2, [pc, #160]	; (8008438 <TIM_Base_SetConfig+0x128>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d013      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a27      	ldr	r2, [pc, #156]	; (800843c <TIM_Base_SetConfig+0x12c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00f      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a26      	ldr	r2, [pc, #152]	; (8008440 <TIM_Base_SetConfig+0x130>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00b      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a25      	ldr	r2, [pc, #148]	; (8008444 <TIM_Base_SetConfig+0x134>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d007      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a24      	ldr	r2, [pc, #144]	; (8008448 <TIM_Base_SetConfig+0x138>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d003      	beq.n	80083c2 <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a23      	ldr	r2, [pc, #140]	; (800844c <TIM_Base_SetConfig+0x13c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d108      	bne.n	80083d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <TIM_Base_SetConfig+0x114>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d003      	beq.n	8008408 <TIM_Base_SetConfig+0xf8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a0c      	ldr	r2, [pc, #48]	; (8008434 <TIM_Base_SetConfig+0x124>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d103      	bne.n	8008410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	615a      	str	r2, [r3, #20]
}
 8008416:	bf00      	nop
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	40010000 	.word	0x40010000
 8008428:	40000400 	.word	0x40000400
 800842c:	40000800 	.word	0x40000800
 8008430:	40000c00 	.word	0x40000c00
 8008434:	40010400 	.word	0x40010400
 8008438:	40014000 	.word	0x40014000
 800843c:	40014400 	.word	0x40014400
 8008440:	40014800 	.word	0x40014800
 8008444:	40001800 	.word	0x40001800
 8008448:	40001c00 	.word	0x40001c00
 800844c:	40002000 	.word	0x40002000

08008450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f023 0201 	bic.w	r2, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f023 0302 	bic.w	r3, r3, #2
 8008498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a20      	ldr	r2, [pc, #128]	; (8008528 <TIM_OC1_SetConfig+0xd8>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d003      	beq.n	80084b4 <TIM_OC1_SetConfig+0x64>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a1f      	ldr	r2, [pc, #124]	; (800852c <TIM_OC1_SetConfig+0xdc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d10c      	bne.n	80084ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f023 0308 	bic.w	r3, r3, #8
 80084ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f023 0304 	bic.w	r3, r3, #4
 80084cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a15      	ldr	r2, [pc, #84]	; (8008528 <TIM_OC1_SetConfig+0xd8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_OC1_SetConfig+0x8e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a14      	ldr	r2, [pc, #80]	; (800852c <TIM_OC1_SetConfig+0xdc>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d111      	bne.n	8008502 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	621a      	str	r2, [r3, #32]
}
 800851c:	bf00      	nop
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	40010000 	.word	0x40010000
 800852c:	40010400 	.word	0x40010400

08008530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f023 0210 	bic.w	r2, r3, #16
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	021b      	lsls	r3, r3, #8
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	4313      	orrs	r3, r2
 8008572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 0320 	bic.w	r3, r3, #32
 800857a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a22      	ldr	r2, [pc, #136]	; (8008614 <TIM_OC2_SetConfig+0xe4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d003      	beq.n	8008598 <TIM_OC2_SetConfig+0x68>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a21      	ldr	r2, [pc, #132]	; (8008618 <TIM_OC2_SetConfig+0xe8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d10d      	bne.n	80085b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800859e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a17      	ldr	r2, [pc, #92]	; (8008614 <TIM_OC2_SetConfig+0xe4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_OC2_SetConfig+0x94>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a16      	ldr	r2, [pc, #88]	; (8008618 <TIM_OC2_SetConfig+0xe8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d113      	bne.n	80085ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	4313      	orrs	r3, r2
 80085de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40010000 	.word	0x40010000
 8008618:	40010400 	.word	0x40010400

0800861c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0303 	bic.w	r3, r3, #3
 8008652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a21      	ldr	r2, [pc, #132]	; (80086fc <TIM_OC3_SetConfig+0xe0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d003      	beq.n	8008682 <TIM_OC3_SetConfig+0x66>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a20      	ldr	r2, [pc, #128]	; (8008700 <TIM_OC3_SetConfig+0xe4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d10d      	bne.n	800869e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800869c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a16      	ldr	r2, [pc, #88]	; (80086fc <TIM_OC3_SetConfig+0xe0>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d003      	beq.n	80086ae <TIM_OC3_SetConfig+0x92>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a15      	ldr	r2, [pc, #84]	; (8008700 <TIM_OC3_SetConfig+0xe4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d113      	bne.n	80086d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40010000 	.word	0x40010000
 8008700:	40010400 	.word	0x40010400

08008704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800873a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	031b      	lsls	r3, r3, #12
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a12      	ldr	r2, [pc, #72]	; (80087a8 <TIM_OC4_SetConfig+0xa4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <TIM_OC4_SetConfig+0x68>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a11      	ldr	r2, [pc, #68]	; (80087ac <TIM_OC4_SetConfig+0xa8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d109      	bne.n	8008780 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	019b      	lsls	r3, r3, #6
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40010000 	.word	0x40010000
 80087ac:	40010400 	.word	0x40010400

080087b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f023 0201 	bic.w	r2, r3, #1
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f023 030a 	bic.w	r3, r3, #10
 80087ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	621a      	str	r2, [r3, #32]
}
 8008802:	bf00      	nop
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800880e:	b480      	push	{r7}
 8008810:	b087      	sub	sp, #28
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f023 0210 	bic.w	r2, r3, #16
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	031b      	lsls	r3, r3, #12
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800884a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	621a      	str	r2, [r3, #32]
}
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800886e:	b480      	push	{r7}
 8008870:	b085      	sub	sp, #20
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	f043 0307 	orr.w	r3, r3, #7
 8008890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	609a      	str	r2, [r3, #8]
}
 8008898:	bf00      	nop
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	021a      	lsls	r2, r3, #8
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	431a      	orrs	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	609a      	str	r2, [r3, #8]
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	2201      	movs	r2, #1
 80088f8:	fa02 f303 	lsl.w	r3, r2, r3
 80088fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a1a      	ldr	r2, [r3, #32]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	43db      	mvns	r3, r3
 8008906:	401a      	ands	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a1a      	ldr	r2, [r3, #32]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f003 031f 	and.w	r3, r3, #31
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	fa01 f303 	lsl.w	r3, r1, r3
 800891c:	431a      	orrs	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	621a      	str	r2, [r3, #32]
}
 8008922:	bf00      	nop
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008944:	2302      	movs	r3, #2
 8008946:	e05a      	b.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a21      	ldr	r2, [pc, #132]	; (8008a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d022      	beq.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008994:	d01d      	beq.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a1d      	ldr	r2, [pc, #116]	; (8008a10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d018      	beq.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a1b      	ldr	r2, [pc, #108]	; (8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d013      	beq.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1a      	ldr	r2, [pc, #104]	; (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00e      	beq.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a18      	ldr	r2, [pc, #96]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d009      	beq.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a17      	ldr	r2, [pc, #92]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d004      	beq.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d10c      	bne.n	80089ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	40010000 	.word	0x40010000
 8008a10:	40000400 	.word	0x40000400
 8008a14:	40000800 	.word	0x40000800
 8008a18:	40000c00 	.word	0x40000c00
 8008a1c:	40010400 	.word	0x40010400
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40001800 	.word	0x40001800

08008a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e03f      	b.n	8008ae2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fa f82c 	bl	8002ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	; 0x24
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fddb 	bl	8009650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b08a      	sub	sp, #40	; 0x28
 8008aee:	af02      	add	r7, sp, #8
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d17c      	bne.n	8008c04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <HAL_UART_Transmit+0x2c>
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e075      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_UART_Transmit+0x3e>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e06e      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2221      	movs	r2, #33	; 0x21
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b3e:	f7fb f8bf 	bl	8003cc0 <HAL_GetTick>
 8008b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	88fa      	ldrh	r2, [r7, #6]
 8008b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	88fa      	ldrh	r2, [r7, #6]
 8008b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b58:	d108      	bne.n	8008b6c <HAL_UART_Transmit+0x82>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d104      	bne.n	8008b6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	61bb      	str	r3, [r7, #24]
 8008b6a:	e003      	b.n	8008b74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008b7c:	e02a      	b.n	8008bd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	2180      	movs	r1, #128	; 0x80
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 fb1f 	bl	80091cc <UART_WaitOnFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e036      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	3302      	adds	r3, #2
 8008bb2:	61bb      	str	r3, [r7, #24]
 8008bb4:	e007      	b.n	8008bc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1cf      	bne.n	8008b7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2200      	movs	r2, #0
 8008be6:	2140      	movs	r1, #64	; 0x40
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 faef 	bl	80091cc <UART_WaitOnFlagUntilTimeout>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e006      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	e000      	b.n	8008c06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c04:	2302      	movs	r3, #2
  }
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3720      	adds	r7, #32
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b20      	cmp	r3, #32
 8008c26:	d11d      	bne.n	8008c64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <HAL_UART_Receive_IT+0x26>
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e016      	b.n	8008c66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Receive_IT+0x38>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e00f      	b.n	8008c66 <HAL_UART_Receive_IT+0x58>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	461a      	mov	r2, r3
 8008c58:	68b9      	ldr	r1, [r7, #8]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fb24 	bl	80092a8 <UART_Start_Receive_IT>
 8008c60:	4603      	mov	r3, r0
 8008c62:	e000      	b.n	8008c66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c64:	2302      	movs	r3, #2
  }
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b0ba      	sub	sp, #232	; 0xe8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10f      	bne.n	8008cd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x66>
 8008cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fc03 	bl	80094da <UART_Receive_IT>
      return;
 8008cd4:	e256      	b.n	8009184 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 80de 	beq.w	8008e9c <HAL_UART_IRQHandler+0x22c>
 8008ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 80d1 	beq.w	8008e9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00b      	beq.n	8008d1e <HAL_UART_IRQHandler+0xae>
 8008d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d005      	beq.n	8008d1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	f043 0201 	orr.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d22:	f003 0304 	and.w	r3, r3, #4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00b      	beq.n	8008d42 <HAL_UART_IRQHandler+0xd2>
 8008d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	f043 0202 	orr.w	r2, r3, #2
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00b      	beq.n	8008d66 <HAL_UART_IRQHandler+0xf6>
 8008d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d005      	beq.n	8008d66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	f043 0204 	orr.w	r2, r3, #4
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d011      	beq.n	8008d96 <HAL_UART_IRQHandler+0x126>
 8008d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d105      	bne.n	8008d8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	f043 0208 	orr.w	r2, r3, #8
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 81ed 	beq.w	800917a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d008      	beq.n	8008dbe <HAL_UART_IRQHandler+0x14e>
 8008dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fb8e 	bl	80094da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	bf0c      	ite	eq
 8008dcc:	2301      	moveq	r3, #1
 8008dce:	2300      	movne	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d103      	bne.n	8008dea <HAL_UART_IRQHandler+0x17a>
 8008de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d04f      	beq.n	8008e8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa96 	bl	800931c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d141      	bne.n	8008e82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3314      	adds	r3, #20
 8008e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e0c:	e853 3f00 	ldrex	r3, [r3]
 8008e10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3314      	adds	r3, #20
 8008e26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1d9      	bne.n	8008dfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d013      	beq.n	8008e7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	4a7d      	ldr	r2, [pc, #500]	; (800904c <HAL_UART_IRQHandler+0x3dc>)
 8008e58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fb fdf8 	bl	8004a54 <HAL_DMA_Abort_IT>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d016      	beq.n	8008e98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e78:	e00e      	b.n	8008e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f990 	bl	80091a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e80:	e00a      	b.n	8008e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f98c 	bl	80091a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e88:	e006      	b.n	8008e98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f988 	bl	80091a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e96:	e170      	b.n	800917a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e98:	bf00      	nop
    return;
 8008e9a:	e16e      	b.n	800917a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	f040 814a 	bne.w	800913a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eaa:	f003 0310 	and.w	r3, r3, #16
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 8143 	beq.w	800913a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb8:	f003 0310 	and.w	r3, r3, #16
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 813c 	beq.w	800913a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60bb      	str	r3, [r7, #8]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee2:	2b40      	cmp	r3, #64	; 0x40
 8008ee4:	f040 80b4 	bne.w	8009050 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ef4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 8140 	beq.w	800917e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f06:	429a      	cmp	r2, r3
 8008f08:	f080 8139 	bcs.w	800917e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1e:	f000 8088 	beq.w	8009032 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	330c      	adds	r3, #12
 8008f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	330c      	adds	r3, #12
 8008f4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1d9      	bne.n	8008f22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f80:	f023 0301 	bic.w	r3, r3, #1
 8008f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3314      	adds	r3, #20
 8008f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e1      	bne.n	8008f6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3314      	adds	r3, #20
 8008fb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3314      	adds	r3, #20
 8008fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e3      	bne.n	8008faa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009002:	f023 0310 	bic.w	r3, r3, #16
 8009006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	330c      	adds	r3, #12
 8009010:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009014:	65ba      	str	r2, [r7, #88]	; 0x58
 8009016:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800901a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e3      	bne.n	8008ff0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	4618      	mov	r0, r3
 800902e:	f7fb fca1 	bl	8004974 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800903a:	b29b      	uxth	r3, r3
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	b29b      	uxth	r3, r3
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f8b6 	bl	80091b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009048:	e099      	b.n	800917e <HAL_UART_IRQHandler+0x50e>
 800904a:	bf00      	nop
 800904c:	080093e3 	.word	0x080093e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009058:	b29b      	uxth	r3, r3
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 808b 	beq.w	8009182 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800906c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8086 	beq.w	8009182 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	330c      	adds	r3, #12
 800907c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800908c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800909a:	647a      	str	r2, [r7, #68]	; 0x44
 800909c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e3      	bne.n	8009076 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	623b      	str	r3, [r7, #32]
   return(result);
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3314      	adds	r3, #20
 80090ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090d2:	633a      	str	r2, [r7, #48]	; 0x30
 80090d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e3      	bne.n	80090ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	330c      	adds	r3, #12
 80090fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	60fb      	str	r3, [r7, #12]
   return(result);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0310 	bic.w	r3, r3, #16
 800910a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	330c      	adds	r3, #12
 8009114:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009118:	61fa      	str	r2, [r7, #28]
 800911a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69b9      	ldr	r1, [r7, #24]
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	617b      	str	r3, [r7, #20]
   return(result);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e3      	bne.n	80090f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800912c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f83e 	bl	80091b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009138:	e023      	b.n	8009182 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800913a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <HAL_UART_IRQHandler+0x4ea>
 8009146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800914a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f959 	bl	800940a <UART_Transmit_IT>
    return;
 8009158:	e014      	b.n	8009184 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800915a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00e      	beq.n	8009184 <HAL_UART_IRQHandler+0x514>
 8009166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d008      	beq.n	8009184 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f999 	bl	80094aa <UART_EndTransmit_IT>
    return;
 8009178:	e004      	b.n	8009184 <HAL_UART_IRQHandler+0x514>
    return;
 800917a:	bf00      	nop
 800917c:	e002      	b.n	8009184 <HAL_UART_IRQHandler+0x514>
      return;
 800917e:	bf00      	nop
 8009180:	e000      	b.n	8009184 <HAL_UART_IRQHandler+0x514>
      return;
 8009182:	bf00      	nop
  }
}
 8009184:	37e8      	adds	r7, #232	; 0xe8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop

0800918c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b090      	sub	sp, #64	; 0x40
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	4613      	mov	r3, r2
 80091da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091dc:	e050      	b.n	8009280 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e4:	d04c      	beq.n	8009280 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80091e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d007      	beq.n	80091fc <UART_WaitOnFlagUntilTimeout+0x30>
 80091ec:	f7fa fd68 	bl	8003cc0 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d241      	bcs.n	8009280 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800921c:	637a      	str	r2, [r7, #52]	; 0x34
 800921e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e5      	bne.n	80091fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3314      	adds	r3, #20
 8009236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	613b      	str	r3, [r7, #16]
   return(result);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f023 0301 	bic.w	r3, r3, #1
 8009246:	63bb      	str	r3, [r7, #56]	; 0x38
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009250:	623a      	str	r2, [r7, #32]
 8009252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	69f9      	ldr	r1, [r7, #28]
 8009256:	6a3a      	ldr	r2, [r7, #32]
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	61bb      	str	r3, [r7, #24]
   return(result);
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e5      	bne.n	8009230 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e00f      	b.n	80092a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4013      	ands	r3, r2
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	429a      	cmp	r2, r3
 800928e:	bf0c      	ite	eq
 8009290:	2301      	moveq	r3, #1
 8009292:	2300      	movne	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	461a      	mov	r2, r3
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	429a      	cmp	r2, r3
 800929c:	d09f      	beq.n	80091de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3740      	adds	r7, #64	; 0x40
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	88fa      	ldrh	r2, [r7, #6]
 80092c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	88fa      	ldrh	r2, [r7, #6]
 80092c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2222      	movs	r2, #34	; 0x22
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092ec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	695a      	ldr	r2, [r3, #20]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0201 	orr.w	r2, r2, #1
 80092fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0220 	orr.w	r2, r2, #32
 800930c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800931c:	b480      	push	{r7}
 800931e:	b095      	sub	sp, #84	; 0x54
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800933a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	330c      	adds	r3, #12
 8009342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009344:	643a      	str	r2, [r7, #64]	; 0x40
 8009346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800934a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e5      	bne.n	8009324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3314      	adds	r3, #20
 800935e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	61fb      	str	r3, [r7, #28]
   return(result);
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	f023 0301 	bic.w	r3, r3, #1
 800936e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800937e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e5      	bne.n	8009358 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	2b01      	cmp	r3, #1
 8009392:	d119      	bne.n	80093c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	330c      	adds	r3, #12
 800939a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f023 0310 	bic.w	r3, r3, #16
 80093aa:	647b      	str	r3, [r7, #68]	; 0x44
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	330c      	adds	r3, #12
 80093b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093b4:	61ba      	str	r2, [r7, #24]
 80093b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	613b      	str	r3, [r7, #16]
   return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e5      	bne.n	8009394 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80093d6:	bf00      	nop
 80093d8:	3754      	adds	r7, #84	; 0x54
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fecf 	bl	80091a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009402:	bf00      	nop
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b21      	cmp	r3, #33	; 0x21
 800941c:	d13e      	bne.n	800949c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009426:	d114      	bne.n	8009452 <UART_Transmit_IT+0x48>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d110      	bne.n	8009452 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009444:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	1c9a      	adds	r2, r3, #2
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	621a      	str	r2, [r3, #32]
 8009450:	e008      	b.n	8009464 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	1c59      	adds	r1, r3, #1
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6211      	str	r1, [r2, #32]
 800945c:	781a      	ldrb	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009468:	b29b      	uxth	r3, r3
 800946a:	3b01      	subs	r3, #1
 800946c:	b29b      	uxth	r3, r3
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	4619      	mov	r1, r3
 8009472:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10f      	bne.n	8009498 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009486:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68da      	ldr	r2, [r3, #12]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009496:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	e000      	b.n	800949e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800949c:	2302      	movs	r3, #2
  }
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2220      	movs	r2, #32
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fe5e 	bl	800918c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b08c      	sub	sp, #48	; 0x30
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b22      	cmp	r3, #34	; 0x22
 80094ec:	f040 80ab 	bne.w	8009646 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f8:	d117      	bne.n	800952a <UART_Receive_IT+0x50>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d113      	bne.n	800952a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	b29b      	uxth	r3, r3
 8009514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009518:	b29a      	uxth	r2, r3
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	1c9a      	adds	r2, r3, #2
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	629a      	str	r2, [r3, #40]	; 0x28
 8009528:	e026      	b.n	8009578 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009530:	2300      	movs	r3, #0
 8009532:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953c:	d007      	beq.n	800954e <UART_Receive_IT+0x74>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <UART_Receive_IT+0x82>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	b2da      	uxtb	r2, r3
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e008      	b.n	800956e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009568:	b2da      	uxtb	r2, r3
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29b      	uxth	r3, r3
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	4619      	mov	r1, r3
 8009586:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009588:	2b00      	cmp	r3, #0
 800958a:	d15a      	bne.n	8009642 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0220 	bic.w	r2, r2, #32
 800959a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695a      	ldr	r2, [r3, #20]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2220      	movs	r2, #32
 80095c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d135      	bne.n	8009638 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	330c      	adds	r3, #12
 80095d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	613b      	str	r3, [r7, #16]
   return(result);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f023 0310 	bic.w	r3, r3, #16
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	330c      	adds	r3, #12
 80095f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f2:	623a      	str	r2, [r7, #32]
 80095f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	69f9      	ldr	r1, [r7, #28]
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e5      	bne.n	80095d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0310 	and.w	r3, r3, #16
 8009610:	2b10      	cmp	r3, #16
 8009612:	d10a      	bne.n	800962a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff fdbf 	bl	80091b4 <HAL_UARTEx_RxEventCallback>
 8009636:	e002      	b.n	800963e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7fa fa33 	bl	8003aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	e002      	b.n	8009648 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	e000      	b.n	8009648 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009646:	2302      	movs	r3, #2
  }
}
 8009648:	4618      	mov	r0, r3
 800964a:	3730      	adds	r7, #48	; 0x30
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	b09f      	sub	sp, #124	; 0x7c
 8009656:	af00      	add	r7, sp, #0
 8009658:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800965a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009666:	68d9      	ldr	r1, [r3, #12]
 8009668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	ea40 0301 	orr.w	r3, r0, r1
 8009670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009674:	689a      	ldr	r2, [r3, #8]
 8009676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	431a      	orrs	r2, r3
 800967c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	431a      	orrs	r2, r3
 8009682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	4313      	orrs	r3, r2
 8009688:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800968a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009694:	f021 010c 	bic.w	r1, r1, #12
 8009698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800969e:	430b      	orrs	r3, r1
 80096a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ae:	6999      	ldr	r1, [r3, #24]
 80096b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	ea40 0301 	orr.w	r3, r0, r1
 80096b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	4bc5      	ldr	r3, [pc, #788]	; (80099d4 <UART_SetConfig+0x384>)
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d004      	beq.n	80096ce <UART_SetConfig+0x7e>
 80096c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	4bc3      	ldr	r3, [pc, #780]	; (80099d8 <UART_SetConfig+0x388>)
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d103      	bne.n	80096d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096ce:	f7fd fb83 	bl	8006dd8 <HAL_RCC_GetPCLK2Freq>
 80096d2:	6778      	str	r0, [r7, #116]	; 0x74
 80096d4:	e002      	b.n	80096dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096d6:	f7fd fb6b 	bl	8006db0 <HAL_RCC_GetPCLK1Freq>
 80096da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e4:	f040 80b6 	bne.w	8009854 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096ea:	461c      	mov	r4, r3
 80096ec:	f04f 0500 	mov.w	r5, #0
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	1891      	adds	r1, r2, r2
 80096f6:	6439      	str	r1, [r7, #64]	; 0x40
 80096f8:	415b      	adcs	r3, r3
 80096fa:	647b      	str	r3, [r7, #68]	; 0x44
 80096fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009700:	1912      	adds	r2, r2, r4
 8009702:	eb45 0303 	adc.w	r3, r5, r3
 8009706:	f04f 0000 	mov.w	r0, #0
 800970a:	f04f 0100 	mov.w	r1, #0
 800970e:	00d9      	lsls	r1, r3, #3
 8009710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009714:	00d0      	lsls	r0, r2, #3
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	1911      	adds	r1, r2, r4
 800971c:	6639      	str	r1, [r7, #96]	; 0x60
 800971e:	416b      	adcs	r3, r5
 8009720:	667b      	str	r3, [r7, #100]	; 0x64
 8009722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	461a      	mov	r2, r3
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	1891      	adds	r1, r2, r2
 800972e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009730:	415b      	adcs	r3, r3
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009738:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800973c:	f7f7 f9d0 	bl	8000ae0 <__aeabi_uldivmod>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4ba5      	ldr	r3, [pc, #660]	; (80099dc <UART_SetConfig+0x38c>)
 8009746:	fba3 2302 	umull	r2, r3, r3, r2
 800974a:	095b      	lsrs	r3, r3, #5
 800974c:	011e      	lsls	r6, r3, #4
 800974e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009750:	461c      	mov	r4, r3
 8009752:	f04f 0500 	mov.w	r5, #0
 8009756:	4622      	mov	r2, r4
 8009758:	462b      	mov	r3, r5
 800975a:	1891      	adds	r1, r2, r2
 800975c:	6339      	str	r1, [r7, #48]	; 0x30
 800975e:	415b      	adcs	r3, r3
 8009760:	637b      	str	r3, [r7, #52]	; 0x34
 8009762:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009766:	1912      	adds	r2, r2, r4
 8009768:	eb45 0303 	adc.w	r3, r5, r3
 800976c:	f04f 0000 	mov.w	r0, #0
 8009770:	f04f 0100 	mov.w	r1, #0
 8009774:	00d9      	lsls	r1, r3, #3
 8009776:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800977a:	00d0      	lsls	r0, r2, #3
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	1911      	adds	r1, r2, r4
 8009782:	65b9      	str	r1, [r7, #88]	; 0x58
 8009784:	416b      	adcs	r3, r5
 8009786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	461a      	mov	r2, r3
 800978e:	f04f 0300 	mov.w	r3, #0
 8009792:	1891      	adds	r1, r2, r2
 8009794:	62b9      	str	r1, [r7, #40]	; 0x28
 8009796:	415b      	adcs	r3, r3
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800979a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800979e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80097a2:	f7f7 f99d 	bl	8000ae0 <__aeabi_uldivmod>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4b8c      	ldr	r3, [pc, #560]	; (80099dc <UART_SetConfig+0x38c>)
 80097ac:	fba3 1302 	umull	r1, r3, r3, r2
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	2164      	movs	r1, #100	; 0x64
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	3332      	adds	r3, #50	; 0x32
 80097be:	4a87      	ldr	r2, [pc, #540]	; (80099dc <UART_SetConfig+0x38c>)
 80097c0:	fba2 2303 	umull	r2, r3, r2, r3
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097cc:	441e      	add	r6, r3
 80097ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097d0:	4618      	mov	r0, r3
 80097d2:	f04f 0100 	mov.w	r1, #0
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	1894      	adds	r4, r2, r2
 80097dc:	623c      	str	r4, [r7, #32]
 80097de:	415b      	adcs	r3, r3
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
 80097e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097e6:	1812      	adds	r2, r2, r0
 80097e8:	eb41 0303 	adc.w	r3, r1, r3
 80097ec:	f04f 0400 	mov.w	r4, #0
 80097f0:	f04f 0500 	mov.w	r5, #0
 80097f4:	00dd      	lsls	r5, r3, #3
 80097f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097fa:	00d4      	lsls	r4, r2, #3
 80097fc:	4622      	mov	r2, r4
 80097fe:	462b      	mov	r3, r5
 8009800:	1814      	adds	r4, r2, r0
 8009802:	653c      	str	r4, [r7, #80]	; 0x50
 8009804:	414b      	adcs	r3, r1
 8009806:	657b      	str	r3, [r7, #84]	; 0x54
 8009808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	461a      	mov	r2, r3
 800980e:	f04f 0300 	mov.w	r3, #0
 8009812:	1891      	adds	r1, r2, r2
 8009814:	61b9      	str	r1, [r7, #24]
 8009816:	415b      	adcs	r3, r3
 8009818:	61fb      	str	r3, [r7, #28]
 800981a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800981e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009822:	f7f7 f95d 	bl	8000ae0 <__aeabi_uldivmod>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4b6c      	ldr	r3, [pc, #432]	; (80099dc <UART_SetConfig+0x38c>)
 800982c:	fba3 1302 	umull	r1, r3, r3, r2
 8009830:	095b      	lsrs	r3, r3, #5
 8009832:	2164      	movs	r1, #100	; 0x64
 8009834:	fb01 f303 	mul.w	r3, r1, r3
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	00db      	lsls	r3, r3, #3
 800983c:	3332      	adds	r3, #50	; 0x32
 800983e:	4a67      	ldr	r2, [pc, #412]	; (80099dc <UART_SetConfig+0x38c>)
 8009840:	fba2 2303 	umull	r2, r3, r2, r3
 8009844:	095b      	lsrs	r3, r3, #5
 8009846:	f003 0207 	and.w	r2, r3, #7
 800984a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4432      	add	r2, r6
 8009850:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009852:	e0b9      	b.n	80099c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009856:	461c      	mov	r4, r3
 8009858:	f04f 0500 	mov.w	r5, #0
 800985c:	4622      	mov	r2, r4
 800985e:	462b      	mov	r3, r5
 8009860:	1891      	adds	r1, r2, r2
 8009862:	6139      	str	r1, [r7, #16]
 8009864:	415b      	adcs	r3, r3
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800986c:	1912      	adds	r2, r2, r4
 800986e:	eb45 0303 	adc.w	r3, r5, r3
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f04f 0100 	mov.w	r1, #0
 800987a:	00d9      	lsls	r1, r3, #3
 800987c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009880:	00d0      	lsls	r0, r2, #3
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	eb12 0804 	adds.w	r8, r2, r4
 800988a:	eb43 0905 	adc.w	r9, r3, r5
 800988e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	4618      	mov	r0, r3
 8009894:	f04f 0100 	mov.w	r1, #0
 8009898:	f04f 0200 	mov.w	r2, #0
 800989c:	f04f 0300 	mov.w	r3, #0
 80098a0:	008b      	lsls	r3, r1, #2
 80098a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098a6:	0082      	lsls	r2, r0, #2
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f7 f918 	bl	8000ae0 <__aeabi_uldivmod>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4b49      	ldr	r3, [pc, #292]	; (80099dc <UART_SetConfig+0x38c>)
 80098b6:	fba3 2302 	umull	r2, r3, r3, r2
 80098ba:	095b      	lsrs	r3, r3, #5
 80098bc:	011e      	lsls	r6, r3, #4
 80098be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098c0:	4618      	mov	r0, r3
 80098c2:	f04f 0100 	mov.w	r1, #0
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	1894      	adds	r4, r2, r2
 80098cc:	60bc      	str	r4, [r7, #8]
 80098ce:	415b      	adcs	r3, r3
 80098d0:	60fb      	str	r3, [r7, #12]
 80098d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098d6:	1812      	adds	r2, r2, r0
 80098d8:	eb41 0303 	adc.w	r3, r1, r3
 80098dc:	f04f 0400 	mov.w	r4, #0
 80098e0:	f04f 0500 	mov.w	r5, #0
 80098e4:	00dd      	lsls	r5, r3, #3
 80098e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098ea:	00d4      	lsls	r4, r2, #3
 80098ec:	4622      	mov	r2, r4
 80098ee:	462b      	mov	r3, r5
 80098f0:	1814      	adds	r4, r2, r0
 80098f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80098f4:	414b      	adcs	r3, r1
 80098f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f04f 0100 	mov.w	r1, #0
 8009902:	f04f 0200 	mov.w	r2, #0
 8009906:	f04f 0300 	mov.w	r3, #0
 800990a:	008b      	lsls	r3, r1, #2
 800990c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009910:	0082      	lsls	r2, r0, #2
 8009912:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009916:	f7f7 f8e3 	bl	8000ae0 <__aeabi_uldivmod>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4b2f      	ldr	r3, [pc, #188]	; (80099dc <UART_SetConfig+0x38c>)
 8009920:	fba3 1302 	umull	r1, r3, r3, r2
 8009924:	095b      	lsrs	r3, r3, #5
 8009926:	2164      	movs	r1, #100	; 0x64
 8009928:	fb01 f303 	mul.w	r3, r1, r3
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	011b      	lsls	r3, r3, #4
 8009930:	3332      	adds	r3, #50	; 0x32
 8009932:	4a2a      	ldr	r2, [pc, #168]	; (80099dc <UART_SetConfig+0x38c>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	095b      	lsrs	r3, r3, #5
 800993a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800993e:	441e      	add	r6, r3
 8009940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009942:	4618      	mov	r0, r3
 8009944:	f04f 0100 	mov.w	r1, #0
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	1894      	adds	r4, r2, r2
 800994e:	603c      	str	r4, [r7, #0]
 8009950:	415b      	adcs	r3, r3
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009958:	1812      	adds	r2, r2, r0
 800995a:	eb41 0303 	adc.w	r3, r1, r3
 800995e:	f04f 0400 	mov.w	r4, #0
 8009962:	f04f 0500 	mov.w	r5, #0
 8009966:	00dd      	lsls	r5, r3, #3
 8009968:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800996c:	00d4      	lsls	r4, r2, #3
 800996e:	4622      	mov	r2, r4
 8009970:	462b      	mov	r3, r5
 8009972:	eb12 0a00 	adds.w	sl, r2, r0
 8009976:	eb43 0b01 	adc.w	fp, r3, r1
 800997a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4618      	mov	r0, r3
 8009980:	f04f 0100 	mov.w	r1, #0
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	008b      	lsls	r3, r1, #2
 800998e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009992:	0082      	lsls	r2, r0, #2
 8009994:	4650      	mov	r0, sl
 8009996:	4659      	mov	r1, fp
 8009998:	f7f7 f8a2 	bl	8000ae0 <__aeabi_uldivmod>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4b0e      	ldr	r3, [pc, #56]	; (80099dc <UART_SetConfig+0x38c>)
 80099a2:	fba3 1302 	umull	r1, r3, r3, r2
 80099a6:	095b      	lsrs	r3, r3, #5
 80099a8:	2164      	movs	r1, #100	; 0x64
 80099aa:	fb01 f303 	mul.w	r3, r1, r3
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	3332      	adds	r3, #50	; 0x32
 80099b4:	4a09      	ldr	r2, [pc, #36]	; (80099dc <UART_SetConfig+0x38c>)
 80099b6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	f003 020f 	and.w	r2, r3, #15
 80099c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4432      	add	r2, r6
 80099c6:	609a      	str	r2, [r3, #8]
}
 80099c8:	bf00      	nop
 80099ca:	377c      	adds	r7, #124	; 0x7c
 80099cc:	46bd      	mov	sp, r7
 80099ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d2:	bf00      	nop
 80099d4:	40011000 	.word	0x40011000
 80099d8:	40011400 	.word	0x40011400
 80099dc:	51eb851f 	.word	0x51eb851f

080099e0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <FSMC_NORSRAM_Init+0xa0>)
 80099fe:	4013      	ands	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009a0a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009a10:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009a16:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009a1c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8009a22:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009a28:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009a2e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009a34:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009a3a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009a40:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8009a46:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009a4c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d103      	bne.n	8009a64 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a62:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	fff00080 	.word	0xfff00080

08009a84 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009aa6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009ab2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009aba:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009ac2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009acc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	3b02      	subs	r3, #2
 8009ad4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009ad6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009adc:	4313      	orrs	r3, r2
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6979      	ldr	r1, [r7, #20]
 8009aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	371c      	adds	r7, #28
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
	...

08009b00 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b18:	d122      	bne.n	8009b60 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b22:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009b28:	4013      	ands	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009b36:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009b3e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009b46:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009b4c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	6979      	ldr	r1, [r7, #20]
 8009b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009b5e:	e005      	b.n	8009b6c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	cff00000 	.word	0xcff00000

08009b80 <__errno>:
 8009b80:	4b01      	ldr	r3, [pc, #4]	; (8009b88 <__errno+0x8>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	2000004c 	.word	0x2000004c

08009b8c <__libc_init_array>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4d0d      	ldr	r5, [pc, #52]	; (8009bc4 <__libc_init_array+0x38>)
 8009b90:	4c0d      	ldr	r4, [pc, #52]	; (8009bc8 <__libc_init_array+0x3c>)
 8009b92:	1b64      	subs	r4, r4, r5
 8009b94:	10a4      	asrs	r4, r4, #2
 8009b96:	2600      	movs	r6, #0
 8009b98:	42a6      	cmp	r6, r4
 8009b9a:	d109      	bne.n	8009bb0 <__libc_init_array+0x24>
 8009b9c:	4d0b      	ldr	r5, [pc, #44]	; (8009bcc <__libc_init_array+0x40>)
 8009b9e:	4c0c      	ldr	r4, [pc, #48]	; (8009bd0 <__libc_init_array+0x44>)
 8009ba0:	f000 f908 	bl	8009db4 <_init>
 8009ba4:	1b64      	subs	r4, r4, r5
 8009ba6:	10a4      	asrs	r4, r4, #2
 8009ba8:	2600      	movs	r6, #0
 8009baa:	42a6      	cmp	r6, r4
 8009bac:	d105      	bne.n	8009bba <__libc_init_array+0x2e>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb4:	4798      	blx	r3
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7ee      	b.n	8009b98 <__libc_init_array+0xc>
 8009bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbe:	4798      	blx	r3
 8009bc0:	3601      	adds	r6, #1
 8009bc2:	e7f2      	b.n	8009baa <__libc_init_array+0x1e>
 8009bc4:	0800ce6c 	.word	0x0800ce6c
 8009bc8:	0800ce6c 	.word	0x0800ce6c
 8009bcc:	0800ce6c 	.word	0x0800ce6c
 8009bd0:	0800ce70 	.word	0x0800ce70

08009bd4 <memset>:
 8009bd4:	4402      	add	r2, r0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d100      	bne.n	8009bde <memset+0xa>
 8009bdc:	4770      	bx	lr
 8009bde:	f803 1b01 	strb.w	r1, [r3], #1
 8009be2:	e7f9      	b.n	8009bd8 <memset+0x4>

08009be4 <sqrt>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	ed2d 8b02 	vpush	{d8}
 8009bea:	ec55 4b10 	vmov	r4, r5, d0
 8009bee:	f000 f82d 	bl	8009c4c <__ieee754_sqrt>
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <sqrt+0x64>)
 8009bf4:	eeb0 8a40 	vmov.f32	s16, s0
 8009bf8:	eef0 8a60 	vmov.f32	s17, s1
 8009bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8009c00:	3301      	adds	r3, #1
 8009c02:	d019      	beq.n	8009c38 <sqrt+0x54>
 8009c04:	4622      	mov	r2, r4
 8009c06:	462b      	mov	r3, r5
 8009c08:	4620      	mov	r0, r4
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f7f6 ff32 	bl	8000a74 <__aeabi_dcmpun>
 8009c10:	b990      	cbnz	r0, 8009c38 <sqrt+0x54>
 8009c12:	2200      	movs	r2, #0
 8009c14:	2300      	movs	r3, #0
 8009c16:	4620      	mov	r0, r4
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7f6 ff03 	bl	8000a24 <__aeabi_dcmplt>
 8009c1e:	b158      	cbz	r0, 8009c38 <sqrt+0x54>
 8009c20:	f7ff ffae 	bl	8009b80 <__errno>
 8009c24:	2321      	movs	r3, #33	; 0x21
 8009c26:	6003      	str	r3, [r0, #0]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f7f6 fdb0 	bl	8000794 <__aeabi_ddiv>
 8009c34:	ec41 0b18 	vmov	d8, r0, r1
 8009c38:	eeb0 0a48 	vmov.f32	s0, s16
 8009c3c:	eef0 0a68 	vmov.f32	s1, s17
 8009c40:	ecbd 8b02 	vpop	{d8}
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	200000b0 	.word	0x200000b0

08009c4c <__ieee754_sqrt>:
 8009c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c50:	ec55 4b10 	vmov	r4, r5, d0
 8009c54:	4e56      	ldr	r6, [pc, #344]	; (8009db0 <__ieee754_sqrt+0x164>)
 8009c56:	43ae      	bics	r6, r5
 8009c58:	ee10 0a10 	vmov	r0, s0
 8009c5c:	ee10 3a10 	vmov	r3, s0
 8009c60:	4629      	mov	r1, r5
 8009c62:	462a      	mov	r2, r5
 8009c64:	d110      	bne.n	8009c88 <__ieee754_sqrt+0x3c>
 8009c66:	ee10 2a10 	vmov	r2, s0
 8009c6a:	462b      	mov	r3, r5
 8009c6c:	f7f6 fc68 	bl	8000540 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 faac 	bl	80001d4 <__adddf3>
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	460d      	mov	r5, r1
 8009c80:	ec45 4b10 	vmov	d0, r4, r5
 8009c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c88:	2d00      	cmp	r5, #0
 8009c8a:	dc10      	bgt.n	8009cae <__ieee754_sqrt+0x62>
 8009c8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c90:	4330      	orrs	r0, r6
 8009c92:	d0f5      	beq.n	8009c80 <__ieee754_sqrt+0x34>
 8009c94:	b15d      	cbz	r5, 8009cae <__ieee754_sqrt+0x62>
 8009c96:	ee10 2a10 	vmov	r2, s0
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	ee10 0a10 	vmov	r0, s0
 8009ca0:	f7f6 fa96 	bl	80001d0 <__aeabi_dsub>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	f7f6 fd74 	bl	8000794 <__aeabi_ddiv>
 8009cac:	e7e6      	b.n	8009c7c <__ieee754_sqrt+0x30>
 8009cae:	1509      	asrs	r1, r1, #20
 8009cb0:	d076      	beq.n	8009da0 <__ieee754_sqrt+0x154>
 8009cb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009cb6:	07ce      	lsls	r6, r1, #31
 8009cb8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009cbc:	bf5e      	ittt	pl
 8009cbe:	0fda      	lsrpl	r2, r3, #31
 8009cc0:	005b      	lslpl	r3, r3, #1
 8009cc2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009cc6:	0fda      	lsrs	r2, r3, #31
 8009cc8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009ccc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	106d      	asrs	r5, r5, #1
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	f04f 0e16 	mov.w	lr, #22
 8009cda:	4684      	mov	ip, r0
 8009cdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ce0:	eb0c 0401 	add.w	r4, ip, r1
 8009ce4:	4294      	cmp	r4, r2
 8009ce6:	bfde      	ittt	le
 8009ce8:	1b12      	suble	r2, r2, r4
 8009cea:	eb04 0c01 	addle.w	ip, r4, r1
 8009cee:	1840      	addle	r0, r0, r1
 8009cf0:	0052      	lsls	r2, r2, #1
 8009cf2:	f1be 0e01 	subs.w	lr, lr, #1
 8009cf6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009cfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009cfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d02:	d1ed      	bne.n	8009ce0 <__ieee754_sqrt+0x94>
 8009d04:	4671      	mov	r1, lr
 8009d06:	2720      	movs	r7, #32
 8009d08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009d0c:	4562      	cmp	r2, ip
 8009d0e:	eb04 060e 	add.w	r6, r4, lr
 8009d12:	dc02      	bgt.n	8009d1a <__ieee754_sqrt+0xce>
 8009d14:	d113      	bne.n	8009d3e <__ieee754_sqrt+0xf2>
 8009d16:	429e      	cmp	r6, r3
 8009d18:	d811      	bhi.n	8009d3e <__ieee754_sqrt+0xf2>
 8009d1a:	2e00      	cmp	r6, #0
 8009d1c:	eb06 0e04 	add.w	lr, r6, r4
 8009d20:	da43      	bge.n	8009daa <__ieee754_sqrt+0x15e>
 8009d22:	f1be 0f00 	cmp.w	lr, #0
 8009d26:	db40      	blt.n	8009daa <__ieee754_sqrt+0x15e>
 8009d28:	f10c 0801 	add.w	r8, ip, #1
 8009d2c:	eba2 020c 	sub.w	r2, r2, ip
 8009d30:	429e      	cmp	r6, r3
 8009d32:	bf88      	it	hi
 8009d34:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009d38:	1b9b      	subs	r3, r3, r6
 8009d3a:	4421      	add	r1, r4
 8009d3c:	46c4      	mov	ip, r8
 8009d3e:	0052      	lsls	r2, r2, #1
 8009d40:	3f01      	subs	r7, #1
 8009d42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009d46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009d4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d4e:	d1dd      	bne.n	8009d0c <__ieee754_sqrt+0xc0>
 8009d50:	4313      	orrs	r3, r2
 8009d52:	d006      	beq.n	8009d62 <__ieee754_sqrt+0x116>
 8009d54:	1c4c      	adds	r4, r1, #1
 8009d56:	bf13      	iteet	ne
 8009d58:	3101      	addne	r1, #1
 8009d5a:	3001      	addeq	r0, #1
 8009d5c:	4639      	moveq	r1, r7
 8009d5e:	f021 0101 	bicne.w	r1, r1, #1
 8009d62:	1043      	asrs	r3, r0, #1
 8009d64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009d68:	0849      	lsrs	r1, r1, #1
 8009d6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009d6e:	07c2      	lsls	r2, r0, #31
 8009d70:	bf48      	it	mi
 8009d72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009d76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	463d      	mov	r5, r7
 8009d7e:	e77f      	b.n	8009c80 <__ieee754_sqrt+0x34>
 8009d80:	0ada      	lsrs	r2, r3, #11
 8009d82:	3815      	subs	r0, #21
 8009d84:	055b      	lsls	r3, r3, #21
 8009d86:	2a00      	cmp	r2, #0
 8009d88:	d0fa      	beq.n	8009d80 <__ieee754_sqrt+0x134>
 8009d8a:	02d7      	lsls	r7, r2, #11
 8009d8c:	d50a      	bpl.n	8009da4 <__ieee754_sqrt+0x158>
 8009d8e:	f1c1 0420 	rsb	r4, r1, #32
 8009d92:	fa23 f404 	lsr.w	r4, r3, r4
 8009d96:	1e4d      	subs	r5, r1, #1
 8009d98:	408b      	lsls	r3, r1
 8009d9a:	4322      	orrs	r2, r4
 8009d9c:	1b41      	subs	r1, r0, r5
 8009d9e:	e788      	b.n	8009cb2 <__ieee754_sqrt+0x66>
 8009da0:	4608      	mov	r0, r1
 8009da2:	e7f0      	b.n	8009d86 <__ieee754_sqrt+0x13a>
 8009da4:	0052      	lsls	r2, r2, #1
 8009da6:	3101      	adds	r1, #1
 8009da8:	e7ef      	b.n	8009d8a <__ieee754_sqrt+0x13e>
 8009daa:	46e0      	mov	r8, ip
 8009dac:	e7be      	b.n	8009d2c <__ieee754_sqrt+0xe0>
 8009dae:	bf00      	nop
 8009db0:	7ff00000 	.word	0x7ff00000

08009db4 <_init>:
 8009db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db6:	bf00      	nop
 8009db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dba:	bc08      	pop	{r3}
 8009dbc:	469e      	mov	lr, r3
 8009dbe:	4770      	bx	lr

08009dc0 <_fini>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	bf00      	nop
 8009dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc6:	bc08      	pop	{r3}
 8009dc8:	469e      	mov	lr, r3
 8009dca:	4770      	bx	lr
