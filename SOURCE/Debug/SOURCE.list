
SOURCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009570  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030d0  080096f8  080096f8  000196f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c8  0800c7c8  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7c8  0800c7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7d0  0800c7d0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7d0  0800c7d0  0001c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7d4  0800c7d4  0001c7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800c7d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          00000350  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e077  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7d  00000000  00000000  0003e15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  00041dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b0  00000000  00000000  000434f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e23  00000000  00000000  00044aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d447  00000000  00000000  0006a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0675  00000000  00000000  00087d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00168387  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062e8  00000000  00000000  001683dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b4 	.word	0x200000b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080096e0 	.word	0x080096e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b8 	.word	0x200000b8
 80001c4:	080096e0 	.word	0x080096e0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96e 	b.w	8000dd4 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468c      	mov	ip, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8083 	bne.w	8000c26 <__udivmoddi4+0x116>
 8000b20:	428a      	cmp	r2, r1
 8000b22:	4617      	mov	r7, r2
 8000b24:	d947      	bls.n	8000bb6 <__udivmoddi4+0xa6>
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	b142      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2c:	f1c2 0020 	rsb	r0, r2, #32
 8000b30:	fa24 f000 	lsr.w	r0, r4, r0
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4097      	lsls	r7, r2
 8000b38:	ea40 0c01 	orr.w	ip, r0, r1
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbbc f6f8 	udiv	r6, ip, r8
 8000b48:	fa1f fe87 	uxth.w	lr, r7
 8000b4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b54:	fb06 f10e 	mul.w	r1, r6, lr
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 8119 	bcs.w	8000d98 <__udivmoddi4+0x288>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8116 	bls.w	8000d98 <__udivmoddi4+0x288>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	f080 8105 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f240 8102 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba0:	eba4 040e 	sub.w	r4, r4, lr
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xaa>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d150      	bne.n	8000c64 <__udivmoddi4+0x154>
 8000bc2:	1bcb      	subs	r3, r1, r7
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f f887 	uxth.w	r8, r7
 8000bcc:	2601      	movs	r6, #1
 8000bce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd2:	0c21      	lsrs	r1, r4, #16
 8000bd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bdc:	fb08 f30c 	mul.w	r3, r8, ip
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000be4:	1879      	adds	r1, r7, r1
 8000be6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0xe2>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	f200 80e9 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	1ac9      	subs	r1, r1, r3
 8000bf6:	b2a3      	uxth	r3, r4
 8000bf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c04:	fb08 f800 	mul.w	r8, r8, r0
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	d907      	bls.n	8000c1c <__udivmoddi4+0x10c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x10a>
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	f200 80d9 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	eba4 0408 	sub.w	r4, r4, r8
 8000c20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c24:	e7bf      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x12e>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80b1 	beq.w	8000d92 <__udivmoddi4+0x282>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x1cc>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0x140>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80b8 	bhi.w	8000dc0 <__udivmoddi4+0x2b0>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0103 	sbc.w	r1, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0a8      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000c5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f603 	lsr.w	r6, r0, r3
 8000c6c:	4097      	lsls	r7, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	4330      	orrs	r0, r6
 8000c7a:	0c03      	lsrs	r3, r0, #16
 8000c7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f108 	mul.w	r1, r6, r8
 8000c90:	4299      	cmp	r1, r3
 8000c92:	fa04 f402 	lsl.w	r4, r4, r2
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x19c>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9e:	f080 808d 	bcs.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 808a 	bls.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b281      	uxth	r1, r0
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb00 f308 	mul.w	r3, r0, r8
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x1c4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cca:	d273      	bcs.n	8000db4 <__udivmoddi4+0x2a4>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d971      	bls.n	8000db4 <__udivmoddi4+0x2a4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4439      	add	r1, r7
 8000cd4:	1acb      	subs	r3, r1, r3
 8000cd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cda:	e778      	b.n	8000bce <__udivmoddi4+0xbe>
 8000cdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce8:	431c      	orrs	r4, r3
 8000cea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	0c3b      	lsrs	r3, r7, #16
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fa1f f884 	uxth.w	r8, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d12:	458a      	cmp	sl, r1
 8000d14:	fa02 f206 	lsl.w	r2, r2, r6
 8000d18:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x220>
 8000d1e:	1861      	adds	r1, r4, r1
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	d248      	bcs.n	8000db8 <__udivmoddi4+0x2a8>
 8000d26:	458a      	cmp	sl, r1
 8000d28:	d946      	bls.n	8000db8 <__udivmoddi4+0x2a8>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4421      	add	r1, r4
 8000d30:	eba1 010a 	sub.w	r1, r1, sl
 8000d34:	b2bf      	uxth	r7, r7
 8000d36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d42:	fb00 f808 	mul.w	r8, r0, r8
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x24a>
 8000d4a:	19e7      	adds	r7, r4, r7
 8000d4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d50:	d22e      	bcs.n	8000db0 <__udivmoddi4+0x2a0>
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d92c      	bls.n	8000db0 <__udivmoddi4+0x2a0>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4427      	add	r7, r4
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	eba7 0708 	sub.w	r7, r7, r8
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	454f      	cmp	r7, r9
 8000d68:	46c6      	mov	lr, r8
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	d31a      	bcc.n	8000da4 <__udivmoddi4+0x294>
 8000d6e:	d017      	beq.n	8000da0 <__udivmoddi4+0x290>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x27a>
 8000d72:	ebb3 020e 	subs.w	r2, r3, lr
 8000d76:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7e:	40f2      	lsrs	r2, r6
 8000d80:	ea4c 0202 	orr.w	r2, ip, r2
 8000d84:	40f7      	lsrs	r7, r6
 8000d86:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	462e      	mov	r6, r5
 8000d94:	4628      	mov	r0, r5
 8000d96:	e70b      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	e6e9      	b.n	8000b70 <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fd      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da0:	4543      	cmp	r3, r8
 8000da2:	d2e5      	bcs.n	8000d70 <__udivmoddi4+0x260>
 8000da4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dac:	3801      	subs	r0, #1
 8000dae:	e7df      	b.n	8000d70 <__udivmoddi4+0x260>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e7d2      	b.n	8000d5a <__udivmoddi4+0x24a>
 8000db4:	4660      	mov	r0, ip
 8000db6:	e78d      	b.n	8000cd4 <__udivmoddi4+0x1c4>
 8000db8:	4681      	mov	r9, r0
 8000dba:	e7b9      	b.n	8000d30 <__udivmoddi4+0x220>
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	e775      	b.n	8000cac <__udivmoddi4+0x19c>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e74a      	b.n	8000c5a <__udivmoddi4+0x14a>
 8000dc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc8:	4439      	add	r1, r7
 8000dca:	e713      	b.n	8000bf4 <__udivmoddi4+0xe4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	e724      	b.n	8000c1c <__udivmoddi4+0x10c>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	at24c_Check();
 8000ddc:	f000 f83c 	bl	8000e58 <at24c_Check>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	230a      	movs	r3, #10
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f107 030f 	add.w	r3, r7, #15
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2310      	movs	r3, #16
 8000e04:	21a0      	movs	r1, #160	; 0xa0
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <at24c_ReadOneByte+0x34>)
 8000e08:	f004 fc84 	bl	8005714 <HAL_I2C_Mem_Read>
	return temp;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000134 	.word	0x20000134

08000e1c <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af04      	add	r7, sp, #16
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	230a      	movs	r3, #10
 8000e30:	9302      	str	r3, [sp, #8]
 8000e32:	2301      	movs	r3, #1
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	1d7b      	adds	r3, r7, #5
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	21a0      	movs	r1, #160	; 0xa0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <at24c_WriteOneByte+0x38>)
 8000e40:	f004 fb6e 	bl	8005520 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000e44:	2005      	movs	r0, #5
 8000e46:	f002 fef5 	bl	8003c34 <HAL_Delay>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000134 	.word	0x20000134

08000e58 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8000e5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e62:	f7ff ffbf 	bl	8000de4 <at24c_ReadOneByte>
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b55      	cmp	r3, #85	; 0x55
 8000e6e:	d101      	bne.n	8000e74 <at24c_Check+0x1c>
 8000e70:	2300      	movs	r3, #0
 8000e72:	e010      	b.n	8000e96 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8000e74:	2155      	movs	r1, #85	; 0x55
 8000e76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e7a:	f7ff ffcf 	bl	8000e1c <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 8000e7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e82:	f7ff ffaf 	bl	8000de4 <at24c_ReadOneByte>
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b55      	cmp	r3, #85	; 0x55
 8000e8e:	d101      	bne.n	8000e94 <at24c_Check+0x3c>
 8000e90:	2300      	movs	r3, #0
 8000e92:	e000      	b.n	8000e96 <at24c_Check+0x3e>
	}
	return 1;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 8000e9e:	b590      	push	{r4, r7, lr}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	6039      	str	r1, [r7, #0]
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8000eae:	e00d      	b.n	8000ecc <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	80fa      	strh	r2, [r7, #6]
 8000eb6:	683c      	ldr	r4, [r7, #0]
 8000eb8:	1c62      	adds	r2, r4, #1
 8000eba:	603a      	str	r2, [r7, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff91 	bl	8000de4 <at24c_ReadOneByte>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ee      	bne.n	8000eb0 <at24c_Read+0x12>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	80fb      	strh	r3, [r7, #6]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8000eec:	e00c      	b.n	8000f08 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff90 	bl	8000e1c <at24c_WriteOneByte>
		WriteAddr++;
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	3301      	adds	r3, #1
 8000f00:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	80ba      	strh	r2, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1ed      	bne.n	8000eee <at24c_Write+0x12>
	}
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2108      	movs	r1, #8
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <button_init+0x14>)
 8000f26:	f004 f983 	bl	8005230 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020c00 	.word	0x40020c00

08000f34 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <buzzer_init+0x10>)
 8000f3c:	f006 fafc 	bl	8007538 <HAL_TIM_PWM_Start>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000220 	.word	0x20000220

08000f48 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000f4c:	201e      	movs	r0, #30
 8000f4e:	f002 fdb1 	bl	8003ab4 <DEC2BCD>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <ds3231_init+0x80>)
 8000f58:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000f5a:	2016      	movs	r0, #22
 8000f5c:	f002 fdaa 	bl	8003ab4 <DEC2BCD>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <ds3231_init+0x80>)
 8000f66:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000f68:	2015      	movs	r0, #21
 8000f6a:	f002 fda3 	bl	8003ab4 <DEC2BCD>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <ds3231_init+0x80>)
 8000f74:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000f76:	2006      	movs	r0, #6
 8000f78:	f002 fd9c 	bl	8003ab4 <DEC2BCD>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <ds3231_init+0x80>)
 8000f82:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000f84:	200f      	movs	r0, #15
 8000f86:	f002 fd95 	bl	8003ab4 <DEC2BCD>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <ds3231_init+0x80>)
 8000f90:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000f92:	2009      	movs	r0, #9
 8000f94:	f002 fd8e 	bl	8003ab4 <DEC2BCD>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <ds3231_init+0x80>)
 8000f9e:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000fa0:	2017      	movs	r0, #23
 8000fa2:	f002 fd87 	bl	8003ab4 <DEC2BCD>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <ds3231_init+0x80>)
 8000fac:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000fae:	2332      	movs	r3, #50	; 0x32
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	21d0      	movs	r1, #208	; 0xd0
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <ds3231_init+0x84>)
 8000fb6:	f004 fdd3 	bl	8005b60 <HAL_I2C_IsDeviceReady>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d000      	beq.n	8000fc2 <ds3231_init+0x7a>
		while(1);
 8000fc0:	e7fe      	b.n	8000fc0 <ds3231_init+0x78>
	};
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000f0 	.word	0x200000f0
 8000fcc:	20000134 	.word	0x20000134

08000fd0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <LCD_WR_REG+0x1c>)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	8013      	strh	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	600ffffe 	.word	0x600ffffe

08000ff0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <LCD_WR_DATA+0x1c>)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	8053      	strh	r3, [r2, #2]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	600ffffe 	.word	0x600ffffe

08001010 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <LCD_RD_DATA+0x20>)
 8001018:	885b      	ldrh	r3, [r3, #2]
 800101a:	b29b      	uxth	r3, r3
 800101c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	b29b      	uxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	600ffffe 	.word	0x600ffffe

08001034 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4604      	mov	r4, r0
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4623      	mov	r3, r4
 8001044:	80fb      	strh	r3, [r7, #6]
 8001046:	4603      	mov	r3, r0
 8001048:	80bb      	strh	r3, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]
 800104e:	4613      	mov	r3, r2
 8001050:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001052:	202a      	movs	r0, #42	; 0x2a
 8001054:	f7ff ffbc 	bl	8000fd0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	0a1b      	lsrs	r3, r3, #8
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffc6 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b29b      	uxth	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffc0 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffba 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffb4 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001088:	202b      	movs	r0, #43	; 0x2b
 800108a:	f7ff ffa1 	bl	8000fd0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800108e:	88bb      	ldrh	r3, [r7, #4]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffab 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffa5 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80010a6:	883b      	ldrh	r3, [r7, #0]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff9f 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80010b2:	883b      	ldrh	r3, [r7, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff99 	bl	8000ff0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80010be:	202c      	movs	r0, #44	; 0x2c
 80010c0:	f7ff ff86 	bl	8000fd0 <LCD_WR_REG>
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}

080010cc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <lcd_Clear+0x60>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	3b01      	subs	r3, #1
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <lcd_Clear+0x60>)
 80010e0:	885b      	ldrh	r3, [r3, #2]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff ffa3 	bl	8001034 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	81fb      	strh	r3, [r7, #14]
 80010f2:	e011      	b.n	8001118 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	81bb      	strh	r3, [r7, #12]
 80010f8:	e006      	b.n	8001108 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff77 	bl	8000ff0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001102:	89bb      	ldrh	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	81bb      	strh	r3, [r7, #12]
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <lcd_Clear+0x60>)
 800110a:	885b      	ldrh	r3, [r3, #2]
 800110c:	89ba      	ldrh	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3f3      	bcc.n	80010fa <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	3301      	adds	r3, #1
 8001116:	81fb      	strh	r3, [r7, #14]
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <lcd_Clear+0x60>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	89fa      	ldrh	r2, [r7, #14]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3e8      	bcc.n	80010f4 <lcd_Clear+0x28>
		}
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000f8 	.word	0x200000f8

08001130 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	3b01      	subs	r3, #1
 8001152:	b29a      	uxth	r2, r3
 8001154:	883b      	ldrh	r3, [r7, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	88b9      	ldrh	r1, [r7, #4]
 800115c:	88f8      	ldrh	r0, [r7, #6]
 800115e:	f7ff ff69 	bl	8001034 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	81fb      	strh	r3, [r7, #14]
 8001166:	e010      	b.n	800118a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	81bb      	strh	r3, [r7, #12]
 800116c:	e006      	b.n	800117c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800116e:	8c3b      	ldrh	r3, [r7, #32]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff3d 	bl	8000ff0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001176:	89bb      	ldrh	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	81bb      	strh	r3, [r7, #12]
 800117c:	89ba      	ldrh	r2, [r7, #12]
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	429a      	cmp	r2, r3
 8001182:	d3f4      	bcc.n	800116e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	3301      	adds	r3, #1
 8001188:	81fb      	strh	r3, [r7, #14]
 800118a:	89fa      	ldrh	r2, [r7, #14]
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d3ea      	bcc.n	8001168 <lcd_Fill+0x38>
		}
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
 80011a6:	460b      	mov	r3, r1
 80011a8:	80bb      	strh	r3, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80011ae:	88bb      	ldrh	r3, [r7, #4]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	88b9      	ldrh	r1, [r7, #4]
 80011b4:	88f8      	ldrh	r0, [r7, #6]
 80011b6:	f7ff ff3d 	bl	8001034 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff17 	bl	8000ff0 <LCD_WR_DATA>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b08d      	sub	sp, #52	; 0x34
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4604      	mov	r4, r0
 80011d2:	4608      	mov	r0, r1
 80011d4:	4611      	mov	r1, r2
 80011d6:	461a      	mov	r2, r3
 80011d8:	4623      	mov	r3, r4
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	4603      	mov	r3, r0
 80011de:	80bb      	strh	r3, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80011f8:	883a      	ldrh	r2, [r7, #0]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	2b00      	cmp	r3, #0
 800120c:	dd02      	ble.n	8001214 <lcd_DrawLine+0x4a>
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e00b      	b.n	800122c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <lcd_DrawLine+0x56>
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	e005      	b.n	800122c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	425b      	negs	r3, r3
 800122a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd02      	ble.n	8001238 <lcd_DrawLine+0x6e>
 8001232:	2301      	movs	r3, #1
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	e00b      	b.n	8001250 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <lcd_DrawLine+0x7a>
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	e005      	b.n	8001250 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	425b      	negs	r3, r3
 800124e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001250:	6a3a      	ldr	r2, [r7, #32]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	429a      	cmp	r2, r3
 8001256:	dd02      	ble.n	800125e <lcd_DrawLine+0x94>
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	e001      	b.n	8001262 <lcd_DrawLine+0x98>
	else distance=delta_y;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001262:	2300      	movs	r3, #0
 8001264:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001266:	e02b      	b.n	80012c0 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	b29b      	uxth	r3, r3
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	b291      	uxth	r1, r2
 8001270:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff91 	bl	800119c <lcd_DrawPoint>
		xerr+=delta_x;
 800127a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	4413      	add	r3, r2
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 800128a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	429a      	cmp	r2, r3
 8001290:	dd07      	ble.n	80012a2 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80012a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dd07      	ble.n	80012ba <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80012aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4413      	add	r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80012ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012bc:	3301      	adds	r3, #1
 80012be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80012c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dacf      	bge.n	8001268 <lcd_DrawLine+0x9e>
		}
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3734      	adds	r7, #52	; 0x34
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
	...

080012d4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	4611      	mov	r1, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	4603      	mov	r3, r0
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
 80012ee:	4613      	mov	r3, r2
 80012f0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80012fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012fe:	085b      	lsrs	r3, r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b29a      	uxth	r2, r3
 8001320:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001324:	b29b      	uxth	r3, r3
 8001326:	fb12 f303 	smulbb	r3, r2, r3
 800132a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	3b20      	subs	r3, #32
 8001330:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	b29a      	uxth	r2, r3
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4413      	add	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	3b01      	subs	r3, #1
 800133e:	b29c      	uxth	r4, r3
 8001340:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001344:	b29a      	uxth	r2, r3
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	88b9      	ldrh	r1, [r7, #4]
 8001352:	88f8      	ldrh	r0, [r7, #6]
 8001354:	4622      	mov	r2, r4
 8001356:	f7ff fe6d 	bl	8001034 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800135a:	2300      	movs	r3, #0
 800135c:	827b      	strh	r3, [r7, #18]
 800135e:	e07a      	b.n	8001456 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d028      	beq.n	80013ba <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001368:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800136c:	2b10      	cmp	r3, #16
 800136e:	d108      	bne.n	8001382 <lcd_ShowChar+0xae>
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	8a7b      	ldrh	r3, [r7, #18]
 8001374:	493c      	ldr	r1, [pc, #240]	; (8001468 <lcd_ShowChar+0x194>)
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	440a      	add	r2, r1
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	75fb      	strb	r3, [r7, #23]
 8001380:	e01b      	b.n	80013ba <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001382:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001386:	2b18      	cmp	r3, #24
 8001388:	d10b      	bne.n	80013a2 <lcd_ShowChar+0xce>
 800138a:	78fa      	ldrb	r2, [r7, #3]
 800138c:	8a79      	ldrh	r1, [r7, #18]
 800138e:	4837      	ldr	r0, [pc, #220]	; (800146c <lcd_ShowChar+0x198>)
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4403      	add	r3, r0
 800139a:	440b      	add	r3, r1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	75fb      	strb	r3, [r7, #23]
 80013a0:	e00b      	b.n	80013ba <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80013a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013a6:	2b20      	cmp	r3, #32
 80013a8:	d15a      	bne.n	8001460 <lcd_ShowChar+0x18c>
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	8a7b      	ldrh	r3, [r7, #18]
 80013ae:	4930      	ldr	r1, [pc, #192]	; (8001470 <lcd_ShowChar+0x19c>)
 80013b0:	0192      	lsls	r2, r2, #6
 80013b2:	440a      	add	r2, r1
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	75bb      	strb	r3, [r7, #22]
 80013be:	e044      	b.n	800144a <lcd_ShowChar+0x176>
		{
			if(!mode)
 80013c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d120      	bne.n	800140a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80013c8:	7dfa      	ldrb	r2, [r7, #23]
 80013ca:	7dbb      	ldrb	r3, [r7, #22]
 80013cc:	fa42 f303 	asr.w	r3, r2, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <lcd_ShowChar+0x10e>
 80013d8:	883b      	ldrh	r3, [r7, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe08 	bl	8000ff0 <LCD_WR_DATA>
 80013e0:	e003      	b.n	80013ea <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80013e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe03 	bl	8000ff0 <LCD_WR_DATA>
				m++;
 80013ea:	7d7b      	ldrb	r3, [r7, #21]
 80013ec:	3301      	adds	r3, #1
 80013ee:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80013f0:	7d7b      	ldrb	r3, [r7, #21]
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80013f8:	fb02 f201 	mul.w	r2, r2, r1
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11f      	bne.n	8001444 <lcd_ShowChar+0x170>
				{
					m=0;
 8001404:	2300      	movs	r3, #0
 8001406:	757b      	strb	r3, [r7, #21]
					break;
 8001408:	e022      	b.n	8001450 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800140a:	7dfa      	ldrb	r2, [r7, #23]
 800140c:	7dbb      	ldrb	r3, [r7, #22]
 800140e:	fa42 f303 	asr.w	r3, r2, r3
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <lcd_ShowChar+0x152>
 800141a:	883a      	ldrh	r2, [r7, #0]
 800141c:	88b9      	ldrh	r1, [r7, #4]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff febb 	bl	800119c <lcd_DrawPoint>
				x++;
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	3301      	adds	r3, #1
 800142a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	8a3b      	ldrh	r3, [r7, #16]
 8001430:	1ad2      	subs	r2, r2, r3
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	429a      	cmp	r2, r3
 8001436:	d105      	bne.n	8001444 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001438:	8a3b      	ldrh	r3, [r7, #16]
 800143a:	80fb      	strh	r3, [r7, #6]
					y++;
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	80bb      	strh	r3, [r7, #4]
					break;
 8001442:	e005      	b.n	8001450 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001444:	7dbb      	ldrb	r3, [r7, #22]
 8001446:	3301      	adds	r3, #1
 8001448:	75bb      	strb	r3, [r7, #22]
 800144a:	7dbb      	ldrb	r3, [r7, #22]
 800144c:	2b07      	cmp	r3, #7
 800144e:	d9b7      	bls.n	80013c0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001450:	8a7b      	ldrh	r3, [r7, #18]
 8001452:	3301      	adds	r3, #1
 8001454:	827b      	strh	r3, [r7, #18]
 8001456:	8a7a      	ldrh	r2, [r7, #18]
 8001458:	89bb      	ldrh	r3, [r7, #12]
 800145a:	429a      	cmp	r2, r3
 800145c:	d380      	bcc.n	8001360 <lcd_ShowChar+0x8c>
 800145e:	e000      	b.n	8001462 <lcd_ShowChar+0x18e>
		else return;
 8001460:	bf00      	nop
				}
			}
		}
	}
}
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	08009828 	.word	0x08009828
 800146c:	08009e18 	.word	0x08009e18
 8001470:	0800afe8 	.word	0x0800afe8

08001474 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <lcd_SetDir+0x44>)
 8001490:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001494:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <lcd_SetDir+0x44>)
 8001498:	22f0      	movs	r2, #240	; 0xf0
 800149a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800149c:	e006      	b.n	80014ac <lcd_SetDir+0x38>
		lcddev.width=240;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <lcd_SetDir+0x44>)
 80014a0:	22f0      	movs	r2, #240	; 0xf0
 80014a2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <lcd_SetDir+0x44>)
 80014a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014aa:	805a      	strh	r2, [r3, #2]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	200000f8 	.word	0x200000f8

080014bc <lcd_init>:


void lcd_init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c6:	48aa      	ldr	r0, [pc, #680]	; (8001770 <lcd_init+0x2b4>)
 80014c8:	f003 feb2 	bl	8005230 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80014cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d0:	f002 fbb0 	bl	8003c34 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	48a5      	ldr	r0, [pc, #660]	; (8001770 <lcd_init+0x2b4>)
 80014dc:	f003 fea8 	bl	8005230 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80014e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e4:	f002 fba6 	bl	8003c34 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff ffc3 	bl	8001474 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80014ee:	20d3      	movs	r0, #211	; 0xd3
 80014f0:	f7ff fd6e 	bl	8000fd0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80014f4:	f7ff fd8c 	bl	8001010 <LCD_RD_DATA>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b9d      	ldr	r3, [pc, #628]	; (8001774 <lcd_init+0x2b8>)
 80014fe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001500:	f7ff fd86 	bl	8001010 <LCD_RD_DATA>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b9a      	ldr	r3, [pc, #616]	; (8001774 <lcd_init+0x2b8>)
 800150a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800150c:	f7ff fd80 	bl	8001010 <LCD_RD_DATA>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4b97      	ldr	r3, [pc, #604]	; (8001774 <lcd_init+0x2b8>)
 8001516:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001518:	4b96      	ldr	r3, [pc, #600]	; (8001774 <lcd_init+0x2b8>)
 800151a:	889b      	ldrh	r3, [r3, #4]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b94      	ldr	r3, [pc, #592]	; (8001774 <lcd_init+0x2b8>)
 8001522:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001524:	f7ff fd74 	bl	8001010 <LCD_RD_DATA>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b91      	ldr	r3, [pc, #580]	; (8001774 <lcd_init+0x2b8>)
 800152e:	889b      	ldrh	r3, [r3, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b8f      	ldr	r3, [pc, #572]	; (8001774 <lcd_init+0x2b8>)
 8001536:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001538:	20cf      	movs	r0, #207	; 0xcf
 800153a:	f7ff fd49 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff fd56 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001544:	20c1      	movs	r0, #193	; 0xc1
 8001546:	f7ff fd53 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800154a:	2030      	movs	r0, #48	; 0x30
 800154c:	f7ff fd50 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001550:	20ed      	movs	r0, #237	; 0xed
 8001552:	f7ff fd3d 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001556:	2064      	movs	r0, #100	; 0x64
 8001558:	f7ff fd4a 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800155c:	2003      	movs	r0, #3
 800155e:	f7ff fd47 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001562:	2012      	movs	r0, #18
 8001564:	f7ff fd44 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001568:	2081      	movs	r0, #129	; 0x81
 800156a:	f7ff fd41 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800156e:	20e8      	movs	r0, #232	; 0xe8
 8001570:	f7ff fd2e 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001574:	2085      	movs	r0, #133	; 0x85
 8001576:	f7ff fd3b 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800157a:	2010      	movs	r0, #16
 800157c:	f7ff fd38 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001580:	207a      	movs	r0, #122	; 0x7a
 8001582:	f7ff fd35 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001586:	20cb      	movs	r0, #203	; 0xcb
 8001588:	f7ff fd22 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800158c:	2039      	movs	r0, #57	; 0x39
 800158e:	f7ff fd2f 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001592:	202c      	movs	r0, #44	; 0x2c
 8001594:	f7ff fd2c 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fd29 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800159e:	2034      	movs	r0, #52	; 0x34
 80015a0:	f7ff fd26 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff fd23 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80015aa:	20f7      	movs	r0, #247	; 0xf7
 80015ac:	f7ff fd10 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80015b0:	2020      	movs	r0, #32
 80015b2:	f7ff fd1d 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80015b6:	20ea      	movs	r0, #234	; 0xea
 80015b8:	f7ff fd0a 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fd17 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fd14 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80015c8:	20c0      	movs	r0, #192	; 0xc0
 80015ca:	f7ff fd01 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80015ce:	201b      	movs	r0, #27
 80015d0:	f7ff fd0e 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80015d4:	20c1      	movs	r0, #193	; 0xc1
 80015d6:	f7ff fcfb 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff fd08 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80015e0:	20c5      	movs	r0, #197	; 0xc5
 80015e2:	f7ff fcf5 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80015e6:	2030      	movs	r0, #48	; 0x30
 80015e8:	f7ff fd02 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80015ec:	2030      	movs	r0, #48	; 0x30
 80015ee:	f7ff fcff 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80015f2:	20c7      	movs	r0, #199	; 0xc7
 80015f4:	f7ff fcec 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80015f8:	20b7      	movs	r0, #183	; 0xb7
 80015fa:	f7ff fcf9 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80015fe:	2036      	movs	r0, #54	; 0x36
 8001600:	f7ff fce6 	bl	8000fd0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001604:	2008      	movs	r0, #8
 8001606:	f7ff fcf3 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800160a:	203a      	movs	r0, #58	; 0x3a
 800160c:	f7ff fce0 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001610:	2055      	movs	r0, #85	; 0x55
 8001612:	f7ff fced 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001616:	20b1      	movs	r0, #177	; 0xb1
 8001618:	f7ff fcda 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fce7 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001622:	201a      	movs	r0, #26
 8001624:	f7ff fce4 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001628:	20b6      	movs	r0, #182	; 0xb6
 800162a:	f7ff fcd1 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800162e:	200a      	movs	r0, #10
 8001630:	f7ff fcde 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001634:	20a2      	movs	r0, #162	; 0xa2
 8001636:	f7ff fcdb 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800163a:	20f2      	movs	r0, #242	; 0xf2
 800163c:	f7ff fcc8 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fcd5 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001646:	2026      	movs	r0, #38	; 0x26
 8001648:	f7ff fcc2 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fccf 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001652:	20e0      	movs	r0, #224	; 0xe0
 8001654:	f7ff fcbc 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001658:	200f      	movs	r0, #15
 800165a:	f7ff fcc9 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800165e:	202a      	movs	r0, #42	; 0x2a
 8001660:	f7ff fcc6 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001664:	2028      	movs	r0, #40	; 0x28
 8001666:	f7ff fcc3 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800166a:	2008      	movs	r0, #8
 800166c:	f7ff fcc0 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001670:	200e      	movs	r0, #14
 8001672:	f7ff fcbd 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001676:	2008      	movs	r0, #8
 8001678:	f7ff fcba 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800167c:	2054      	movs	r0, #84	; 0x54
 800167e:	f7ff fcb7 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001682:	20a9      	movs	r0, #169	; 0xa9
 8001684:	f7ff fcb4 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001688:	2043      	movs	r0, #67	; 0x43
 800168a:	f7ff fcb1 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800168e:	200a      	movs	r0, #10
 8001690:	f7ff fcae 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001694:	200f      	movs	r0, #15
 8001696:	f7ff fcab 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fca8 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fca5 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fca2 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fc9f 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80016b2:	20e1      	movs	r0, #225	; 0xe1
 80016b4:	f7ff fc8c 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fc99 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80016be:	2015      	movs	r0, #21
 80016c0:	f7ff fc96 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80016c4:	2017      	movs	r0, #23
 80016c6:	f7ff fc93 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80016ca:	2007      	movs	r0, #7
 80016cc:	f7ff fc90 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80016d0:	2011      	movs	r0, #17
 80016d2:	f7ff fc8d 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80016d6:	2006      	movs	r0, #6
 80016d8:	f7ff fc8a 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80016dc:	202b      	movs	r0, #43	; 0x2b
 80016de:	f7ff fc87 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80016e2:	2056      	movs	r0, #86	; 0x56
 80016e4:	f7ff fc84 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80016e8:	203c      	movs	r0, #60	; 0x3c
 80016ea:	f7ff fc81 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80016ee:	2005      	movs	r0, #5
 80016f0:	f7ff fc7e 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80016f4:	2010      	movs	r0, #16
 80016f6:	f7ff fc7b 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f7ff fc78 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001700:	203f      	movs	r0, #63	; 0x3f
 8001702:	f7ff fc75 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001706:	203f      	movs	r0, #63	; 0x3f
 8001708:	f7ff fc72 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800170c:	200f      	movs	r0, #15
 800170e:	f7ff fc6f 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001712:	202b      	movs	r0, #43	; 0x2b
 8001714:	f7ff fc5c 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fc69 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fc66 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff fc63 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800172a:	203f      	movs	r0, #63	; 0x3f
 800172c:	f7ff fc60 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001730:	202a      	movs	r0, #42	; 0x2a
 8001732:	f7ff fc4d 	bl	8000fd0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fc5a 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fc57 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fc54 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001748:	20ef      	movs	r0, #239	; 0xef
 800174a:	f7ff fc51 	bl	8000ff0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800174e:	2011      	movs	r0, #17
 8001750:	f7ff fc3e 	bl	8000fd0 <LCD_WR_REG>
	HAL_Delay(120);
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f002 fa6d 	bl	8003c34 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800175a:	2029      	movs	r0, #41	; 0x29
 800175c:	f7ff fc38 	bl	8000fd0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001766:	4804      	ldr	r0, [pc, #16]	; (8001778 <lcd_init+0x2bc>)
 8001768:	f003 fd62 	bl	8005230 <HAL_GPIO_WritePin>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40020800 	.word	0x40020800
 8001774:	200000f8 	.word	0x200000f8
 8001778:	40020000 	.word	0x40020000

0800177c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	b29a      	uxth	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	b29b      	uxth	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b298      	uxth	r0, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	b29a      	uxth	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	4413      	add	r3, r2
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	8b3a      	ldrh	r2, [r7, #24]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fcf9 	bl	800119c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b298      	uxth	r0, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	8b3a      	ldrh	r2, [r7, #24]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fce9 	bl	800119c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b298      	uxth	r0, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	8b3a      	ldrh	r2, [r7, #24]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fcd9 	bl	800119c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	b298      	uxth	r0, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	8b3a      	ldrh	r2, [r7, #24]
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff fcc9 	bl	800119c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	b29a      	uxth	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b298      	uxth	r0, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	b29a      	uxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4413      	add	r3, r2
 8001820:	b29b      	uxth	r3, r3
 8001822:	8b3a      	ldrh	r2, [r7, #24]
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff fcb9 	bl	800119c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b29a      	uxth	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b298      	uxth	r0, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	b29b      	uxth	r3, r3
 800183e:	4413      	add	r3, r2
 8001840:	b29b      	uxth	r3, r3
 8001842:	8b3a      	ldrh	r2, [r7, #24]
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff fca9 	bl	800119c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	b29a      	uxth	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b298      	uxth	r0, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	8b3a      	ldrh	r2, [r7, #24]
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff fc99 	bl	800119c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	b29a      	uxth	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b298      	uxth	r0, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	8b3a      	ldrh	r2, [r7, #24]
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff fc89 	bl	800119c <lcd_DrawPoint>
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b08a      	sub	sp, #40	; 0x28
 8001896:	af02      	add	r7, sp, #8
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	f1c3 0303 	rsb	r3, r3, #3
 80018b2:	613b      	str	r3, [r7, #16]


	if (fill)
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d04f      	beq.n	800195a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80018ba:	e029      	b.n	8001910 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e00a      	b.n	80018d8 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff ff55 	bl	800177c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	429a      	cmp	r2, r3
 80018de:	ddf0      	ble.n	80018c2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da06      	bge.n	80018f4 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	009a      	lsls	r2, r3, #2
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	3306      	adds	r3, #6
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	e00a      	b.n	800190a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	009a      	lsls	r2, r3, #2
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4413      	add	r3, r2
 8001900:	330a      	adds	r3, #10
 8001902:	613b      	str	r3, [r7, #16]
				y--;
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	3b01      	subs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	429a      	cmp	r2, r3
 8001916:	ddd1      	ble.n	80018bc <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001918:	e023      	b.n	8001962 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff ff29 	bl	800177c <_draw_circle_8>
			if (d < 0) {
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	da06      	bge.n	800193e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	009a      	lsls	r2, r3, #2
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4413      	add	r3, r2
 8001938:	3306      	adds	r3, #6
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	e00a      	b.n	8001954 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4413      	add	r3, r2
 800194a:	330a      	adds	r3, #10
 800194c:	613b      	str	r3, [r7, #16]
				y--;
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	3b01      	subs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
			x++;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	3301      	adds	r3, #1
 8001958:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	429a      	cmp	r2, r3
 8001960:	dddb      	ble.n	800191a <lcd_DrawCircle+0x88>
}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af04      	add	r7, sp, #16
 8001972:	60ba      	str	r2, [r7, #8]
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	81fb      	strh	r3, [r7, #14]
 800197a:	460b      	mov	r3, r1
 800197c:	81bb      	strh	r3, [r7, #12]
 800197e:	4613      	mov	r3, r2
 8001980:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800198a:	e048      	b.n	8001a1e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d145      	bne.n	8001a1e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001992:	89fa      	ldrh	r2, [r7, #14]
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <lcd_ShowStr+0xc4>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	1acb      	subs	r3, r1, r3
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dc3f      	bgt.n	8001a28 <lcd_ShowStr+0xbc>
 80019a8:	89ba      	ldrh	r2, [r7, #12]
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <lcd_ShowStr+0xc4>)
 80019ac:	885b      	ldrh	r3, [r3, #2]
 80019ae:	4619      	mov	r1, r3
 80019b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b4:	1acb      	subs	r3, r1, r3
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dc36      	bgt.n	8001a28 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b80      	cmp	r3, #128	; 0x80
 80019c0:	d902      	bls.n	80019c8 <lcd_ShowStr+0x5c>
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
 80019c6:	e02a      	b.n	8001a1e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b0d      	cmp	r3, #13
 80019ce:	d10b      	bne.n	80019e8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80019d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	89bb      	ldrh	r3, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80019dc:	8abb      	ldrh	r3, [r7, #20]
 80019de:	81fb      	strh	r3, [r7, #14]
					str++;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	e017      	b.n	8001a18 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	88fc      	ldrh	r4, [r7, #6]
 80019ee:	89b9      	ldrh	r1, [r7, #12]
 80019f0:	89f8      	ldrh	r0, [r7, #14]
 80019f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4623      	mov	r3, r4
 8001a04:	f7ff fc66 	bl	80012d4 <lcd_ShowChar>
					x+=sizey/2;
 8001a08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	4413      	add	r3, r2
 8001a16:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1b2      	bne.n	800198c <lcd_ShowStr+0x20>
 8001a26:	e000      	b.n	8001a2a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001a28:	bf00      	nop
			}
		}
	}
}
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	200000f8 	.word	0x200000f8

08001a34 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <led7_init+0x14>)
 8001a3e:	f003 fbf7 	bl	8005230 <HAL_GPIO_WritePin>
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021800 	.word	0x40021800

08001a4c <led7_Scan>:

void led7_Scan(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <led7_Scan+0x104>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <led7_Scan+0x104>)
 8001a5a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <led7_Scan+0x108>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3d      	ldr	r2, [pc, #244]	; (8001b58 <led7_Scan+0x10c>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <led7_Scan+0x104>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <led7_Scan+0x104>)
 8001a76:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <led7_Scan+0x108>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d847      	bhi.n	8001b10 <led7_Scan+0xc4>
 8001a80:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <led7_Scan+0x3c>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001ab7 	.word	0x08001ab7
 8001a90:	08001ad5 	.word	0x08001ad5
 8001a94:	08001af3 	.word	0x08001af3
	case 0:
		spi_buffer |= 0x00b0;
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <led7_Scan+0x104>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <led7_Scan+0x104>)
 8001aa4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <led7_Scan+0x104>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <led7_Scan+0x104>)
 8001ab2:	801a      	strh	r2, [r3, #0]
		break;
 8001ab4:	e02d      	b.n	8001b12 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <led7_Scan+0x104>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <led7_Scan+0x104>)
 8001ac2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <led7_Scan+0x104>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	f023 0320 	bic.w	r3, r3, #32
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <led7_Scan+0x104>)
 8001ad0:	801a      	strh	r2, [r3, #0]
		break;
 8001ad2:	e01e      	b.n	8001b12 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <led7_Scan+0x104>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <led7_Scan+0x104>)
 8001ae0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <led7_Scan+0x104>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	f023 0310 	bic.w	r3, r3, #16
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <led7_Scan+0x104>)
 8001aee:	801a      	strh	r2, [r3, #0]
		break;
 8001af0:	e00f      	b.n	8001b12 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <led7_Scan+0x104>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <led7_Scan+0x104>)
 8001afe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <led7_Scan+0x104>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <led7_Scan+0x104>)
 8001b0c:	801a      	strh	r2, [r3, #0]
		break;
 8001b0e:	e000      	b.n	8001b12 <led7_Scan+0xc6>
	default:
		break;
 8001b10:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <led7_Scan+0x108>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	425a      	negs	r2, r3
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	bf58      	it	pl
 8001b24:	4253      	negpl	r3, r2
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <led7_Scan+0x108>)
 8001b28:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2140      	movs	r1, #64	; 0x40
 8001b2e:	480b      	ldr	r0, [pc, #44]	; (8001b5c <led7_Scan+0x110>)
 8001b30:	f003 fb7e 	bl	8005230 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001b34:	2301      	movs	r3, #1
 8001b36:	2202      	movs	r2, #2
 8001b38:	4905      	ldr	r1, [pc, #20]	; (8001b50 <led7_Scan+0x104>)
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <led7_Scan+0x114>)
 8001b3c:	f005 f997 	bl	8006e6e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2140      	movs	r1, #64	; 0x40
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <led7_Scan+0x110>)
 8001b46:	f003 fb73 	bl	8005230 <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000004 	.word	0x20000004
 8001b54:	200000d0 	.word	0x200000d0
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	20000354 	.word	0x20000354

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b598      	push	{r3, r4, r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b68:	f001 fff2 	bl	8003b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6c:	f000 f844 	bl	8001bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b70:	f000 face 	bl	8002110 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b74:	f000 f9e8 	bl	8001f48 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001b78:	f000 f960 	bl	8001e3c <MX_SPI1_Init>
  MX_FSMC_Init();
 8001b7c:	f000 fbde 	bl	800233c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001b80:	f000 fa7c 	bl	800207c <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001b84:	f000 faa4 	bl	80020d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b88:	f000 f8a0 	bl	8001ccc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b8c:	f000 f928 	bl	8001de0 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001b90:	f000 fa26 	bl	8001fe0 <MX_TIM13_Init>
  MX_TIM1_Init();
 8001b94:	f000 f988 	bl	8001ea8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001b98:	f000 fc4a 	bl	8002430 <system_init>
  touch_Adjust ();
 8001b9c:	f001 fb44 	bl	8003228 <touch_Adjust>
  lcd_Clear(BLACK);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fa93 	bl	80010cc <lcd_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  touch_Scan();
 8001ba6:	f001 ff25 	bl	80039f4 <touch_Scan>
	  if( touch_IsTouched() && draw_Status == DRAW ){
 8001baa:	f001 ff2d 	bl	8003a08 <touch_IsTouched>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <main+0x72>
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <main+0x8c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10c      	bne.n	8001bd6 <main+0x72>
	  // draw a point at the touch position
		  lcd_DrawPoint ( touch_GetX(), touch_GetY(), RED);
 8001bbc:	f001 ff36 	bl	8003a2c <touch_GetX>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	f001 ff3e 	bl	8003a44 <touch_GetY>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff fae3 	bl	800119c <lcd_DrawPoint>
	  }

	  while (!flag_timer2);
 8001bd6:	bf00      	nop
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <main+0x90>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0fb      	beq.n	8001bd8 <main+0x74>
	  flag_timer2 = 0;
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <main+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	801a      	strh	r2, [r3, #0]
	  touchProcess ();
 8001be6:	f000 fc95 	bl	8002514 <touchProcess>
	  test_ledDebug();
 8001bea:	f000 fc4b 	bl	8002484 <test_ledDebug>
  {
 8001bee:	e7da      	b.n	8001ba6 <main+0x42>
 8001bf0:	200000d4 	.word	0x200000d4
 8001bf4:	200000da 	.word	0x200000da

08001bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b094      	sub	sp, #80	; 0x50
 8001bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	2230      	movs	r2, #48	; 0x30
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f007 fc7a 	bl	8009500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c60:	2302      	movs	r3, #2
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c6c:	23a8      	movs	r3, #168	; 0xa8
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c74:	2304      	movs	r3, #4
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f004 fbf9 	bl	8006474 <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c88:	f000 fcaa 	bl	80025e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ca2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fe5a 	bl	8006964 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cb6:	f000 fc93 	bl	80025e0 <Error_Handler>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3750      	adds	r7, #80	; 0x50
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000

08001ccc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001ce0:	4a3d      	ldr	r2, [pc, #244]	; (8001dd8 <MX_ADC1_Init+0x10c>)
 8001ce2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001cf0:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d04:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d0c:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <MX_ADC1_Init+0x110>)
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d18:	2205      	movs	r2, #5
 8001d1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d2a:	482a      	ldr	r0, [pc, #168]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d2c:	f001 ffa6 	bl	8003c7c <HAL_ADC_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d36:	f000 fc53 	bl	80025e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d46:	463b      	mov	r3, r7
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4822      	ldr	r0, [pc, #136]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d4c:	f002 f908 	bl	8003f60 <HAL_ADC_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d56:	f000 fc43 	bl	80025e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d5a:	2309      	movs	r3, #9
 8001d5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d62:	463b      	mov	r3, r7
 8001d64:	4619      	mov	r1, r3
 8001d66:	481b      	ldr	r0, [pc, #108]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d68:	f002 f8fa 	bl	8003f60 <HAL_ADC_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001d72:	f000 fc35 	bl	80025e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d76:	230a      	movs	r3, #10
 8001d78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001d84:	f002 f8ec 	bl	8003f60 <HAL_ADC_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001d8e:	f000 fc27 	bl	80025e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d92:	230b      	movs	r3, #11
 8001d94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d96:	2304      	movs	r3, #4
 8001d98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001da0:	f002 f8de 	bl	8003f60 <HAL_ADC_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001daa:	f000 fc19 	bl	80025e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001dae:	230c      	movs	r3, #12
 8001db0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001db2:	2305      	movs	r3, #5
 8001db4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <MX_ADC1_Init+0x108>)
 8001dbc:	f002 f8d0 	bl	8003f60 <HAL_ADC_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001dc6:	f000 fc0b 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001d8 	.word	0x200001d8
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	0f000001 	.word	0x0f000001

08001de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <MX_I2C1_Init+0x54>)
 8001de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001dec:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_I2C1_Init+0x58>)
 8001dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <MX_I2C1_Init+0x50>)
 8001e1e:	f003 fa3b 	bl	8005298 <HAL_I2C_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e28:	f000 fbda 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000134 	.word	0x20000134
 8001e34:	40005400 	.word	0x40005400
 8001e38:	000186a0 	.word	0x000186a0

08001e3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <MX_SPI1_Init+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e88:	220a      	movs	r2, #10
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_SPI1_Init+0x64>)
 8001e8e:	f004 ff65 	bl	8006d5c <HAL_SPI_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e98:	f000 fba2 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000354 	.word	0x20000354
 8001ea4:	40013000 	.word	0x40013000

08001ea8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <MX_TIM1_Init+0x9c>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001ecc:	2253      	movs	r2, #83	; 0x53
 8001ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001ef2:	f005 fa07 	bl	8007304 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001efc:	f000 fb70 	bl	80025e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001f0e:	f005 fda5 	bl	8007a5c <HAL_TIM_ConfigClockSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f18:	f000 fb62 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_TIM1_Init+0x98>)
 8001f2a:	f006 f997 	bl	800825c <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f34:	f000 fb54 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000030c 	.word	0x2000030c
 8001f44:	40010000 	.word	0x40010000

08001f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001f6e:	f240 3247 	movw	r2, #839	; 0x347
 8001f72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001f7c:	2263      	movs	r2, #99	; 0x63
 8001f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8c:	4813      	ldr	r0, [pc, #76]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001f8e:	f005 f9b9 	bl	8007304 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f98:	f000 fb22 	bl	80025e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001faa:	f005 fd57 	bl	8007a5c <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fb4:	f000 fb14 	bl	80025e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM2_Init+0x94>)
 8001fc6:	f006 f949 	bl	800825c <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fd0:	f000 fb06 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200003ac 	.word	0x200003ac

08001fe0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <MX_TIM13_Init+0x94>)
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <MX_TIM13_Init+0x98>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_TIM13_Init+0x94>)
 8002000:	f240 3247 	movw	r2, #839	; 0x347
 8002004:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_TIM13_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <MX_TIM13_Init+0x94>)
 800200e:	2263      	movs	r2, #99	; 0x63
 8002010:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_TIM13_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <MX_TIM13_Init+0x94>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800201e:	4815      	ldr	r0, [pc, #84]	; (8002074 <MX_TIM13_Init+0x94>)
 8002020:	f005 f970 	bl	8007304 <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800202a:	f000 fad9 	bl	80025e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800202e:	4811      	ldr	r0, [pc, #68]	; (8002074 <MX_TIM13_Init+0x94>)
 8002030:	f005 fa28 	bl	8007484 <HAL_TIM_PWM_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800203a:	f000 fad1 	bl	80025e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203e:	2360      	movs	r3, #96	; 0x60
 8002040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <MX_TIM13_Init+0x94>)
 8002056:	f005 fc3f 	bl	80078d8 <HAL_TIM_PWM_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002060:	f000 fabe 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM13_Init+0x94>)
 8002066:	f000 fcd7 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000220 	.word	0x20000220
 8002078:	40001c00 	.word	0x40001c00

0800207c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_USART1_UART_Init+0x50>)
 8002084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART1_UART_Init+0x4c>)
 80020b4:	f006 f962 	bl	800837c <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020be:	f000 fa8f 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000268 	.word	0x20000268
 80020cc:	40011000 	.word	0x40011000

080020d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_DMA_Init+0x3c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <MX_DMA_Init+0x3c>)
 80020e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_DMA_Init+0x3c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2038      	movs	r0, #56	; 0x38
 80020f8:	f002 faad 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020fc:	2038      	movs	r0, #56	; 0x38
 80020fe:	f002 fac6 	bl	800468e <HAL_NVIC_EnableIRQ>

}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800

08002110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
 8002114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	4b7e      	ldr	r3, [pc, #504]	; (8002324 <MX_GPIO_Init+0x214>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a7d      	ldr	r2, [pc, #500]	; (8002324 <MX_GPIO_Init+0x214>)
 8002130:	f043 0310 	orr.w	r3, r3, #16
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <MX_GPIO_Init+0x214>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	4b77      	ldr	r3, [pc, #476]	; (8002324 <MX_GPIO_Init+0x214>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a76      	ldr	r2, [pc, #472]	; (8002324 <MX_GPIO_Init+0x214>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b74      	ldr	r3, [pc, #464]	; (8002324 <MX_GPIO_Init+0x214>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	4b70      	ldr	r3, [pc, #448]	; (8002324 <MX_GPIO_Init+0x214>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a6f      	ldr	r2, [pc, #444]	; (8002324 <MX_GPIO_Init+0x214>)
 8002168:	f043 0320 	orr.w	r3, r3, #32
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <MX_GPIO_Init+0x214>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	4b69      	ldr	r3, [pc, #420]	; (8002324 <MX_GPIO_Init+0x214>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a68      	ldr	r2, [pc, #416]	; (8002324 <MX_GPIO_Init+0x214>)
 8002184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b66      	ldr	r3, [pc, #408]	; (8002324 <MX_GPIO_Init+0x214>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b62      	ldr	r3, [pc, #392]	; (8002324 <MX_GPIO_Init+0x214>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a61      	ldr	r2, [pc, #388]	; (8002324 <MX_GPIO_Init+0x214>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b5f      	ldr	r3, [pc, #380]	; (8002324 <MX_GPIO_Init+0x214>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b5b      	ldr	r3, [pc, #364]	; (8002324 <MX_GPIO_Init+0x214>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a5a      	ldr	r2, [pc, #360]	; (8002324 <MX_GPIO_Init+0x214>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <MX_GPIO_Init+0x214>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b54      	ldr	r3, [pc, #336]	; (8002324 <MX_GPIO_Init+0x214>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a53      	ldr	r2, [pc, #332]	; (8002324 <MX_GPIO_Init+0x214>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b51      	ldr	r3, [pc, #324]	; (8002324 <MX_GPIO_Init+0x214>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <MX_GPIO_Init+0x214>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a4c      	ldr	r2, [pc, #304]	; (8002324 <MX_GPIO_Init+0x214>)
 80021f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <MX_GPIO_Init+0x214>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2170      	movs	r1, #112	; 0x70
 800220a:	4847      	ldr	r0, [pc, #284]	; (8002328 <MX_GPIO_Init+0x218>)
 800220c:	f003 f810 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8002216:	4845      	ldr	r0, [pc, #276]	; (800232c <MX_GPIO_Init+0x21c>)
 8002218:	f003 f80a 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002222:	4843      	ldr	r0, [pc, #268]	; (8002330 <MX_GPIO_Init+0x220>)
 8002224:	f003 f804 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222e:	4841      	ldr	r0, [pc, #260]	; (8002334 <MX_GPIO_Init+0x224>)
 8002230:	f002 fffe 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2108      	movs	r1, #8
 8002238:	483f      	ldr	r0, [pc, #252]	; (8002338 <MX_GPIO_Init+0x228>)
 800223a:	f002 fff9 	bl	8005230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800223e:	2370      	movs	r3, #112	; 0x70
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002252:	4619      	mov	r1, r3
 8002254:	4834      	ldr	r0, [pc, #208]	; (8002328 <MX_GPIO_Init+0x218>)
 8002256:	f002 fe37 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800225a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	482e      	ldr	r0, [pc, #184]	; (800232c <MX_GPIO_Init+0x21c>)
 8002274:	f002 fe28 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X0_Pin INPUT_X1_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8002278:	23c0      	movs	r3, #192	; 0xc0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	482a      	ldr	r0, [pc, #168]	; (8002334 <MX_GPIO_Init+0x224>)
 800228c:	f002 fe1c 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8002290:	2330      	movs	r3, #48	; 0x30
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a0:	4619      	mov	r1, r3
 80022a2:	4822      	ldr	r0, [pc, #136]	; (800232c <MX_GPIO_Init+0x21c>)
 80022a4:	f002 fe10 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80022a8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022be:	4619      	mov	r1, r3
 80022c0:	481b      	ldr	r0, [pc, #108]	; (8002330 <MX_GPIO_Init+0x220>)
 80022c2:	f002 fe01 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_PEN_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80022c6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	4619      	mov	r1, r3
 80022da:	4814      	ldr	r0, [pc, #80]	; (800232c <MX_GPIO_Init+0x21c>)
 80022dc:	f002 fdf4 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80022e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	480e      	ldr	r0, [pc, #56]	; (8002334 <MX_GPIO_Init+0x224>)
 80022fa:	f002 fde5 	bl	8004ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80022fe:	2308      	movs	r3, #8
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002312:	4619      	mov	r1, r3
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <MX_GPIO_Init+0x228>)
 8002316:	f002 fdd7 	bl	8004ec8 <HAL_GPIO_Init>

}
 800231a:	bf00      	nop
 800231c:	3738      	adds	r7, #56	; 0x38
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40021000 	.word	0x40021000
 800232c:	40020800 	.word	0x40020800
 8002330:	40021800 	.word	0x40021800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020c00 	.word	0x40020c00

0800233c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08e      	sub	sp, #56	; 0x38
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	611a      	str	r2, [r3, #16]
 8002352:	615a      	str	r2, [r3, #20]
 8002354:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	615a      	str	r2, [r3, #20]
 8002366:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002368:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <MX_FSMC_Init+0xec>)
 800236a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800236e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <MX_FSMC_Init+0xec>)
 8002372:	4a2e      	ldr	r2, [pc, #184]	; (800242c <MX_FSMC_Init+0xf0>)
 8002374:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002376:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <MX_FSMC_Init+0xec>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <MX_FSMC_Init+0xec>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <MX_FSMC_Init+0xec>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <MX_FSMC_Init+0xec>)
 800238a:	2210      	movs	r2, #16
 800238c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <MX_FSMC_Init+0xec>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <MX_FSMC_Init+0xec>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <MX_FSMC_Init+0xec>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <MX_FSMC_Init+0xec>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <MX_FSMC_Init+0xec>)
 80023a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <MX_FSMC_Init+0xec>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <MX_FSMC_Init+0xec>)
 80023b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_FSMC_Init+0xec>)
 80023be:	2200      	movs	r2, #0
 80023c0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <MX_FSMC_Init+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <MX_FSMC_Init+0xec>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80023ce:	230f      	movs	r3, #15
 80023d0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80023d2:	230f      	movs	r3, #15
 80023d4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80023d6:	233c      	movs	r3, #60	; 0x3c
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80023de:	2310      	movs	r3, #16
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80023e2:	2311      	movs	r3, #17
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80023ea:	2308      	movs	r3, #8
 80023ec:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80023ee:	230f      	movs	r3, #15
 80023f0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80023f2:	2309      	movs	r3, #9
 80023f4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80023fa:	2310      	movs	r3, #16
 80023fc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80023fe:	2311      	movs	r3, #17
 8002400:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002406:	463a      	mov	r2, r7
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <MX_FSMC_Init+0xec>)
 8002410:	f004 ff34 	bl	800727c <HAL_SRAM_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800241a:	f000 f8e1 	bl	80025e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800241e:	bf00      	nop
 8002420:	3738      	adds	r7, #56	; 0x38
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000188 	.word	0x20000188
 800242c:	a0000104 	.word	0xa0000104

08002430 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2120      	movs	r1, #32
 8002438:	4811      	ldr	r0, [pc, #68]	; (8002480 <system_init+0x50>)
 800243a:	f002 fef9 	bl	8005230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2140      	movs	r1, #64	; 0x40
 8002442:	480f      	ldr	r0, [pc, #60]	; (8002480 <system_init+0x50>)
 8002444:	f002 fef4 	bl	8005230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2110      	movs	r1, #16
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <system_init+0x50>)
 800244e:	f002 feef 	bl	8005230 <HAL_GPIO_WritePin>

	timer_init();
 8002452:	f000 f8d9 	bl	8002608 <timer_init>
	led7_init();
 8002456:	f7ff faed 	bl	8001a34 <led7_init>
	button_init();
 800245a:	f7fe fd5f 	bl	8000f1c <button_init>
	lcd_init();
 800245e:	f7ff f82d 	bl	80014bc <lcd_init>
	ds3231_init();
 8002462:	f7fe fd71 	bl	8000f48 <ds3231_init>
	uart_init_rs232();
 8002466:	f001 faf9 	bl	8003a5c <uart_init_rs232>
	sensor_init();
 800246a:	f000 f8bf 	bl	80025ec <sensor_init>
	buzzer_init();
 800246e:	f7fe fd61 	bl	8000f34 <buzzer_init>
	touch_init();
 8002472:	f001 faaf 	bl	80039d4 <touch_init>
	setTimer2(50);
 8002476:	2032      	movs	r0, #50	; 0x32
 8002478:	f000 f8d0 	bl	800261c <setTimer2>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000

08002484 <test_ledDebug>:

uint8_t count_LED_debug = 0;
uint8_t count_LED_Y0 = 0;
uint8_t count_LED_Y1 = 0;

void test_ledDebug(){
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	count_LED_debug = (count_LED_debug + 1) % 20;
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <test_ledDebug+0x3c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <test_ledDebug+0x40>)
 8002490:	fb83 1302 	smull	r1, r3, r3, r2
 8002494:	10d9      	asrs	r1, r3, #3
 8002496:	17d3      	asrs	r3, r2, #31
 8002498:	1ac9      	subs	r1, r1, r3
 800249a:	460b      	mov	r3, r1
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	1ad1      	subs	r1, r2, r3
 80024a4:	b2ca      	uxtb	r2, r1
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <test_ledDebug+0x3c>)
 80024a8:	701a      	strb	r2, [r3, #0]
	if (count_LED_debug == 0) {
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <test_ledDebug+0x3c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <test_ledDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80024b2:	2110      	movs	r1, #16
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <test_ledDebug+0x44>)
 80024b6:	f002 fed4 	bl	8005262 <HAL_GPIO_TogglePin>
	}
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200000d8 	.word	0x200000d8
 80024c4:	66666667 	.word	0x66666667
 80024c8:	40021000 	.word	0x40021000

080024cc <isButtonClear>:
	}

}


uint8_t isButtonClear(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80024d0:	f001 fa9a 	bl	8003a08 <touch_IsTouched>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <isButtonClear+0x12>
 80024da:	2300      	movs	r3, #0
 80024dc:	e017      	b.n	800250e <isButtonClear+0x42>
	return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
 80024de:	f001 faa5 	bl	8003a2c <touch_GetX>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b3c      	cmp	r3, #60	; 0x3c
 80024e6:	d910      	bls.n	800250a <isButtonClear+0x3e>
 80024e8:	f001 faa0 	bl	8003a2c <touch_GetX>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2bb3      	cmp	r3, #179	; 0xb3
 80024f0:	d80b      	bhi.n	800250a <isButtonClear+0x3e>
 80024f2:	f001 faa7 	bl	8003a44 <touch_GetY>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b0a      	cmp	r3, #10
 80024fa:	d906      	bls.n	800250a <isButtonClear+0x3e>
 80024fc:	f001 faa2 	bl	8003a44 <touch_GetY>
 8002500:	4603      	mov	r3, r0
 8002502:	2b3b      	cmp	r3, #59	; 0x3b
 8002504:	d801      	bhi.n	800250a <isButtonClear+0x3e>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <isButtonClear+0x40>
 800250a:	2300      	movs	r3, #0
 800250c:	b2db      	uxtb	r3, r3
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <touchProcess>:

void touchProcess(){
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af04      	add	r7, sp, #16
	switch (draw_Status) {
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <touchProcess+0xc4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d048      	beq.n	80025b4 <touchProcess+0xa0>
 8002522:	2b02      	cmp	r3, #2
 8002524:	dc4f      	bgt.n	80025c6 <touchProcess+0xb2>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <touchProcess+0x1c>
 800252a:	2b01      	cmp	r3, #1
 800252c:	d01a      	beq.n	8002564 <touchProcess+0x50>
			break;
		case CLEAR:
			if(!touch_IsTouched()) draw_Status = INIT;
			break;
		default:
			break;
 800252e:	e04a      	b.n	80025c6 <touchProcess+0xb2>
			lcd_Fill(60, 10, 180, 60, GBLUE);
 8002530:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	233c      	movs	r3, #60	; 0x3c
 8002538:	22b4      	movs	r2, #180	; 0xb4
 800253a:	210a      	movs	r1, #10
 800253c:	203c      	movs	r0, #60	; 0x3c
 800253e:	f7fe fdf7 	bl	8001130 <lcd_Fill>
			lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 8002542:	2301      	movs	r3, #1
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	2318      	movs	r3, #24
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002552:	4a22      	ldr	r2, [pc, #136]	; (80025dc <touchProcess+0xc8>)
 8002554:	2114      	movs	r1, #20
 8002556:	205a      	movs	r0, #90	; 0x5a
 8002558:	f7ff fa08 	bl	800196c <lcd_ShowStr>
			draw_Status = DRAW;
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <touchProcess+0xc4>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]
			break;
 8002562:	e035      	b.n	80025d0 <touchProcess+0xbc>
			if(isButtonClear()){
 8002564:	f7ff ffb2 	bl	80024cc <isButtonClear>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02d      	beq.n	80025ca <touchProcess+0xb6>
				draw_Status = CLEAR;
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <touchProcess+0xc4>)
 8002570:	2202      	movs	r2, #2
 8002572:	601a      	str	r2, [r3, #0]
				lcd_Fill(0, 60, 240, 320, BLACK);
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800257c:	22f0      	movs	r2, #240	; 0xf0
 800257e:	213c      	movs	r1, #60	; 0x3c
 8002580:	2000      	movs	r0, #0
 8002582:	f7fe fdd5 	bl	8001130 <lcd_Fill>
				lcd_Fill(60, 10, 180, 60, GREEN);
 8002586:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	233c      	movs	r3, #60	; 0x3c
 800258e:	22b4      	movs	r2, #180	; 0xb4
 8002590:	210a      	movs	r1, #10
 8002592:	203c      	movs	r0, #60	; 0x3c
 8002594:	f7fe fdcc 	bl	8001130 <lcd_Fill>
				lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 8002598:	2301      	movs	r3, #1
 800259a:	9302      	str	r3, [sp, #8]
 800259c:	2318      	movs	r3, #24
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <touchProcess+0xc8>)
 80025aa:	2114      	movs	r1, #20
 80025ac:	205a      	movs	r0, #90	; 0x5a
 80025ae:	f7ff f9dd 	bl	800196c <lcd_ShowStr>
			break;
 80025b2:	e00a      	b.n	80025ca <touchProcess+0xb6>
			if(!touch_IsTouched()) draw_Status = INIT;
 80025b4:	f001 fa28 	bl	8003a08 <touch_IsTouched>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d107      	bne.n	80025ce <touchProcess+0xba>
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <touchProcess+0xc4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
			break;
 80025c4:	e003      	b.n	80025ce <touchProcess+0xba>
			break;
 80025c6:	bf00      	nop
 80025c8:	e002      	b.n	80025d0 <touchProcess+0xbc>
			break;
 80025ca:	bf00      	nop
 80025cc:	e000      	b.n	80025d0 <touchProcess+0xbc>
			break;
 80025ce:	bf00      	nop
	}
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200000d4 	.word	0x200000d4
 80025dc:	08009740 	.word	0x08009740

080025e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <Error_Handler+0x8>
	...

080025ec <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 80025f0:	2205      	movs	r2, #5
 80025f2:	4903      	ldr	r1, [pc, #12]	; (8002600 <sensor_init+0x14>)
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <sensor_init+0x18>)
 80025f6:	f001 fb85 	bl	8003d04 <HAL_ADC_Start_DMA>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200003f4 	.word	0x200003f4
 8002604:	200001d8 	.word	0x200001d8

08002608 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <timer_init+0x10>)
 800260e:	f004 fec9 	bl	80073a4 <HAL_TIM_Base_Start_IT>
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200003ac 	.word	0x200003ac

0800261c <setTimer2>:

void setTimer2(uint16_t duration){
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <setTimer2+0x2c>)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <setTimer2+0x2c>)
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <setTimer2+0x30>)
 8002632:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <setTimer2+0x34>)
 8002636:	2200      	movs	r2, #0
 8002638:	801a      	strh	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	200000de 	.word	0x200000de
 800264c:	200000dc 	.word	0x200000dc
 8002650:	200000da 	.word	0x200000da

08002654 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d116      	bne.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d012      	beq.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002678:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x40>
				flag_timer2 = 1;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002684:	2201      	movs	r2, #1
 8002686:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800268e:	801a      	strh	r2, [r3, #0]
				led7_Scan();
 8002690:	f7ff f9dc 	bl	8001a4c <led7_Scan>
			}
		}

	}
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200000dc 	.word	0x200000dc
 80026a0:	200000da 	.word	0x200000da
 80026a4:	200000de 	.word	0x200000de

080026a8 <delay_us>:
void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void delay_us (uint16_t us)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <delay_us+0x30>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80026ba:	bf00      	nop
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <delay_us+0x30>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d3f9      	bcc.n	80026bc <delay_us+0x14>
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000030c 	.word	0x2000030c

080026dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <HAL_MspInit+0x4c>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_MspInit+0x4c>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3c      	ldr	r2, [pc, #240]	; (800283c <HAL_ADC_MspInit+0x110>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d171      	bne.n	8002832 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_ADC_MspInit+0x114>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_ADC_MspInit+0x114>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_ADC_MspInit+0x114>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_ADC_MspInit+0x114>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a33      	ldr	r2, [pc, #204]	; (8002840 <HAL_ADC_MspInit+0x114>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_ADC_MspInit+0x114>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_ADC_MspInit+0x114>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a2c      	ldr	r2, [pc, #176]	; (8002840 <HAL_ADC_MspInit+0x114>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_ADC_MspInit+0x114>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80027a2:	2307      	movs	r3, #7
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a6:	2303      	movs	r3, #3
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4823      	ldr	r0, [pc, #140]	; (8002844 <HAL_ADC_MspInit+0x118>)
 80027b6:	f002 fb87 	bl	8004ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027ba:	2303      	movs	r3, #3
 80027bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027be:	2303      	movs	r3, #3
 80027c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	481e      	ldr	r0, [pc, #120]	; (8002848 <HAL_ADC_MspInit+0x11c>)
 80027ce:	f002 fb7b 	bl	8004ec8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	; (800284c <HAL_ADC_MspInit+0x120>)
 80027d4:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_ADC_MspInit+0x124>)
 80027d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_ADC_MspInit+0x120>)
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_ADC_MspInit+0x120>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_ADC_MspInit+0x120>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_ADC_MspInit+0x120>)
 80027ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_ADC_MspInit+0x120>)
 80027f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_ADC_MspInit+0x120>)
 80027fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002800:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_ADC_MspInit+0x120>)
 8002804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002808:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_ADC_MspInit+0x120>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_ADC_MspInit+0x120>)
 8002812:	2200      	movs	r2, #0
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002816:	480d      	ldr	r0, [pc, #52]	; (800284c <HAL_ADC_MspInit+0x120>)
 8002818:	f001 ff54 	bl	80046c4 <HAL_DMA_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002822:	f7ff fedd 	bl	80025e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_ADC_MspInit+0x120>)
 800282a:	639a      	str	r2, [r3, #56]	; 0x38
 800282c:	4a07      	ldr	r2, [pc, #28]	; (800284c <HAL_ADC_MspInit+0x120>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	; 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40012000 	.word	0x40012000
 8002840:	40023800 	.word	0x40023800
 8002844:	40020800 	.word	0x40020800
 8002848:	40020400 	.word	0x40020400
 800284c:	200002ac 	.word	0x200002ac
 8002850:	40026410 	.word	0x40026410

08002854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_I2C_MspInit+0x84>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d12b      	bne.n	80028ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_I2C_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_I2C_MspInit+0x88>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_I2C_MspInit+0x88>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002896:	2312      	movs	r3, #18
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028a2:	2304      	movs	r3, #4
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	480c      	ldr	r0, [pc, #48]	; (80028e0 <HAL_I2C_MspInit+0x8c>)
 80028ae:	f002 fb0b 	bl	8004ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_I2C_MspInit+0x88>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <HAL_I2C_MspInit+0x88>)
 80028bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_I2C_MspInit+0x88>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40005400 	.word	0x40005400
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020400 	.word	0x40020400

080028e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_SPI_MspInit+0x84>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d12b      	bne.n	800295e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_SPI_MspInit+0x88>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_SPI_MspInit+0x88>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_SPI_MspInit+0x88>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800293e:	2338      	movs	r3, #56	; 0x38
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800294e:	2305      	movs	r3, #5
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_SPI_MspInit+0x8c>)
 800295a:	f002 fab5 	bl	8004ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40013000 	.word	0x40013000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020400 	.word	0x40020400

08002974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_TIM_Base_MspInit+0x98>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80029a2:	e02e      	b.n	8002a02 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d116      	bne.n	80029dc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	201c      	movs	r0, #28
 80029d0:	f001 fe41 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029d4:	201c      	movs	r0, #28
 80029d6:	f001 fe5a 	bl	800468e <HAL_NVIC_EnableIRQ>
}
 80029da:	e012      	b.n	8002a02 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_TIM_Base_MspInit+0xa0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10d      	bne.n	8002a02 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 80029f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_TIM_Base_MspInit+0x9c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40001c00 	.word	0x40001c00

08002a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <HAL_TIM_MspPostInit+0x68>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d11e      	bne.n	8002a78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002a68:	2309      	movs	r3, #9
 8002a6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	4619      	mov	r1, r3
 8002a72:	4805      	ldr	r0, [pc, #20]	; (8002a88 <HAL_TIM_MspPostInit+0x70>)
 8002a74:	f002 fa28 	bl	8004ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002a78:	bf00      	nop
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40001c00 	.word	0x40001c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40021400 	.word	0x40021400

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_UART_MspInit+0x94>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d134      	bne.n	8002b18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af8:	2307      	movs	r3, #7
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <HAL_UART_MspInit+0x9c>)
 8002b04:	f002 f9e0 	bl	8004ec8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2025      	movs	r0, #37	; 0x25
 8002b0e:	f001 fda2 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b12:	2025      	movs	r0, #37	; 0x25
 8002b14:	f001 fdbb 	bl	800468e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b18:	bf00      	nop
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_FSMC_MspInit+0x88>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d131      	bne.n	8002bac <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_FSMC_MspInit+0x88>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_FSMC_MspInit+0x8c>)
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_FSMC_MspInit+0x8c>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6393      	str	r3, [r2, #56]	; 0x38
 8002b5e:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <HAL_FSMC_MspInit+0x8c>)
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002b6a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8002b6e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002b7c:	230c      	movs	r3, #12
 8002b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <HAL_FSMC_MspInit+0x90>)
 8002b86:	f002 f99f 	bl	8004ec8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002b8a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002b8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002b9c:	230c      	movs	r3, #12
 8002b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <HAL_FSMC_MspInit+0x94>)
 8002ba6:	f002 f98f 	bl	8004ec8 <HAL_GPIO_Init>
 8002baa:	e000      	b.n	8002bae <HAL_FSMC_MspInit+0x82>
    return;
 8002bac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	200000e0 	.word	0x200000e0
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40020c00 	.word	0x40020c00

08002bc4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002bcc:	f7ff ffae 	bl	8002b2c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <NMI_Handler+0x4>

08002bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <HardFault_Handler+0x4>

08002be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <MemManage_Handler+0x4>

08002bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <BusFault_Handler+0x4>

08002bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <UsageFault_Handler+0x4>

08002bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c24:	f000 ffe6 	bl	8003bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <TIM2_IRQHandler+0x10>)
 8002c32:	f004 fd49 	bl	80076c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200003ac 	.word	0x200003ac

08002c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <USART1_IRQHandler+0x10>)
 8002c46:	f005 fca9 	bl	800859c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000268 	.word	0x20000268

08002c54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <DMA2_Stream0_IRQHandler+0x10>)
 8002c5a:	f001 fecb 	bl	80049f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200002ac 	.word	0x200002ac

08002c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <SystemInit+0x20>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <SystemInit+0x20>)
 8002c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	e025      	b.n	8002cec <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da06      	bge.n	8002cb6 <TP_Write_Byte+0x2a>
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cae:	4813      	ldr	r0, [pc, #76]	; (8002cfc <TP_Write_Byte+0x70>)
 8002cb0:	f002 fabe 	bl	8005230 <HAL_GPIO_WritePin>
 8002cb4:	e005      	b.n	8002cc2 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cbc:	480f      	ldr	r0, [pc, #60]	; (8002cfc <TP_Write_Byte+0x70>)
 8002cbe:	f002 fab7 	bl	8005230 <HAL_GPIO_WritePin>
		num<<=1;
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cce:	480c      	ldr	r0, [pc, #48]	; (8002d00 <TP_Write_Byte+0x74>)
 8002cd0:	f002 faae 	bl	8005230 <HAL_GPIO_WritePin>
		delay_us(1);
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7ff fce7 	bl	80026a8 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ce0:	4807      	ldr	r0, [pc, #28]	; (8002d00 <TP_Write_Byte+0x74>)
 8002ce2:	f002 faa5 	bl	8005230 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b07      	cmp	r3, #7
 8002cf0:	d9d6      	bls.n	8002ca0 <TP_Write_Byte+0x14>
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40021800 	.word	0x40021800

08002d04 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1c:	482f      	ldr	r0, [pc, #188]	; (8002ddc <TP_Read_AD+0xd8>)
 8002d1e:	f002 fa87 	bl	8005230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d28:	482d      	ldr	r0, [pc, #180]	; (8002de0 <TP_Read_AD+0xdc>)
 8002d2a:	f002 fa81 	bl	8005230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	482a      	ldr	r0, [pc, #168]	; (8002ddc <TP_Read_AD+0xd8>)
 8002d34:	f002 fa7c 	bl	8005230 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ffa6 	bl	8002c8c <TP_Write_Byte>
	delay_us(6);
 8002d40:	2006      	movs	r0, #6
 8002d42:	f7ff fcb1 	bl	80026a8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d4c:	4823      	ldr	r0, [pc, #140]	; (8002ddc <TP_Read_AD+0xd8>)
 8002d4e:	f002 fa6f 	bl	8005230 <HAL_GPIO_WritePin>
	delay_us(1);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f7ff fca8 	bl	80026a8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d5e:	481f      	ldr	r0, [pc, #124]	; (8002ddc <TP_Read_AD+0xd8>)
 8002d60:	f002 fa66 	bl	8005230 <HAL_GPIO_WritePin>
	delay_us(1);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7ff fc9f 	bl	80026a8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d70:	481a      	ldr	r0, [pc, #104]	; (8002ddc <TP_Read_AD+0xd8>)
 8002d72:	f002 fa5d 	bl	8005230 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e01f      	b.n	8002dbc <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8002d7c:	89bb      	ldrh	r3, [r7, #12]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d88:	4814      	ldr	r0, [pc, #80]	; (8002ddc <TP_Read_AD+0xd8>)
 8002d8a:	f002 fa51 	bl	8005230 <HAL_GPIO_WritePin>
		delay_us(1);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7ff fc8a 	bl	80026a8 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002d94:	2201      	movs	r2, #1
 8002d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d9a:	4810      	ldr	r0, [pc, #64]	; (8002ddc <TP_Read_AD+0xd8>)
 8002d9c:	f002 fa48 	bl	8005230 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8002da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da4:	480e      	ldr	r0, [pc, #56]	; (8002de0 <TP_Read_AD+0xdc>)
 8002da6:	f002 fa2b 	bl	8005200 <HAL_GPIO_ReadPin>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <TP_Read_AD+0xb2>
 8002db0:	89bb      	ldrh	r3, [r7, #12]
 8002db2:	3301      	adds	r3, #1
 8002db4:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	3301      	adds	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	d9dc      	bls.n	8002d7c <TP_Read_AD+0x78>
	}
	Num>>=4;
 8002dc2:	89bb      	ldrh	r3, [r7, #12]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2180      	movs	r1, #128	; 0x80
 8002dcc:	4803      	ldr	r0, [pc, #12]	; (8002ddc <TP_Read_AD+0xd8>)
 8002dce:	f002 fa2f 	bl	8005230 <HAL_GPIO_WritePin>
	return(Num);
 8002dd2:	89bb      	ldrh	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021800 	.word	0x40021800
 8002de0:	40020800 	.word	0x40020800

08002de4 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8002df2:	2300      	movs	r3, #0
 8002df4:	83fb      	strh	r3, [r7, #30]
 8002df6:	e00f      	b.n	8002e18 <TP_Read_XOY+0x34>
 8002df8:	8bfc      	ldrh	r4, [r7, #30]
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff81 	bl	8002d04 <TP_Read_AD>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	0063      	lsls	r3, r4, #1
 8002e08:	f107 0120 	add.w	r1, r7, #32
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f823 2c14 	strh.w	r2, [r3, #-20]
 8002e12:	8bfb      	ldrh	r3, [r7, #30]
 8002e14:	3301      	adds	r3, #1
 8002e16:	83fb      	strh	r3, [r7, #30]
 8002e18:	8bfb      	ldrh	r3, [r7, #30]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d9ec      	bls.n	8002df8 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	83fb      	strh	r3, [r7, #30]
 8002e22:	e03b      	b.n	8002e9c <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8002e24:	8bfb      	ldrh	r3, [r7, #30]
 8002e26:	3301      	adds	r3, #1
 8002e28:	83bb      	strh	r3, [r7, #28]
 8002e2a:	e031      	b.n	8002e90 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8002e2c:	8bfb      	ldrh	r3, [r7, #30]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	f107 0220 	add.w	r2, r7, #32
 8002e34:	4413      	add	r3, r2
 8002e36:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002e3a:	8bbb      	ldrh	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	f107 0120 	add.w	r1, r7, #32
 8002e42:	440b      	add	r3, r1
 8002e44:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d91e      	bls.n	8002e8a <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8002e4c:	8bfb      	ldrh	r3, [r7, #30]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	f107 0220 	add.w	r2, r7, #32
 8002e54:	4413      	add	r3, r2
 8002e56:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002e5a:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8002e5c:	8bbb      	ldrh	r3, [r7, #28]
 8002e5e:	8bfa      	ldrh	r2, [r7, #30]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	f107 0120 	add.w	r1, r7, #32
 8002e66:	440b      	add	r3, r1
 8002e68:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8002e6c:	0053      	lsls	r3, r2, #1
 8002e6e:	f107 0220 	add.w	r2, r7, #32
 8002e72:	4413      	add	r3, r2
 8002e74:	460a      	mov	r2, r1
 8002e76:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8002e7a:	8bbb      	ldrh	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	f107 0220 	add.w	r2, r7, #32
 8002e82:	4413      	add	r3, r2
 8002e84:	8b3a      	ldrh	r2, [r7, #24]
 8002e86:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8002e8a:	8bbb      	ldrh	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	83bb      	strh	r3, [r7, #28]
 8002e90:	8bbb      	ldrh	r3, [r7, #28]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d9ca      	bls.n	8002e2c <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8002e96:	8bfb      	ldrh	r3, [r7, #30]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	83fb      	strh	r3, [r7, #30]
 8002e9c:	8bfb      	ldrh	r3, [r7, #30]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d9c0      	bls.n	8002e24 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	83fb      	strh	r3, [r7, #30]
 8002eaa:	e00c      	b.n	8002ec6 <TP_Read_XOY+0xe2>
 8002eac:	8bfb      	ldrh	r3, [r7, #30]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	f107 0220 	add.w	r2, r7, #32
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002eba:	8b7b      	ldrh	r3, [r7, #26]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	837b      	strh	r3, [r7, #26]
 8002ec0:	8bfb      	ldrh	r3, [r7, #30]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	83fb      	strh	r3, [r7, #30]
 8002ec6:	8bfb      	ldrh	r3, [r7, #30]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d9ef      	bls.n	8002eac <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <TP_Read_XOY+0x100>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	833b      	strh	r3, [r7, #24]
	return temp;
 8002ed8:	8b3b      	ldrh	r3, [r7, #24]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	aaaaaaab 	.word	0xaaaaaaab

08002ee8 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <TP_Read_XY+0x3c>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff74 	bl	8002de4 <TP_Read_XOY>
 8002efc:	4603      	mov	r3, r0
 8002efe:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <TP_Read_XY+0x40>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff6d 	bl	8002de4 <TP_Read_XOY>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	89fa      	ldrh	r2, [r7, #14]
 8002f12:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	89ba      	ldrh	r2, [r7, #12]
 8002f18:	801a      	strh	r2, [r3, #0]
	return 1;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000040 	.word	0x20000040
 8002f28:	20000041 	.word	0x20000041

08002f2c <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8002f36:	f107 0212 	add.w	r2, r7, #18
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ffd1 	bl	8002ee8 <TP_Read_XY>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <TP_Read_XY2+0x28>
 8002f50:	2300      	movs	r3, #0
 8002f52:	e049      	b.n	8002fe8 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8002f54:	f107 020e 	add.w	r2, r7, #14
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ffc2 	bl	8002ee8 <TP_Read_XY>
 8002f64:	4603      	mov	r3, r0
 8002f66:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <TP_Read_XY2+0x46>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e03a      	b.n	8002fe8 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8002f72:	8a3a      	ldrh	r2, [r7, #16]
 8002f74:	8abb      	ldrh	r3, [r7, #20]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d804      	bhi.n	8002f84 <TP_Read_XY2+0x58>
 8002f7a:	8a3b      	ldrh	r3, [r7, #16]
 8002f7c:	3363      	adds	r3, #99	; 0x63
 8002f7e:	8aba      	ldrh	r2, [r7, #20]
 8002f80:	4293      	cmp	r3, r2
 8002f82:	da08      	bge.n	8002f96 <TP_Read_XY2+0x6a>
 8002f84:	8aba      	ldrh	r2, [r7, #20]
 8002f86:	8a3b      	ldrh	r3, [r7, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d82c      	bhi.n	8002fe6 <TP_Read_XY2+0xba>
 8002f8c:	8abb      	ldrh	r3, [r7, #20]
 8002f8e:	3363      	adds	r3, #99	; 0x63
 8002f90:	8a3a      	ldrh	r2, [r7, #16]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	db27      	blt.n	8002fe6 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8002f96:	89fa      	ldrh	r2, [r7, #14]
 8002f98:	8a7b      	ldrh	r3, [r7, #18]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d804      	bhi.n	8002fa8 <TP_Read_XY2+0x7c>
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	3363      	adds	r3, #99	; 0x63
 8002fa2:	8a7a      	ldrh	r2, [r7, #18]
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	da08      	bge.n	8002fba <TP_Read_XY2+0x8e>
 8002fa8:	8a7a      	ldrh	r2, [r7, #18]
 8002faa:	89fb      	ldrh	r3, [r7, #14]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d81a      	bhi.n	8002fe6 <TP_Read_XY2+0xba>
 8002fb0:	8a7b      	ldrh	r3, [r7, #18]
 8002fb2:	3363      	adds	r3, #99	; 0x63
 8002fb4:	89fa      	ldrh	r2, [r7, #14]
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	db15      	blt.n	8002fe6 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8002fba:	8abb      	ldrh	r3, [r7, #20]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	8a3b      	ldrh	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	0fda      	lsrs	r2, r3, #31
 8002fc4:	4413      	add	r3, r2
 8002fc6:	105b      	asrs	r3, r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8002fce:	8a7b      	ldrh	r3, [r7, #18]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	0fda      	lsrs	r2, r3, #31
 8002fd8:	4413      	add	r3, r2
 8002fda:	105b      	asrs	r3, r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	801a      	strh	r2, [r3, #0]
		return 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <TP_Read_XY2+0xbc>
	}else return 0;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	80bb      	strh	r3, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	3b0c      	subs	r3, #12
 8003006:	b298      	uxth	r0, r3
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	330d      	adds	r3, #13
 800300c:	b29a      	uxth	r2, r3
 800300e:	88bc      	ldrh	r4, [r7, #4]
 8003010:	88b9      	ldrh	r1, [r7, #4]
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4623      	mov	r3, r4
 8003018:	f7fe f8d7 	bl	80011ca <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 800301c:	88bb      	ldrh	r3, [r7, #4]
 800301e:	3b0c      	subs	r3, #12
 8003020:	b299      	uxth	r1, r3
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	330d      	adds	r3, #13
 8003026:	b29c      	uxth	r4, r3
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	88f8      	ldrh	r0, [r7, #6]
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4623      	mov	r3, r4
 8003032:	f7fe f8ca 	bl	80011ca <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	3301      	adds	r3, #1
 800303a:	b298      	uxth	r0, r3
 800303c:	88bb      	ldrh	r3, [r7, #4]
 800303e:	3301      	adds	r3, #1
 8003040:	b29b      	uxth	r3, r3
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	4619      	mov	r1, r3
 8003046:	f7fe f8a9 	bl	800119c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	3b01      	subs	r3, #1
 800304e:	b298      	uxth	r0, r3
 8003050:	88bb      	ldrh	r3, [r7, #4]
 8003052:	3301      	adds	r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	4619      	mov	r1, r3
 800305a:	f7fe f89f 	bl	800119c <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	3301      	adds	r3, #1
 8003062:	b298      	uxth	r0, r3
 8003064:	88bb      	ldrh	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	4619      	mov	r1, r3
 800306e:	f7fe f895 	bl	800119c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	3b01      	subs	r3, #1
 8003076:	b298      	uxth	r0, r3
 8003078:	88bb      	ldrh	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	4619      	mov	r1, r3
 8003082:	f7fe f88b 	bl	800119c <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8003086:	88f8      	ldrh	r0, [r7, #6]
 8003088:	88b9      	ldrh	r1, [r7, #4]
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	2300      	movs	r3, #0
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2306      	movs	r3, #6
 8003092:	f7fe fbfe 	bl	8001892 <lcd_DrawCircle>
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}
	...

080030a0 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 80030aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ae:	4843      	ldr	r0, [pc, #268]	; (80031bc <TP_Scan+0x11c>)
 80030b0:	f002 f8a6 	bl	8005200 <HAL_GPIO_ReadPin>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d157      	bne.n	800316a <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <TP_Scan+0x2a>
 80030c0:	493f      	ldr	r1, [pc, #252]	; (80031c0 <TP_Scan+0x120>)
 80030c2:	4840      	ldr	r0, [pc, #256]	; (80031c4 <TP_Scan+0x124>)
 80030c4:	f7ff ff32 	bl	8002f2c <TP_Read_XY2>
 80030c8:	e03c      	b.n	8003144 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 80030ca:	493d      	ldr	r1, [pc, #244]	; (80031c0 <TP_Scan+0x120>)
 80030cc:	483d      	ldr	r0, [pc, #244]	; (80031c4 <TP_Scan+0x124>)
 80030ce:	f7ff ff2d 	bl	8002f2c <TP_Read_XY2>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d035      	beq.n	8003144 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 80030d8:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <TP_Scan+0x128>)
 80030da:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80030de:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <TP_Scan+0x128>)
 80030e0:	899b      	ldrh	r3, [r3, #12]
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ee:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <TP_Scan+0x128>)
 80030f0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003104:	ee17 3a90 	vmov	r3, s15
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <TP_Scan+0x128>)
 800310c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 800310e:	4b2e      	ldr	r3, [pc, #184]	; (80031c8 <TP_Scan+0x128>)
 8003110:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003114:	4b2c      	ldr	r3, [pc, #176]	; (80031c8 <TP_Scan+0x128>)
 8003116:	8adb      	ldrh	r3, [r3, #22]
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <TP_Scan+0x128>)
 8003126:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313a:	ee17 3a90 	vmov	r3, s15
 800313e:	b29a      	uxth	r2, r3
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <TP_Scan+0x128>)
 8003142:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003144:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <TP_Scan+0x128>)
 8003146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800314a:	b25b      	sxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	db2a      	blt.n	80031a6 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003150:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <TP_Scan+0x128>)
 8003152:	22c0      	movs	r2, #192	; 0xc0
 8003154:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <TP_Scan+0x128>)
 800315a:	899a      	ldrh	r2, [r3, #12]
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <TP_Scan+0x128>)
 800315e:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <TP_Scan+0x128>)
 8003162:	8ada      	ldrh	r2, [r3, #22]
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <TP_Scan+0x128>)
 8003166:	83da      	strh	r2, [r3, #30]
 8003168:	e01d      	b.n	80031a6 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <TP_Scan+0x128>)
 800316c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003170:	b25b      	sxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	da09      	bge.n	800318a <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <TP_Scan+0x128>)
 8003178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <TP_Scan+0x128>)
 8003184:	f883 2020 	strb.w	r2, [r3, #32]
 8003188:	e00d      	b.n	80031a6 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <TP_Scan+0x128>)
 800318c:	2200      	movs	r2, #0
 800318e:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <TP_Scan+0x128>)
 8003192:	2200      	movs	r2, #0
 8003194:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <TP_Scan+0x128>)
 8003198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800319c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <TP_Scan+0x128>)
 80031a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a4:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <TP_Scan+0x128>)
 80031a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031b0:	b2db      	uxtb	r3, r3
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40020800 	.word	0x40020800
 80031c0:	20000022 	.word	0x20000022
 80031c4:	20000018 	.word	0x20000018
 80031c8:	2000000c 	.word	0x2000000c

080031cc <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 80031d0:	220e      	movs	r2, #14
 80031d2:	4905      	ldr	r1, [pc, #20]	; (80031e8 <TP_Save_Adjdata+0x1c>)
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fe81 	bl	8000edc <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 80031da:	2100      	movs	r1, #0
 80031dc:	200e      	movs	r0, #14
 80031de:	f7fd fe1d 	bl	8000e1c <at24c_WriteOneByte>
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000030 	.word	0x20000030

080031ec <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 80031f6:	200e      	movs	r0, #14
 80031f8:	f7fd fdf4 	bl	8000de4 <at24c_ReadOneByte>
 80031fc:	4603      	mov	r3, r0
 80031fe:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003206:	220e      	movs	r2, #14
 8003208:	4905      	ldr	r1, [pc, #20]	; (8003220 <TP_Get_Adjdata+0x34>)
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd fe47 	bl	8000e9e <at24c_Read>
		return 1;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000030 	.word	0x20000030
 8003224:	00000000 	.word	0x00000000

08003228 <touch_Adjust>:


void touch_Adjust(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	; 0x38
 800322c:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 800322e:	2300      	movs	r3, #0
 8003230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 800323a:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <touch_Adjust+0x198>)
 800323c:	881a      	ldrh	r2, [r3, #0]
 800323e:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <touch_Adjust+0x198>)
 8003240:	885b      	ldrh	r3, [r3, #2]
 8003242:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003246:	9100      	str	r1, [sp, #0]
 8003248:	2100      	movs	r1, #0
 800324a:	2000      	movs	r0, #0
 800324c:	f7fd ff70 	bl	8001130 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003250:	2300      	movs	r3, #0
 8003252:	9302      	str	r3, [sp, #8]
 8003254:	2310      	movs	r3, #16
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003262:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <touch_Adjust+0x19c>)
 8003264:	2128      	movs	r1, #40	; 0x28
 8003266:	2005      	movs	r0, #5
 8003268:	f7fe fb80 	bl	800196c <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 800326c:	2300      	movs	r3, #0
 800326e:	9302      	str	r3, [sp, #8]
 8003270:	2310      	movs	r3, #16
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800327e:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <touch_Adjust+0x1a0>)
 8003280:	2141      	movs	r1, #65	; 0x41
 8003282:	2005      	movs	r0, #5
 8003284:	f7fe fb72 	bl	800196c <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003288:	2300      	movs	r3, #0
 800328a:	9302      	str	r3, [sp, #8]
 800328c:	2310      	movs	r3, #16
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800329a:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <touch_Adjust+0x1a4>)
 800329c:	215a      	movs	r1, #90	; 0x5a
 800329e:	2005      	movs	r0, #5
 80032a0:	f7fe fb64 	bl	800196c <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 80032a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80032a8:	2114      	movs	r1, #20
 80032aa:	2014      	movs	r0, #20
 80032ac:	f7ff fea0 	bl	8002ff0 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 80032b0:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <touch_Adjust+0x1a8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 80032b8:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <touch_Adjust+0x1a8>)
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 80032c0:	2032      	movs	r0, #50	; 0x32
 80032c2:	f000 fcb7 	bl	8003c34 <HAL_Delay>
		tp_dev.scan(1);
 80032c6:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <touch_Adjust+0x1a8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2001      	movs	r0, #1
 80032cc:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 80032ce:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <touch_Adjust+0x1a8>)
 80032d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	f040 835e 	bne.w	800399a <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 80032de:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <touch_Adjust+0x1a8>)
 80032e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <touch_Adjust+0x1a8>)
 80032ec:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 80032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032f4:	4a36      	ldr	r2, [pc, #216]	; (80033d0 <touch_Adjust+0x1a8>)
 80032f6:	8992      	ldrh	r2, [r2, #12]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80032fe:	440b      	add	r3, r1
 8003300:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8003304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003308:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <touch_Adjust+0x1a8>)
 800330a:	8ad2      	ldrh	r2, [r2, #22]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003312:	440b      	add	r3, r1
 8003314:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8003318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331c:	3301      	adds	r3, #1
 800331e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8003322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003326:	3b01      	subs	r3, #1
 8003328:	2b03      	cmp	r3, #3
 800332a:	d8c9      	bhi.n	80032c0 <touch_Adjust+0x98>
 800332c:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <touch_Adjust+0x10c>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003345 	.word	0x08003345
 8003338:	08003367 	.word	0x08003367
 800333c:	08003391 	.word	0x08003391
 8003340:	080033d5 	.word	0x080033d5
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8003344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003348:	2114      	movs	r1, #20
 800334a:	2014      	movs	r0, #20
 800334c:	f7ff fe50 	bl	8002ff0 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <touch_Adjust+0x198>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	3b14      	subs	r3, #20
 8003356:	b29b      	uxth	r3, r3
 8003358:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800335c:	2114      	movs	r1, #20
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fe46 	bl	8002ff0 <TP_Drow_Touch_Point>
					break;
 8003364:	e31a      	b.n	800399c <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <touch_Adjust+0x198>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	3b14      	subs	r3, #20
 800336c:	b29b      	uxth	r3, r3
 800336e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003372:	2114      	movs	r1, #20
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fe3b 	bl	8002ff0 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <touch_Adjust+0x198>)
 800337c:	885b      	ldrh	r3, [r3, #2]
 800337e:	3b14      	subs	r3, #20
 8003380:	b29b      	uxth	r3, r3
 8003382:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003386:	4619      	mov	r1, r3
 8003388:	2014      	movs	r0, #20
 800338a:	f7ff fe31 	bl	8002ff0 <TP_Drow_Touch_Point>
					break;
 800338e:	e305      	b.n	800399c <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <touch_Adjust+0x198>)
 8003392:	885b      	ldrh	r3, [r3, #2]
 8003394:	3b14      	subs	r3, #20
 8003396:	b29b      	uxth	r3, r3
 8003398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800339c:	4619      	mov	r1, r3
 800339e:	2014      	movs	r0, #20
 80033a0:	f7ff fe26 	bl	8002ff0 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <touch_Adjust+0x198>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	3b14      	subs	r3, #20
 80033aa:	b298      	uxth	r0, r3
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <touch_Adjust+0x198>)
 80033ae:	885b      	ldrh	r3, [r3, #2]
 80033b0:	3b14      	subs	r3, #20
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033b8:	4619      	mov	r1, r3
 80033ba:	f7ff fe19 	bl	8002ff0 <TP_Drow_Touch_Point>
					break;
 80033be:	e2ed      	b.n	800399c <touch_Adjust+0x774>
 80033c0:	200000f8 	.word	0x200000f8
 80033c4:	08009748 	.word	0x08009748
 80033c8:	08009764 	.word	0x08009764
 80033cc:	0800977c 	.word	0x0800977c
 80033d0:	2000000c 	.word	0x2000000c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 80033d4:	883b      	ldrh	r3, [r7, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	88bb      	ldrh	r3, [r7, #4]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bfb8      	it	lt
 80033e0:	425b      	neglt	r3, r3
 80033e2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	461a      	mov	r2, r3
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bfb8      	it	lt
 80033f0:	425b      	neglt	r3, r3
 80033f2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	fb03 f303 	mul.w	r3, r3, r3
 80033fa:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	fb03 f303 	mul.w	r3, r3, r3
 8003402:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003404:	6a3a      	ldr	r2, [r7, #32]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f81e 	bl	800044c <__aeabi_ui2d>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	ec43 2b10 	vmov	d0, r2, r3
 8003418:	f006 f87a 	bl	8009510 <sqrt>
 800341c:	ec53 2b10 	vmov	r2, r3, d0
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	f7fd fb3c 	bl	8000aa0 <__aeabi_d2uiz>
 8003428:	4603      	mov	r3, r0
 800342a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800342c:	893b      	ldrh	r3, [r7, #8]
 800342e:	461a      	mov	r2, r3
 8003430:	89bb      	ldrh	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	bfb8      	it	lt
 8003438:	425b      	neglt	r3, r3
 800343a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 800343c:	897b      	ldrh	r3, [r7, #10]
 800343e:	461a      	mov	r2, r3
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	bfb8      	it	lt
 8003448:	425b      	neglt	r3, r3
 800344a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	fb03 f303 	mul.w	r3, r3, r3
 8003452:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	fb03 f303 	mul.w	r3, r3, r3
 800345a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f7fc fff2 	bl	800044c <__aeabi_ui2d>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	ec43 2b10 	vmov	d0, r2, r3
 8003470:	f006 f84e 	bl	8009510 <sqrt>
 8003474:	ec53 2b10 	vmov	r2, r3, d0
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f7fd fb10 	bl	8000aa0 <__aeabi_d2uiz>
 8003480:	4603      	mov	r3, r0
 8003482:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003484:	8b7b      	ldrh	r3, [r7, #26]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800348e:	8b3b      	ldrh	r3, [r7, #24]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003498:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800349c:	ee16 0a90 	vmov	r0, s13
 80034a0:	f7fc fff6 	bl	8000490 <__aeabi_f2d>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 80034ac:	a384      	add	r3, pc, #528	; (adr r3, 80036c0 <touch_Adjust+0x498>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034b6:	f7fd fab5 	bl	8000a24 <__aeabi_dcmplt>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10f      	bne.n	80034e0 <touch_Adjust+0x2b8>
 80034c0:	a381      	add	r3, pc, #516	; (adr r3, 80036c8 <touch_Adjust+0x4a0>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034ca:	f7fd fac9 	bl	8000a60 <__aeabi_dcmpgt>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <touch_Adjust+0x2b8>
 80034d4:	8b7b      	ldrh	r3, [r7, #26]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <touch_Adjust+0x2b8>
 80034da:	8b3b      	ldrh	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d136      	bne.n	800354e <touch_Adjust+0x326>
					{
						cnt=0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80034e6:	4b7a      	ldr	r3, [pc, #488]	; (80036d0 <touch_Adjust+0x4a8>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	3b14      	subs	r3, #20
 80034ec:	b298      	uxth	r0, r3
 80034ee:	4b78      	ldr	r3, [pc, #480]	; (80036d0 <touch_Adjust+0x4a8>)
 80034f0:	885b      	ldrh	r3, [r3, #2]
 80034f2:	3b14      	subs	r3, #20
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034fa:	4619      	mov	r1, r3
 80034fc:	f7ff fd78 	bl	8002ff0 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003500:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003504:	2114      	movs	r1, #20
 8003506:	2014      	movs	r0, #20
 8003508:	f7ff fd72 	bl	8002ff0 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800350c:	2300      	movs	r3, #0
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	2310      	movs	r3, #16
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800351e:	4a6d      	ldr	r2, [pc, #436]	; (80036d4 <touch_Adjust+0x4ac>)
 8003520:	2128      	movs	r1, #40	; 0x28
 8003522:	2005      	movs	r0, #5
 8003524:	f7fe fa22 	bl	800196c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003528:	2300      	movs	r3, #0
 800352a:	9302      	str	r3, [sp, #8]
 800352c:	2310      	movs	r3, #16
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800353a:	4a67      	ldr	r2, [pc, #412]	; (80036d8 <touch_Adjust+0x4b0>)
 800353c:	213c      	movs	r1, #60	; 0x3c
 800353e:	2005      	movs	r0, #5
 8003540:	f7fe fa14 	bl	800196c <lcd_ShowStr>
						HAL_Delay(1000);
 8003544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003548:	f000 fb74 	bl	8003c34 <HAL_Delay>
 						continue;
 800354c:	e226      	b.n	800399c <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 800354e:	883b      	ldrh	r3, [r7, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	893b      	ldrh	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	bfb8      	it	lt
 800355a:	425b      	neglt	r3, r3
 800355c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 800355e:	887b      	ldrh	r3, [r7, #2]
 8003560:	461a      	mov	r2, r3
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	bfb8      	it	lt
 800356a:	425b      	neglt	r3, r3
 800356c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	fb03 f303 	mul.w	r3, r3, r3
 8003574:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fb03 f303 	mul.w	r3, r3, r3
 800357c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800357e:	6a3a      	ldr	r2, [r7, #32]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7fc ff61 	bl	800044c <__aeabi_ui2d>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	ec43 2b10 	vmov	d0, r2, r3
 8003592:	f005 ffbd 	bl	8009510 <sqrt>
 8003596:	ec53 2b10 	vmov	r2, r3, d0
 800359a:	4610      	mov	r0, r2
 800359c:	4619      	mov	r1, r3
 800359e:	f7fd fa7f 	bl	8000aa0 <__aeabi_d2uiz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 80035a6:	88bb      	ldrh	r3, [r7, #4]
 80035a8:	461a      	mov	r2, r3
 80035aa:	89bb      	ldrh	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bfb8      	it	lt
 80035b2:	425b      	neglt	r3, r3
 80035b4:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	461a      	mov	r2, r3
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bfb8      	it	lt
 80035c2:	425b      	neglt	r3, r3
 80035c4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	fb03 f303 	mul.w	r3, r3, r3
 80035cc:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fb03 f303 	mul.w	r3, r3, r3
 80035d4:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80035d6:	6a3a      	ldr	r2, [r7, #32]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ff35 	bl	800044c <__aeabi_ui2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	ec43 2b10 	vmov	d0, r2, r3
 80035ea:	f005 ff91 	bl	8009510 <sqrt>
 80035ee:	ec53 2b10 	vmov	r2, r3, d0
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f7fd fa53 	bl	8000aa0 <__aeabi_d2uiz>
 80035fa:	4603      	mov	r3, r0
 80035fc:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80035fe:	8b7b      	ldrh	r3, [r7, #26]
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003608:	8b3b      	ldrh	r3, [r7, #24]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003612:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003616:	ee16 0a90 	vmov	r0, s13
 800361a:	f7fc ff39 	bl	8000490 <__aeabi_f2d>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003626:	a326      	add	r3, pc, #152	; (adr r3, 80036c0 <touch_Adjust+0x498>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003630:	f7fd f9f8 	bl	8000a24 <__aeabi_dcmplt>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <touch_Adjust+0x426>
 800363a:	a323      	add	r3, pc, #140	; (adr r3, 80036c8 <touch_Adjust+0x4a0>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003644:	f7fd fa0c 	bl	8000a60 <__aeabi_dcmpgt>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d046      	beq.n	80036dc <touch_Adjust+0x4b4>
					{
						cnt=0;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <touch_Adjust+0x4a8>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	3b14      	subs	r3, #20
 800365a:	b298      	uxth	r0, r3
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <touch_Adjust+0x4a8>)
 800365e:	885b      	ldrh	r3, [r3, #2]
 8003660:	3b14      	subs	r3, #20
 8003662:	b29b      	uxth	r3, r3
 8003664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003668:	4619      	mov	r1, r3
 800366a:	f7ff fcc1 	bl	8002ff0 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800366e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003672:	2114      	movs	r1, #20
 8003674:	2014      	movs	r0, #20
 8003676:	f7ff fcbb 	bl	8002ff0 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800367a:	2300      	movs	r3, #0
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	2310      	movs	r3, #16
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <touch_Adjust+0x4ac>)
 800368e:	2128      	movs	r1, #40	; 0x28
 8003690:	2005      	movs	r0, #5
 8003692:	f7fe f96b 	bl	800196c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003696:	2300      	movs	r3, #0
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	2310      	movs	r3, #16
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <touch_Adjust+0x4b0>)
 80036aa:	213c      	movs	r1, #60	; 0x3c
 80036ac:	2005      	movs	r0, #5
 80036ae:	f7fe f95d 	bl	800196c <lcd_ShowStr>
						HAL_Delay(1000);
 80036b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036b6:	f000 fabd 	bl	8003c34 <HAL_Delay>
						continue;
 80036ba:	e16f      	b.n	800399c <touch_Adjust+0x774>
 80036bc:	f3af 8000 	nop.w
 80036c0:	66666666 	.word	0x66666666
 80036c4:	3fee6666 	.word	0x3fee6666
 80036c8:	cccccccd 	.word	0xcccccccd
 80036cc:	3ff0cccc 	.word	0x3ff0cccc
 80036d0:	200000f8 	.word	0x200000f8
 80036d4:	08009790 	.word	0x08009790
 80036d8:	080097b0 	.word	0x080097b0
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 80036dc:	88bb      	ldrh	r3, [r7, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bfb8      	it	lt
 80036e8:	425b      	neglt	r3, r3
 80036ea:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	461a      	mov	r2, r3
 80036f0:	897b      	ldrh	r3, [r7, #10]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bfb8      	it	lt
 80036f8:	425b      	neglt	r3, r3
 80036fa:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	fb03 f303 	mul.w	r3, r3, r3
 8003702:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	fb03 f303 	mul.w	r3, r3, r3
 800370a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc fe9a 	bl	800044c <__aeabi_ui2d>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	ec43 2b10 	vmov	d0, r2, r3
 8003720:	f005 fef6 	bl	8009510 <sqrt>
 8003724:	ec53 2b10 	vmov	r2, r3, d0
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f7fd f9b8 	bl	8000aa0 <__aeabi_d2uiz>
 8003730:	4603      	mov	r3, r0
 8003732:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8003734:	883b      	ldrh	r3, [r7, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	89bb      	ldrh	r3, [r7, #12]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bfb8      	it	lt
 8003740:	425b      	neglt	r3, r3
 8003742:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	461a      	mov	r2, r3
 8003748:	89fb      	ldrh	r3, [r7, #14]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bfb8      	it	lt
 8003750:	425b      	neglt	r3, r3
 8003752:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	fb03 f303 	mul.w	r3, r3, r3
 800375a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	fb03 f303 	mul.w	r3, r3, r3
 8003762:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc fe6e 	bl	800044c <__aeabi_ui2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	ec43 2b10 	vmov	d0, r2, r3
 8003778:	f005 feca 	bl	8009510 <sqrt>
 800377c:	ec53 2b10 	vmov	r2, r3, d0
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f7fd f98c 	bl	8000aa0 <__aeabi_d2uiz>
 8003788:	4603      	mov	r3, r0
 800378a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800378c:	8b7b      	ldrh	r3, [r7, #26]
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003796:	8b3b      	ldrh	r3, [r7, #24]
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037a4:	ee16 0a90 	vmov	r0, s13
 80037a8:	f7fc fe72 	bl	8000490 <__aeabi_f2d>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80037b4:	a383      	add	r3, pc, #524	; (adr r3, 80039c4 <touch_Adjust+0x79c>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037be:	f7fd f931 	bl	8000a24 <__aeabi_dcmplt>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <touch_Adjust+0x5b4>
 80037c8:	a380      	add	r3, pc, #512	; (adr r3, 80039cc <touch_Adjust+0x7a4>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037d2:	f7fd f945 	bl	8000a60 <__aeabi_dcmpgt>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d036      	beq.n	800384a <touch_Adjust+0x622>
					{
						cnt=0;
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80037e2:	4b71      	ldr	r3, [pc, #452]	; (80039a8 <touch_Adjust+0x780>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	3b14      	subs	r3, #20
 80037e8:	b298      	uxth	r0, r3
 80037ea:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <touch_Adjust+0x780>)
 80037ec:	885b      	ldrh	r3, [r3, #2]
 80037ee:	3b14      	subs	r3, #20
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7ff fbfa 	bl	8002ff0 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80037fc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003800:	2114      	movs	r1, #20
 8003802:	2014      	movs	r0, #20
 8003804:	f7ff fbf4 	bl	8002ff0 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003808:	2300      	movs	r3, #0
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	2310      	movs	r3, #16
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800381a:	4a64      	ldr	r2, [pc, #400]	; (80039ac <touch_Adjust+0x784>)
 800381c:	2128      	movs	r1, #40	; 0x28
 800381e:	2005      	movs	r0, #5
 8003820:	f7fe f8a4 	bl	800196c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003824:	2300      	movs	r3, #0
 8003826:	9302      	str	r3, [sp, #8]
 8003828:	2310      	movs	r3, #16
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003836:	4a5e      	ldr	r2, [pc, #376]	; (80039b0 <touch_Adjust+0x788>)
 8003838:	213c      	movs	r1, #60	; 0x3c
 800383a:	2005      	movs	r0, #5
 800383c:	f7fe f896 	bl	800196c <lcd_ShowStr>

						HAL_Delay(1000);
 8003840:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003844:	f000 f9f6 	bl	8003c34 <HAL_Delay>
 							continue;
 8003848:	e0a8      	b.n	800399c <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 800384a:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <touch_Adjust+0x780>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	3b28      	subs	r3, #40	; 0x28
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003858:	88bb      	ldrh	r3, [r7, #4]
 800385a:	461a      	mov	r2, r3
 800385c:	883b      	ldrh	r3, [r7, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386c:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <touch_Adjust+0x78c>)
 800386e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8003872:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <touch_Adjust+0x780>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800387e:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <touch_Adjust+0x78c>)
 8003880:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	461a      	mov	r2, r3
 8003888:	883b      	ldrh	r3, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	ee07 3a90 	vmov	s15, r3
 8003890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800389c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038a8:	ee17 3a90 	vmov	r3, s15
 80038ac:	b21a      	sxth	r2, r3
 80038ae:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <touch_Adjust+0x78c>)
 80038b0:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <touch_Adjust+0x780>)
 80038b4:	885b      	ldrh	r3, [r3, #2]
 80038b6:	3b28      	subs	r3, #40	; 0x28
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	461a      	mov	r2, r3
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	ee07 3a90 	vmov	s15, r3
 80038cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <touch_Adjust+0x78c>)
 80038d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80038da:	4b33      	ldr	r3, [pc, #204]	; (80039a8 <touch_Adjust+0x780>)
 80038dc:	885b      	ldrh	r3, [r3, #2]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <touch_Adjust+0x78c>)
 80038e8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80038ec:	897b      	ldrh	r3, [r7, #10]
 80038ee:	461a      	mov	r2, r3
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4413      	add	r3, r2
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003904:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800390c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003910:	ee17 3a90 	vmov	r3, s15
 8003914:	b21a      	sxth	r2, r3
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <touch_Adjust+0x78c>)
 8003918:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <touch_Adjust+0x780>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	3b14      	subs	r3, #20
 8003920:	b298      	uxth	r0, r3
 8003922:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <touch_Adjust+0x780>)
 8003924:	885b      	ldrh	r3, [r3, #2]
 8003926:	3b14      	subs	r3, #20
 8003928:	b29b      	uxth	r3, r3
 800392a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800392e:	4619      	mov	r1, r3
 8003930:	f7ff fb5e 	bl	8002ff0 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8003934:	2300      	movs	r3, #0
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	2310      	movs	r3, #16
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <touch_Adjust+0x790>)
 8003948:	2128      	movs	r1, #40	; 0x28
 800394a:	2005      	movs	r0, #5
 800394c:	f7fe f80e 	bl	800196c <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003950:	2300      	movs	r3, #0
 8003952:	9302      	str	r3, [sp, #8]
 8003954:	2310      	movs	r3, #16
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <touch_Adjust+0x794>)
 8003964:	213c      	movs	r1, #60	; 0x3c
 8003966:	2005      	movs	r0, #5
 8003968:	f7fe f800 	bl	800196c <lcd_ShowStr>
					HAL_Delay(1000);
 800396c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003970:	f000 f960 	bl	8003c34 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8003974:	2300      	movs	r3, #0
 8003976:	9302      	str	r3, [sp, #8]
 8003978:	2310      	movs	r3, #16
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <touch_Adjust+0x798>)
 8003988:	2128      	movs	r1, #40	; 0x28
 800398a:	2005      	movs	r0, #5
 800398c:	f7fd ffee 	bl	800196c <lcd_ShowStr>
					TP_Save_Adjdata();
 8003990:	f7ff fc1c 	bl	80031cc <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8003994:	f7ff fc2a 	bl	80031ec <TP_Get_Adjdata>
					return;
 8003998:	e001      	b.n	800399e <touch_Adjust+0x776>
			}
		}
 800399a:	bf00      	nop
		HAL_Delay(50);
 800399c:	e490      	b.n	80032c0 <touch_Adjust+0x98>
 	}
}
 800399e:	3728      	adds	r7, #40	; 0x28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	f3af 8000 	nop.w
 80039a8:	200000f8 	.word	0x200000f8
 80039ac:	08009790 	.word	0x08009790
 80039b0:	080097b0 	.word	0x080097b0
 80039b4:	2000000c 	.word	0x2000000c
 80039b8:	080097d0 	.word	0x080097d0
 80039bc:	080097f0 	.word	0x080097f0
 80039c0:	08009810 	.word	0x08009810
 80039c4:	66666666 	.word	0x66666666
 80039c8:	3fee6666 	.word	0x3fee6666
 80039cc:	cccccccd 	.word	0xcccccccd
 80039d0:	3ff0cccc 	.word	0x3ff0cccc

080039d4 <touch_init>:

void touch_init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80039d8:	4904      	ldr	r1, [pc, #16]	; (80039ec <touch_init+0x18>)
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <touch_init+0x1c>)
 80039dc:	f7ff fa84 	bl	8002ee8 <TP_Read_XY>
	at24c_init();
 80039e0:	f7fd f9fa 	bl	8000dd8 <at24c_init>
	TP_Get_Adjdata();
 80039e4:	f7ff fc02 	bl	80031ec <TP_Get_Adjdata>
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000022 	.word	0x20000022
 80039f0:	20000018 	.word	0x20000018

080039f4 <touch_Scan>:

void touch_Scan(){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80039f8:	4b02      	ldr	r3, [pc, #8]	; (8003a04 <touch_Scan+0x10>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2000      	movs	r0, #0
 80039fe:	4798      	blx	r3
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	2000000c 	.word	0x2000000c

08003a08 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8003a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a10:	4805      	ldr	r0, [pc, #20]	; (8003a28 <touch_IsTouched+0x20>)
 8003a12:	f001 fbf5 	bl	8005200 <HAL_GPIO_ReadPin>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40020800 	.word	0x40020800

08003a2c <touch_GetX>:

uint16_t touch_GetX(){
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <touch_GetX+0x14>)
 8003a32:	899b      	ldrh	r3, [r3, #12]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	2000000c 	.word	0x2000000c

08003a44 <touch_GetY>:

uint16_t touch_GetY(){
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <touch_GetY+0x14>)
 8003a4a:	8adb      	ldrh	r3, [r3, #22]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000000c 	.word	0x2000000c

08003a5c <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003a60:	2201      	movs	r2, #1
 8003a62:	4903      	ldr	r1, [pc, #12]	; (8003a70 <uart_init_rs232+0x14>)
 8003a64:	4803      	ldr	r0, [pc, #12]	; (8003a74 <uart_init_rs232+0x18>)
 8003a66:	f004 fd68 	bl	800853a <HAL_UART_Receive_IT>
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200000e4 	.word	0x200000e4
 8003a74:	20000268 	.word	0x20000268

08003a78 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <HAL_UART_RxCpltCallback+0x30>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10a      	bne.n	8003aa0 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4907      	ldr	r1, [pc, #28]	; (8003aac <HAL_UART_RxCpltCallback+0x34>)
 8003a90:	4807      	ldr	r0, [pc, #28]	; (8003ab0 <HAL_UART_RxCpltCallback+0x38>)
 8003a92:	f004 fcc0 	bl	8008416 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003a96:	2201      	movs	r2, #1
 8003a98:	4904      	ldr	r1, [pc, #16]	; (8003aac <HAL_UART_RxCpltCallback+0x34>)
 8003a9a:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <HAL_UART_RxCpltCallback+0x38>)
 8003a9c:	f004 fd4d 	bl	800853a <HAL_UART_Receive_IT>
	}
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40011000 	.word	0x40011000
 8003aac:	200000e4 	.word	0x200000e4
 8003ab0:	20000268 	.word	0x20000268

08003ab4 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <DEC2BCD+0x44>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	08db      	lsrs	r3, r3, #3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	b258      	sxtb	r0, r3
 8003ace:	79fa      	ldrb	r2, [r7, #7]
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <DEC2BCD+0x44>)
 8003ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad6:	08d9      	lsrs	r1, r3, #3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	4303      	orrs	r3, r0
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	cccccccd 	.word	0xcccccccd

08003afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b00:	480d      	ldr	r0, [pc, #52]	; (8003b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b02:	490e      	ldr	r1, [pc, #56]	; (8003b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b04:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b08:	e002      	b.n	8003b10 <LoopCopyDataInit>

08003b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b0e:	3304      	adds	r3, #4

08003b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b14:	d3f9      	bcc.n	8003b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b18:	4c0b      	ldr	r4, [pc, #44]	; (8003b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b1c:	e001      	b.n	8003b22 <LoopFillZerobss>

08003b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b20:	3204      	adds	r2, #4

08003b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b24:	d3fb      	bcc.n	8003b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b26:	f7ff f89f 	bl	8002c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b2a:	f005 fcc5 	bl	80094b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b2e:	f7fe f819 	bl	8001b64 <main>
  bx  lr    
 8003b32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b3c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003b40:	0800c7d8 	.word	0x0800c7d8
  ldr r2, =_sbss
 8003b44:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8003b48:	20000404 	.word	0x20000404

08003b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b4c:	e7fe      	b.n	8003b4c <ADC_IRQHandler>
	...

08003b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <HAL_Init+0x40>)
 8003b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_Init+0x40>)
 8003b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_Init+0x40>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f000 fd61 	bl	8004640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b7e:	200f      	movs	r0, #15
 8003b80:	f000 f808 	bl	8003b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b84:	f7fe fdaa 	bl	80026dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023c00 	.word	0x40023c00

08003b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_InitTick+0x54>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_InitTick+0x58>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fd79 	bl	80046aa <HAL_SYSTICK_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00e      	b.n	8003be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b0f      	cmp	r3, #15
 8003bc6:	d80a      	bhi.n	8003bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	f000 fd41 	bl	8004656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bd4:	4a06      	ldr	r2, [pc, #24]	; (8003bf0 <HAL_InitTick+0x5c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000008 	.word	0x20000008
 8003bec:	20000048 	.word	0x20000048
 8003bf0:	20000044 	.word	0x20000044

08003bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_IncTick+0x20>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_IncTick+0x24>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <HAL_IncTick+0x24>)
 8003c06:	6013      	str	r3, [r2, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000048 	.word	0x20000048
 8003c18:	20000400 	.word	0x20000400

08003c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_GetTick+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000400 	.word	0x20000400

08003c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c3c:	f7ff ffee 	bl	8003c1c <HAL_GetTick>
 8003c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d005      	beq.n	8003c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_Delay+0x44>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c5a:	bf00      	nop
 8003c5c:	f7ff ffde 	bl	8003c1c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d8f7      	bhi.n	8003c5c <HAL_Delay+0x28>
  {
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000048 	.word	0x20000048

08003c7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e033      	b.n	8003cfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fe fd46 	bl	800272c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cc2:	f023 0302 	bic.w	r3, r3, #2
 8003cc6:	f043 0202 	orr.w	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa68 	bl	80041a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cea:	e001      	b.n	8003cf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_Start_DMA+0x1e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0e9      	b.n	8003ef6 <HAL_ADC_Start_DMA+0x1f2>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d018      	beq.n	8003d6a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d48:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <HAL_ADC_Start_DMA+0x1fc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6d      	ldr	r2, [pc, #436]	; (8003f04 <HAL_ADC_Start_DMA+0x200>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	0c9a      	lsrs	r2, r3, #18
 8003d54:	4613      	mov	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4413      	add	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d5c:	e002      	b.n	8003d64 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f9      	bne.n	8003d5e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d78:	d107      	bne.n	8003d8a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d88:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	f040 80a1 	bne.w	8003edc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	d106      	bne.n	8003de8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f023 0206 	bic.w	r2, r3, #6
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
 8003de6:	e002      	b.n	8003dee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df6:	4b44      	ldr	r3, [pc, #272]	; (8003f08 <HAL_ADC_Start_DMA+0x204>)
 8003df8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4a43      	ldr	r2, [pc, #268]	; (8003f0c <HAL_ADC_Start_DMA+0x208>)
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <HAL_ADC_Start_DMA+0x20c>)
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	4a41      	ldr	r2, [pc, #260]	; (8003f14 <HAL_ADC_Start_DMA+0x210>)
 8003e10:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e2a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	334c      	adds	r3, #76	; 0x4c
 8003e46:	4619      	mov	r1, r3
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f000 fce8 	bl	8004820 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d12a      	bne.n	8003eb2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <HAL_ADC_Start_DMA+0x214>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d015      	beq.n	8003e92 <HAL_ADC_Start_DMA+0x18e>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <HAL_ADC_Start_DMA+0x218>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d105      	bne.n	8003e7c <HAL_ADC_Start_DMA+0x178>
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_ADC_Start_DMA+0x204>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <HAL_ADC_Start_DMA+0x21c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d136      	bne.n	8003ef4 <HAL_ADC_Start_DMA+0x1f0>
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <HAL_ADC_Start_DMA+0x204>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d130      	bne.n	8003ef4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d129      	bne.n	8003ef4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e020      	b.n	8003ef4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_ADC_Start_DMA+0x214>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d11b      	bne.n	8003ef4 <HAL_ADC_Start_DMA+0x1f0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d114      	bne.n	8003ef4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	e00b      	b.n	8003ef4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f043 0210 	orr.w	r2, r3, #16
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000008 	.word	0x20000008
 8003f04:	431bde83 	.word	0x431bde83
 8003f08:	40012300 	.word	0x40012300
 8003f0c:	0800439d 	.word	0x0800439d
 8003f10:	08004457 	.word	0x08004457
 8003f14:	08004473 	.word	0x08004473
 8003f18:	40012000 	.word	0x40012000
 8003f1c:	40012100 	.word	0x40012100
 8003f20:	40012200 	.word	0x40012200

08003f24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e105      	b.n	8004188 <HAL_ADC_ConfigChannel+0x228>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b09      	cmp	r3, #9
 8003f8a:	d925      	bls.n	8003fd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68d9      	ldr	r1, [r3, #12]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3b1e      	subs	r3, #30
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	400a      	ands	r2, r1
 8003fb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68d9      	ldr	r1, [r3, #12]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4403      	add	r3, r0
 8003fca:	3b1e      	subs	r3, #30
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	e022      	b.n	800401e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6919      	ldr	r1, [r3, #16]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	2207      	movs	r2, #7
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6919      	ldr	r1, [r3, #16]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	4618      	mov	r0, r3
 800400e:	4603      	mov	r3, r0
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4403      	add	r3, r0
 8004014:	409a      	lsls	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d824      	bhi.n	8004070 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	3b05      	subs	r3, #5
 8004038:	221f      	movs	r2, #31
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43da      	mvns	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	400a      	ands	r2, r1
 8004046:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4618      	mov	r0, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	3b05      	subs	r3, #5
 8004062:	fa00 f203 	lsl.w	r2, r0, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	635a      	str	r2, [r3, #52]	; 0x34
 800406e:	e04c      	b.n	800410a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d824      	bhi.n	80040c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	3b23      	subs	r3, #35	; 0x23
 800408a:	221f      	movs	r2, #31
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43da      	mvns	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	400a      	ands	r2, r1
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4618      	mov	r0, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	3b23      	subs	r3, #35	; 0x23
 80040b4:	fa00 f203 	lsl.w	r2, r0, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
 80040c0:	e023      	b.n	800410a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	3b41      	subs	r3, #65	; 0x41
 80040d4:	221f      	movs	r2, #31
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43da      	mvns	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	400a      	ands	r2, r1
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	4618      	mov	r0, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	3b41      	subs	r3, #65	; 0x41
 80040fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_ADC_ConfigChannel+0x234>)
 800410c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_ADC_ConfigChannel+0x238>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d109      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1cc>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b12      	cmp	r3, #18
 800411e:	d105      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_ADC_ConfigChannel+0x238>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d123      	bne.n	800417e <HAL_ADC_ConfigChannel+0x21e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b10      	cmp	r3, #16
 800413c:	d003      	beq.n	8004146 <HAL_ADC_ConfigChannel+0x1e6>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b11      	cmp	r3, #17
 8004144:	d11b      	bne.n	800417e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b10      	cmp	r3, #16
 8004158:	d111      	bne.n	800417e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_ADC_ConfigChannel+0x23c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a10      	ldr	r2, [pc, #64]	; (80041a0 <HAL_ADC_ConfigChannel+0x240>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	0c9a      	lsrs	r2, r3, #18
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004170:	e002      	b.n	8004178 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3b01      	subs	r3, #1
 8004176:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f9      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40012300 	.word	0x40012300
 8004198:	40012000 	.word	0x40012000
 800419c:	20000008 	.word	0x20000008
 80041a0:	431bde83 	.word	0x431bde83

080041a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ac:	4b79      	ldr	r3, [pc, #484]	; (8004394 <ADC_Init+0x1f0>)
 80041ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	021a      	lsls	r2, r3, #8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	4a58      	ldr	r2, [pc, #352]	; (8004398 <ADC_Init+0x1f4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d022      	beq.n	8004282 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800424a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6899      	ldr	r1, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800426c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	e00f      	b.n	80042a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0202 	bic.w	r2, r2, #2
 80042b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6899      	ldr	r1, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7e1b      	ldrb	r3, [r3, #24]
 80042bc:	005a      	lsls	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01b      	beq.n	8004308 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	3b01      	subs	r3, #1
 80042fc:	035a      	lsls	r2, r3, #13
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e007      	b.n	8004318 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004316:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	3b01      	subs	r3, #1
 8004334:	051a      	lsls	r2, r3, #20
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800434c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800435a:	025a      	lsls	r2, r3, #9
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	029a      	lsls	r2, r3, #10
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40012300 	.word	0x40012300
 8004398:	0f000001 	.word	0x0f000001

0800439c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d13c      	bne.n	8004430 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d12b      	bne.n	8004428 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d127      	bne.n	8004428 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d119      	bne.n	8004428 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0220 	bic.w	r2, r2, #32
 8004402:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f043 0201 	orr.w	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fd7b 	bl	8003f24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800442e:	e00e      	b.n	800444e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fd85 	bl	8003f4c <HAL_ADC_ErrorCallback>
}
 8004442:	e004      	b.n	800444e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fd67 	bl	8003f38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2240      	movs	r2, #64	; 0x40
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	f043 0204 	orr.w	r2, r3, #4
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff fd5a 	bl	8003f4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044bc:	4013      	ands	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <__NVIC_GetPriorityGrouping+0x18>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	f003 0307 	and.w	r3, r3, #7
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	db0b      	blt.n	800452e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	f003 021f 	and.w	r2, r3, #31
 800451c:	4907      	ldr	r1, [pc, #28]	; (800453c <__NVIC_EnableIRQ+0x38>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2001      	movs	r0, #1
 8004526:	fa00 f202 	lsl.w	r2, r0, r2
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000e100 	.word	0xe000e100

08004540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db0a      	blt.n	800456a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	490c      	ldr	r1, [pc, #48]	; (800458c <__NVIC_SetPriority+0x4c>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	440b      	add	r3, r1
 8004564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004568:	e00a      	b.n	8004580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <__NVIC_SetPriority+0x50>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	3b04      	subs	r3, #4
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	440b      	add	r3, r1
 800457e:	761a      	strb	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	bf28      	it	cs
 80045b2:	2304      	movcs	r3, #4
 80045b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d902      	bls.n	80045c4 <NVIC_EncodePriority+0x30>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3b03      	subs	r3, #3
 80045c2:	e000      	b.n	80045c6 <NVIC_EncodePriority+0x32>
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045dc:	f04f 31ff 	mov.w	r1, #4294967295
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43d9      	mvns	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	4313      	orrs	r3, r2
         );
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800460c:	d301      	bcc.n	8004612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800460e:	2301      	movs	r3, #1
 8004610:	e00f      	b.n	8004632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <SysTick_Config+0x40>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800461a:	210f      	movs	r1, #15
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	f7ff ff8e 	bl	8004540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <SysTick_Config+0x40>)
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <SysTick_Config+0x40>)
 800462c:	2207      	movs	r2, #7
 800462e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	e000e010 	.word	0xe000e010

08004640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff29 	bl	80044a0 <__NVIC_SetPriorityGrouping>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004668:	f7ff ff3e 	bl	80044e8 <__NVIC_GetPriorityGrouping>
 800466c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	6978      	ldr	r0, [r7, #20]
 8004674:	f7ff ff8e 	bl	8004594 <NVIC_EncodePriority>
 8004678:	4602      	mov	r2, r0
 800467a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff5d 	bl	8004540 <__NVIC_SetPriority>
}
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff31 	bl	8004504 <__NVIC_EnableIRQ>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ffa2 	bl	80045fc <SysTick_Config>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046d0:	f7ff faa4 	bl	8003c1c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e099      	b.n	8004814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004700:	e00f      	b.n	8004722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004702:	f7ff fa8b 	bl	8003c1c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b05      	cmp	r3, #5
 800470e:	d908      	bls.n	8004722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2203      	movs	r2, #3
 800471a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e078      	b.n	8004814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e8      	bne.n	8004702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4b38      	ldr	r3, [pc, #224]	; (800481c <HAL_DMA_Init+0x158>)
 800473c:	4013      	ands	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800474e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2b04      	cmp	r3, #4
 800477a:	d107      	bne.n	800478c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	4313      	orrs	r3, r2
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0307 	bic.w	r3, r3, #7
 80047a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d117      	bne.n	80047e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fb01 	bl	8004dd0 <DMA_CheckFifoParam>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047e2:	2301      	movs	r3, #1
 80047e4:	e016      	b.n	8004814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fab8 	bl	8004d64 <DMA_CalcBaseAndBitshift>
 80047f4:	4603      	mov	r3, r0
 80047f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	223f      	movs	r2, #63	; 0x3f
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	f010803f 	.word	0xf010803f

08004820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_DMA_Start_IT+0x26>
 8004842:	2302      	movs	r3, #2
 8004844:	e040      	b.n	80048c8 <HAL_DMA_Start_IT+0xa8>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d12f      	bne.n	80048ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fa4a 	bl	8004d08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	223f      	movs	r2, #63	; 0x3f
 800487a:	409a      	lsls	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0216 	orr.w	r2, r2, #22
 800488e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	e005      	b.n	80048c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
 80048c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048de:	f7ff f99d 	bl	8003c1c <HAL_GetTick>
 80048e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d008      	beq.n	8004902 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e052      	b.n	80049a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0216 	bic.w	r2, r2, #22
 8004910:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004920:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <HAL_DMA_Abort+0x62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0208 	bic.w	r2, r2, #8
 8004940:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004952:	e013      	b.n	800497c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004954:	f7ff f962 	bl	8003c1c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b05      	cmp	r3, #5
 8004960:	d90c      	bls.n	800497c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2203      	movs	r2, #3
 800496c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e015      	b.n	80049a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e4      	bne.n	8004954 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	223f      	movs	r2, #63	; 0x3f
 8004990:	409a      	lsls	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d004      	beq.n	80049ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00c      	b.n	80049e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2205      	movs	r2, #5
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a00:	4b92      	ldr	r3, [pc, #584]	; (8004c4c <HAL_DMA_IRQHandler+0x258>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a92      	ldr	r2, [pc, #584]	; (8004c50 <HAL_DMA_IRQHandler+0x25c>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	0a9b      	lsrs	r3, r3, #10
 8004a0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	2208      	movs	r2, #8
 8004a20:	409a      	lsls	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01a      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d013      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0204 	bic.w	r2, r2, #4
 8004a46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d012      	beq.n	8004a96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	2201      	movs	r2, #1
 8004a84:	409a      	lsls	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f043 0202 	orr.w	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d012      	beq.n	8004acc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	2204      	movs	r2, #4
 8004aba:	409a      	lsls	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	f043 0204 	orr.w	r2, r3, #4
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d043      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d03c      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	2210      	movs	r2, #16
 8004af0:	409a      	lsls	r2, r3
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d018      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d024      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
 8004b22:	e01f      	b.n	8004b64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
 8004b34:	e016      	b.n	8004b64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d107      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0208 	bic.w	r2, r2, #8
 8004b52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	2220      	movs	r2, #32
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 808e 	beq.w	8004c92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8086 	beq.w	8004c92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d136      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0216 	bic.w	r2, r2, #22
 8004bac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <HAL_DMA_IRQHandler+0x1da>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0208 	bic.w	r2, r2, #8
 8004bdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	223f      	movs	r2, #63	; 0x3f
 8004be4:	409a      	lsls	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d07d      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
        }
        return;
 8004c0a:	e078      	b.n	8004cfe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01c      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d108      	bne.n	8004c3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d030      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
 8004c38:	e02b      	b.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d027      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
 8004c4a:	e022      	b.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
 8004c4c:	20000008 	.word	0x20000008
 8004c50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0210 	bic.w	r2, r2, #16
 8004c70:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d032      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d022      	beq.n	8004cec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2205      	movs	r2, #5
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d307      	bcc.n	8004cda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f2      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x2ca>
 8004cd8:	e000      	b.n	8004cdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cda:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
 8004cfc:	e000      	b.n	8004d00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004cfe:	bf00      	nop
    }
  }
}
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop

08004d08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d108      	bne.n	8004d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d46:	e007      	b.n	8004d58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	3b10      	subs	r3, #16
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x64>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <DMA_CalcBaseAndBitshift+0x68>)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d909      	bls.n	8004da6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	659a      	str	r2, [r3, #88]	; 0x58
 8004da4:	e007      	b.n	8004db6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	aaaaaaab 	.word	0xaaaaaaab
 8004dcc:	0800c7c0 	.word	0x0800c7c0

08004dd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d11f      	bne.n	8004e2a <DMA_CheckFifoParam+0x5a>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d856      	bhi.n	8004e9e <DMA_CheckFifoParam+0xce>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <DMA_CheckFifoParam+0x28>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e1b 	.word	0x08004e1b
 8004e00:	08004e09 	.word	0x08004e09
 8004e04:	08004e9f 	.word	0x08004e9f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d046      	beq.n	8004ea2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e18:	e043      	b.n	8004ea2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e22:	d140      	bne.n	8004ea6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e28:	e03d      	b.n	8004ea6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	d121      	bne.n	8004e78 <DMA_CheckFifoParam+0xa8>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d837      	bhi.n	8004eaa <DMA_CheckFifoParam+0xda>
 8004e3a:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <DMA_CheckFifoParam+0x70>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e51 	.word	0x08004e51
 8004e44:	08004e57 	.word	0x08004e57
 8004e48:	08004e51 	.word	0x08004e51
 8004e4c:	08004e69 	.word	0x08004e69
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
      break;
 8004e54:	e030      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d025      	beq.n	8004eae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e66:	e022      	b.n	8004eae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e70:	d11f      	bne.n	8004eb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e76:	e01c      	b.n	8004eb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d903      	bls.n	8004e86 <DMA_CheckFifoParam+0xb6>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d003      	beq.n	8004e8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e84:	e018      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8a:	e015      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9c:	e00b      	b.n	8004eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e00a      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e008      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e006      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e004      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8004eb6:	bf00      	nop
    }
  } 
  
  return status; 
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop

08004ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	; 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e16b      	b.n	80051bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	f040 815a 	bne.w	80051b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d005      	beq.n	8004f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d130      	bne.n	8004f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f50:	2201      	movs	r2, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 0201 	and.w	r2, r3, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d017      	beq.n	8004fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	2203      	movs	r2, #3
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d123      	bne.n	800500c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	08da      	lsrs	r2, r3, #3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3208      	adds	r2, #8
 8004fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	220f      	movs	r2, #15
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	08da      	lsrs	r2, r3, #3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3208      	adds	r2, #8
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	2203      	movs	r2, #3
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 0203 	and.w	r2, r3, #3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80b4 	beq.w	80051b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b60      	ldr	r3, [pc, #384]	; (80051d4 <HAL_GPIO_Init+0x30c>)
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	4a5f      	ldr	r2, [pc, #380]	; (80051d4 <HAL_GPIO_Init+0x30c>)
 8005058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800505c:	6453      	str	r3, [r2, #68]	; 0x44
 800505e:	4b5d      	ldr	r3, [pc, #372]	; (80051d4 <HAL_GPIO_Init+0x30c>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800506a:	4a5b      	ldr	r2, [pc, #364]	; (80051d8 <HAL_GPIO_Init+0x310>)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3302      	adds	r3, #2
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	220f      	movs	r2, #15
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a52      	ldr	r2, [pc, #328]	; (80051dc <HAL_GPIO_Init+0x314>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d02b      	beq.n	80050ee <HAL_GPIO_Init+0x226>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a51      	ldr	r2, [pc, #324]	; (80051e0 <HAL_GPIO_Init+0x318>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d025      	beq.n	80050ea <HAL_GPIO_Init+0x222>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a50      	ldr	r2, [pc, #320]	; (80051e4 <HAL_GPIO_Init+0x31c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d01f      	beq.n	80050e6 <HAL_GPIO_Init+0x21e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a4f      	ldr	r2, [pc, #316]	; (80051e8 <HAL_GPIO_Init+0x320>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d019      	beq.n	80050e2 <HAL_GPIO_Init+0x21a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a4e      	ldr	r2, [pc, #312]	; (80051ec <HAL_GPIO_Init+0x324>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_GPIO_Init+0x216>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a4d      	ldr	r2, [pc, #308]	; (80051f0 <HAL_GPIO_Init+0x328>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00d      	beq.n	80050da <HAL_GPIO_Init+0x212>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a4c      	ldr	r2, [pc, #304]	; (80051f4 <HAL_GPIO_Init+0x32c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d007      	beq.n	80050d6 <HAL_GPIO_Init+0x20e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a4b      	ldr	r2, [pc, #300]	; (80051f8 <HAL_GPIO_Init+0x330>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_GPIO_Init+0x20a>
 80050ce:	2307      	movs	r3, #7
 80050d0:	e00e      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050d2:	2308      	movs	r3, #8
 80050d4:	e00c      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050d6:	2306      	movs	r3, #6
 80050d8:	e00a      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050da:	2305      	movs	r3, #5
 80050dc:	e008      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050de:	2304      	movs	r3, #4
 80050e0:	e006      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050e2:	2303      	movs	r3, #3
 80050e4:	e004      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e002      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_GPIO_Init+0x228>
 80050ee:	2300      	movs	r3, #0
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	f002 0203 	and.w	r2, r2, #3
 80050f6:	0092      	lsls	r2, r2, #2
 80050f8:	4093      	lsls	r3, r2
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005100:	4935      	ldr	r1, [pc, #212]	; (80051d8 <HAL_GPIO_Init+0x310>)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	089b      	lsrs	r3, r3, #2
 8005106:	3302      	adds	r3, #2
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_GPIO_Init+0x334>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005132:	4a32      	ldr	r2, [pc, #200]	; (80051fc <HAL_GPIO_Init+0x334>)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005138:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_GPIO_Init+0x334>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800515c:	4a27      	ldr	r2, [pc, #156]	; (80051fc <HAL_GPIO_Init+0x334>)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005162:	4b26      	ldr	r3, [pc, #152]	; (80051fc <HAL_GPIO_Init+0x334>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	43db      	mvns	r3, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4013      	ands	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005186:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <HAL_GPIO_Init+0x334>)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_GPIO_Init+0x334>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051b0:	4a12      	ldr	r2, [pc, #72]	; (80051fc <HAL_GPIO_Init+0x334>)
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b0f      	cmp	r3, #15
 80051c0:	f67f ae90 	bls.w	8004ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3724      	adds	r7, #36	; 0x24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40013800 	.word	0x40013800
 80051dc:	40020000 	.word	0x40020000
 80051e0:	40020400 	.word	0x40020400
 80051e4:	40020800 	.word	0x40020800
 80051e8:	40020c00 	.word	0x40020c00
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40021400 	.word	0x40021400
 80051f4:	40021800 	.word	0x40021800
 80051f8:	40021c00 	.word	0x40021c00
 80051fc:	40013c00 	.word	0x40013c00

08005200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	887b      	ldrh	r3, [r7, #2]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	e001      	b.n	8005222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
 800523c:	4613      	mov	r3, r2
 800523e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005240:	787b      	ldrb	r3, [r7, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005246:	887a      	ldrh	r2, [r7, #2]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800524c:	e003      	b.n	8005256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800524e:	887b      	ldrh	r3, [r7, #2]
 8005250:	041a      	lsls	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	619a      	str	r2, [r3, #24]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005274:	887a      	ldrh	r2, [r7, #2]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	041a      	lsls	r2, r3, #16
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	43d9      	mvns	r1, r3
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	400b      	ands	r3, r1
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	619a      	str	r2, [r3, #24]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e12b      	b.n	8005502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fd fac8 	bl	8002854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052fc:	f001 fd06 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 8005300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4a81      	ldr	r2, [pc, #516]	; (800550c <HAL_I2C_Init+0x274>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d807      	bhi.n	800531c <HAL_I2C_Init+0x84>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a80      	ldr	r2, [pc, #512]	; (8005510 <HAL_I2C_Init+0x278>)
 8005310:	4293      	cmp	r3, r2
 8005312:	bf94      	ite	ls
 8005314:	2301      	movls	r3, #1
 8005316:	2300      	movhi	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e006      	b.n	800532a <HAL_I2C_Init+0x92>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a7d      	ldr	r2, [pc, #500]	; (8005514 <HAL_I2C_Init+0x27c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	bf94      	ite	ls
 8005324:	2301      	movls	r3, #1
 8005326:	2300      	movhi	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0e7      	b.n	8005502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4a78      	ldr	r2, [pc, #480]	; (8005518 <HAL_I2C_Init+0x280>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	0c9b      	lsrs	r3, r3, #18
 800533c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4a6a      	ldr	r2, [pc, #424]	; (800550c <HAL_I2C_Init+0x274>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d802      	bhi.n	800536c <HAL_I2C_Init+0xd4>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3301      	adds	r3, #1
 800536a:	e009      	b.n	8005380 <HAL_I2C_Init+0xe8>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	4a69      	ldr	r2, [pc, #420]	; (800551c <HAL_I2C_Init+0x284>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	3301      	adds	r3, #1
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	430b      	orrs	r3, r1
 8005386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	495c      	ldr	r1, [pc, #368]	; (800550c <HAL_I2C_Init+0x274>)
 800539c:	428b      	cmp	r3, r1
 800539e:	d819      	bhi.n	80053d4 <HAL_I2C_Init+0x13c>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1e59      	subs	r1, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ae:	1c59      	adds	r1, r3, #1
 80053b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053b4:	400b      	ands	r3, r1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_I2C_Init+0x138>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1e59      	subs	r1, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c8:	3301      	adds	r3, #1
 80053ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ce:	e051      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 80053d0:	2304      	movs	r3, #4
 80053d2:	e04f      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d111      	bne.n	8005400 <HAL_I2C_Init+0x168>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1e58      	subs	r0, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6859      	ldr	r1, [r3, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	e012      	b.n	8005426 <HAL_I2C_Init+0x18e>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1e58      	subs	r0, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	0099      	lsls	r1, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	fbb0 f3f3 	udiv	r3, r0, r3
 8005416:	3301      	adds	r3, #1
 8005418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_I2C_Init+0x196>
 800542a:	2301      	movs	r3, #1
 800542c:	e022      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10e      	bne.n	8005454 <HAL_I2C_Init+0x1bc>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1e58      	subs	r0, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	440b      	add	r3, r1
 8005444:	fbb0 f3f3 	udiv	r3, r0, r3
 8005448:	3301      	adds	r3, #1
 800544a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005452:	e00f      	b.n	8005474 <HAL_I2C_Init+0x1dc>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1e58      	subs	r0, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	0099      	lsls	r1, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	fbb0 f3f3 	udiv	r3, r0, r3
 800546a:	3301      	adds	r3, #1
 800546c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	6809      	ldr	r1, [r1, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6911      	ldr	r1, [r2, #16]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68d2      	ldr	r2, [r2, #12]
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6812      	ldr	r2, [r2, #0]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	000186a0 	.word	0x000186a0
 8005510:	001e847f 	.word	0x001e847f
 8005514:	003d08ff 	.word	0x003d08ff
 8005518:	431bde83 	.word	0x431bde83
 800551c:	10624dd3 	.word	0x10624dd3

08005520 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	817b      	strh	r3, [r7, #10]
 8005532:	460b      	mov	r3, r1
 8005534:	813b      	strh	r3, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800553a:	f7fe fb6f 	bl	8003c1c <HAL_GetTick>
 800553e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b20      	cmp	r3, #32
 800554a:	f040 80d9 	bne.w	8005700 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	2319      	movs	r3, #25
 8005554:	2201      	movs	r2, #1
 8005556:	496d      	ldr	r1, [pc, #436]	; (800570c <HAL_I2C_Mem_Write+0x1ec>)
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fdad 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
 8005566:	e0cc      	b.n	8005702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_I2C_Mem_Write+0x56>
 8005572:	2302      	movs	r3, #2
 8005574:	e0c5      	b.n	8005702 <HAL_I2C_Mem_Write+0x1e2>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d007      	beq.n	800559c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2221      	movs	r2, #33	; 0x21
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2240      	movs	r2, #64	; 0x40
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a3a      	ldr	r2, [r7, #32]
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a4d      	ldr	r2, [pc, #308]	; (8005710 <HAL_I2C_Mem_Write+0x1f0>)
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055de:	88f8      	ldrh	r0, [r7, #6]
 80055e0:	893a      	ldrh	r2, [r7, #8]
 80055e2:	8979      	ldrh	r1, [r7, #10]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	4603      	mov	r3, r0
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fbe4 	bl	8005dbc <I2C_RequestMemoryWrite>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d052      	beq.n	80056a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e081      	b.n	8005702 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fe2e 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b04      	cmp	r3, #4
 8005614:	d107      	bne.n	8005626 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e06b      	b.n	8005702 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b04      	cmp	r3, #4
 8005666:	d11b      	bne.n	80056a0 <HAL_I2C_Mem_Write+0x180>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566c:	2b00      	cmp	r3, #0
 800566e:	d017      	beq.n	80056a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	781a      	ldrb	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1aa      	bne.n	80055fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 fe1a 	bl	80062e6 <I2C_WaitOnBTFFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d107      	bne.n	80056d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e016      	b.n	8005702 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	00100002 	.word	0x00100002
 8005710:	ffff0000 	.word	0xffff0000

08005714 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08c      	sub	sp, #48	; 0x30
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	461a      	mov	r2, r3
 8005722:	4603      	mov	r3, r0
 8005724:	817b      	strh	r3, [r7, #10]
 8005726:	460b      	mov	r3, r1
 8005728:	813b      	strh	r3, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800572e:	f7fe fa75 	bl	8003c1c <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b20      	cmp	r3, #32
 800573e:	f040 8208 	bne.w	8005b52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2319      	movs	r3, #25
 8005748:	2201      	movs	r2, #1
 800574a:	497b      	ldr	r1, [pc, #492]	; (8005938 <HAL_I2C_Mem_Read+0x224>)
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fcb3 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
 800575a:	e1fb      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_I2C_Mem_Read+0x56>
 8005766:	2302      	movs	r3, #2
 8005768:	e1f4      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d007      	beq.n	8005790 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800579e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2222      	movs	r2, #34	; 0x22
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2240      	movs	r2, #64	; 0x40
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4a5b      	ldr	r2, [pc, #364]	; (800593c <HAL_I2C_Mem_Read+0x228>)
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057d2:	88f8      	ldrh	r0, [r7, #6]
 80057d4:	893a      	ldrh	r2, [r7, #8]
 80057d6:	8979      	ldrh	r1, [r7, #10]
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4603      	mov	r3, r0
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fb80 	bl	8005ee8 <I2C_RequestMemoryRead>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e1b0      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d113      	bne.n	8005822 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fa:	2300      	movs	r3, #0
 80057fc:	623b      	str	r3, [r7, #32]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	623b      	str	r3, [r7, #32]
 800580e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e184      	b.n	8005b2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	2b01      	cmp	r3, #1
 8005828:	d11b      	bne.n	8005862 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e164      	b.n	8005b2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005866:	2b02      	cmp	r3, #2
 8005868:	d11b      	bne.n	80058a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	e144      	b.n	8005b2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058b8:	e138      	b.n	8005b2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058be:	2b03      	cmp	r3, #3
 80058c0:	f200 80f1 	bhi.w	8005aa6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d123      	bne.n	8005914 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fd49 	bl	8006368 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e139      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005912:	e10b      	b.n	8005b2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005918:	2b02      	cmp	r3, #2
 800591a:	d14e      	bne.n	80059ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	2200      	movs	r2, #0
 8005924:	4906      	ldr	r1, [pc, #24]	; (8005940 <HAL_I2C_Mem_Read+0x22c>)
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fbc6 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e10e      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
 8005936:	bf00      	nop
 8005938:	00100002 	.word	0x00100002
 800593c:	ffff0000 	.word	0xffff0000
 8005940:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059b8:	e0b8      	b.n	8005b2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	2200      	movs	r2, #0
 80059c2:	4966      	ldr	r1, [pc, #408]	; (8005b5c <HAL_I2C_Mem_Read+0x448>)
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fb77 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0bf      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	494f      	ldr	r1, [pc, #316]	; (8005b5c <HAL_I2C_Mem_Read+0x448>)
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fb49 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e091      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aa4:	e042      	b.n	8005b2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fc5c 	bl	8006368 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e04c      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d118      	bne.n	8005b2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f aec2 	bne.w	80058ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e000      	b.n	8005b54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
  }
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	; 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	00010004 	.word	0x00010004

08005b60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7fe f854 	bl	8003c1c <HAL_GetTick>
 8005b74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005b76:	2301      	movs	r3, #1
 8005b78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	f040 8111 	bne.w	8005daa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2319      	movs	r3, #25
 8005b8e:	2201      	movs	r2, #1
 8005b90:	4988      	ldr	r1, [pc, #544]	; (8005db4 <HAL_I2C_IsDeviceReady+0x254>)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fa90 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e104      	b.n	8005dac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_I2C_IsDeviceReady+0x50>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0fd      	b.n	8005dac <HAL_I2C_IsDeviceReady+0x24c>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d007      	beq.n	8005bd6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005be4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2224      	movs	r2, #36	; 0x24
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a70      	ldr	r2, [pc, #448]	; (8005db8 <HAL_I2C_IsDeviceReady+0x258>)
 8005bf8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fa4e 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00d      	beq.n	8005c3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c30:	d103      	bne.n	8005c3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0b6      	b.n	8005dac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c3e:	897b      	ldrh	r3, [r7, #10]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005c4e:	f7fd ffe5 	bl	8003c1c <HAL_GetTick>
 8005c52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	bf0c      	ite	eq
 8005c62:	2301      	moveq	r3, #1
 8005c64:	2300      	movne	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c78:	bf0c      	ite	eq
 8005c7a:	2301      	moveq	r3, #1
 8005c7c:	2300      	movne	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c82:	e025      	b.n	8005cd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c84:	f7fd ffca 	bl	8003c1c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d302      	bcc.n	8005c9a <HAL_I2C_IsDeviceReady+0x13a>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d103      	bne.n	8005ca2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	22a0      	movs	r2, #160	; 0xa0
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2301      	moveq	r3, #1
 8005cca:	2300      	movne	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2ba0      	cmp	r3, #160	; 0xa0
 8005cda:	d005      	beq.n	8005ce8 <HAL_I2C_IsDeviceReady+0x188>
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d102      	bne.n	8005ce8 <HAL_I2C_IsDeviceReady+0x188>
 8005ce2:	7dbb      	ldrb	r3, [r7, #22]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0cd      	beq.n	8005c84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d129      	bne.n	8005d52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2319      	movs	r3, #25
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4921      	ldr	r1, [pc, #132]	; (8005db4 <HAL_I2C_IsDeviceReady+0x254>)
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f9c2 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e036      	b.n	8005dac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e02c      	b.n	8005dac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2319      	movs	r3, #25
 8005d72:	2201      	movs	r2, #1
 8005d74:	490f      	ldr	r1, [pc, #60]	; (8005db4 <HAL_I2C_IsDeviceReady+0x254>)
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f99e 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e012      	b.n	8005dac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	f4ff af32 	bcc.w	8005bfa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
  }
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	00100002 	.word	0x00100002
 8005db8:	ffff0000 	.word	0xffff0000

08005dbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	817b      	strh	r3, [r7, #10]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	813b      	strh	r3, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f960 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0c:	d103      	bne.n	8005e16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e05f      	b.n	8005eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e1a:	897b      	ldrh	r3, [r7, #10]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	6a3a      	ldr	r2, [r7, #32]
 8005e2e:	492d      	ldr	r1, [pc, #180]	; (8005ee4 <I2C_RequestMemoryWrite+0x128>)
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f998 	bl	8006166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e04c      	b.n	8005eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e58:	6a39      	ldr	r1, [r7, #32]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fa02 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d107      	bne.n	8005e7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e02b      	b.n	8005eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d105      	bne.n	8005e94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e88:	893b      	ldrh	r3, [r7, #8]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	611a      	str	r2, [r3, #16]
 8005e92:	e021      	b.n	8005ed8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e94:	893b      	ldrh	r3, [r7, #8]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea4:	6a39      	ldr	r1, [r7, #32]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 f9dc 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00d      	beq.n	8005ece <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d107      	bne.n	8005eca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e005      	b.n	8005eda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ece:	893b      	ldrh	r3, [r7, #8]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	00010002 	.word	0x00010002

08005ee8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	817b      	strh	r3, [r7, #10]
 8005efa:	460b      	mov	r3, r1
 8005efc:	813b      	strh	r3, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f8c2 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00d      	beq.n	8005f56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f48:	d103      	bne.n	8005f52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0aa      	b.n	80060ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	4952      	ldr	r1, [pc, #328]	; (80060b4 <I2C_RequestMemoryRead+0x1cc>)
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f8fa 	bl	8006166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e097      	b.n	80060ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f94:	6a39      	ldr	r1, [r7, #32]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f964 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d107      	bne.n	8005fba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e076      	b.n	80060ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d105      	bne.n	8005fd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc4:	893b      	ldrh	r3, [r7, #8]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	611a      	str	r2, [r3, #16]
 8005fce:	e021      	b.n	8006014 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fd0:	893b      	ldrh	r3, [r7, #8]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe0:	6a39      	ldr	r1, [r7, #32]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f93e 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d107      	bne.n	8006006 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e050      	b.n	80060ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800600a:	893b      	ldrh	r3, [r7, #8]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006016:	6a39      	ldr	r1, [r7, #32]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f923 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00d      	beq.n	8006040 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	2b04      	cmp	r3, #4
 800602a:	d107      	bne.n	800603c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e035      	b.n	80060ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800604e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	2200      	movs	r2, #0
 8006058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f82b 	bl	80060b8 <I2C_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006076:	d103      	bne.n	8006080 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800607e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e013      	b.n	80060ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006084:	897b      	ldrh	r3, [r7, #10]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f043 0301 	orr.w	r3, r3, #1
 800608c:	b2da      	uxtb	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	4906      	ldr	r1, [pc, #24]	; (80060b4 <I2C_RequestMemoryRead+0x1cc>)
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f863 	bl	8006166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	00010002 	.word	0x00010002

080060b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060c8:	e025      	b.n	8006116 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d021      	beq.n	8006116 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d2:	f7fd fda3 	bl	8003c1c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d302      	bcc.n	80060e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d116      	bne.n	8006116 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f043 0220 	orr.w	r2, r3, #32
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e023      	b.n	800615e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	0c1b      	lsrs	r3, r3, #16
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10d      	bne.n	800613c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	43da      	mvns	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	e00c      	b.n	8006156 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	43da      	mvns	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf0c      	ite	eq
 800614e:	2301      	moveq	r3, #1
 8006150:	2300      	movne	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	429a      	cmp	r2, r3
 800615a:	d0b6      	beq.n	80060ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006174:	e051      	b.n	800621a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006184:	d123      	bne.n	80061ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006194:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800619e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f043 0204 	orr.w	r2, r3, #4
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e046      	b.n	800625c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d021      	beq.n	800621a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d6:	f7fd fd21 	bl	8003c1c <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d116      	bne.n	800621a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e020      	b.n	800625c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	0c1b      	lsrs	r3, r3, #16
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d10c      	bne.n	800623e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	43da      	mvns	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4013      	ands	r3, r2
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	e00b      	b.n	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	43da      	mvns	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4013      	ands	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	bf14      	ite	ne
 8006250:	2301      	movne	r3, #1
 8006252:	2300      	moveq	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d18d      	bne.n	8006176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006270:	e02d      	b.n	80062ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f8ce 	bl	8006414 <I2C_IsAcknowledgeFailed>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e02d      	b.n	80062de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d021      	beq.n	80062ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fd fcc7 	bl	8003c1c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d116      	bne.n	80062ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f043 0220 	orr.w	r2, r3, #32
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e007      	b.n	80062de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d1ca      	bne.n	8006272 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062f2:	e02d      	b.n	8006350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f88d 	bl	8006414 <I2C_IsAcknowledgeFailed>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e02d      	b.n	8006360 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d021      	beq.n	8006350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630c:	f7fd fc86 	bl	8003c1c <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d116      	bne.n	8006350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e007      	b.n	8006360 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b04      	cmp	r3, #4
 800635c:	d1ca      	bne.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006374:	e042      	b.n	80063fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b10      	cmp	r3, #16
 8006382:	d119      	bne.n	80063b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0210 	mvn.w	r2, #16
 800638c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e029      	b.n	800640c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b8:	f7fd fc30 	bl	8003c1c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d302      	bcc.n	80063ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d116      	bne.n	80063fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e007      	b.n	800640c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	d1b5      	bne.n	8006376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642a:	d11b      	bne.n	8006464 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006434:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	f043 0204 	orr.w	r2, r3, #4
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
	...

08006474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e264      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d075      	beq.n	800657e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006492:	4ba3      	ldr	r3, [pc, #652]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	2b04      	cmp	r3, #4
 800649c:	d00c      	beq.n	80064b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800649e:	4ba0      	ldr	r3, [pc, #640]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d112      	bne.n	80064d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064aa:	4b9d      	ldr	r3, [pc, #628]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b8:	4b99      	ldr	r3, [pc, #612]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d05b      	beq.n	800657c <HAL_RCC_OscConfig+0x108>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d157      	bne.n	800657c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e23f      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d8:	d106      	bne.n	80064e8 <HAL_RCC_OscConfig+0x74>
 80064da:	4b91      	ldr	r3, [pc, #580]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a90      	ldr	r2, [pc, #576]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80064e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e01d      	b.n	8006524 <HAL_RCC_OscConfig+0xb0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064f0:	d10c      	bne.n	800650c <HAL_RCC_OscConfig+0x98>
 80064f2:	4b8b      	ldr	r3, [pc, #556]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a8a      	ldr	r2, [pc, #552]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80064f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	4b88      	ldr	r3, [pc, #544]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a87      	ldr	r2, [pc, #540]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e00b      	b.n	8006524 <HAL_RCC_OscConfig+0xb0>
 800650c:	4b84      	ldr	r3, [pc, #528]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a83      	ldr	r2, [pc, #524]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	4b81      	ldr	r3, [pc, #516]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a80      	ldr	r2, [pc, #512]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 800651e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d013      	beq.n	8006554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fd fb76 	bl	8003c1c <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006534:	f7fd fb72 	bl	8003c1c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b64      	cmp	r3, #100	; 0x64
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e204      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006546:	4b76      	ldr	r3, [pc, #472]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0xc0>
 8006552:	e014      	b.n	800657e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006554:	f7fd fb62 	bl	8003c1c <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800655c:	f7fd fb5e 	bl	8003c1c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e1f0      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800656e:	4b6c      	ldr	r3, [pc, #432]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f0      	bne.n	800655c <HAL_RCC_OscConfig+0xe8>
 800657a:	e000      	b.n	800657e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800657c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d063      	beq.n	8006652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800658a:	4b65      	ldr	r3, [pc, #404]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006596:	4b62      	ldr	r3, [pc, #392]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d11c      	bne.n	80065dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065a2:	4b5f      	ldr	r3, [pc, #380]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d116      	bne.n	80065dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ae:	4b5c      	ldr	r3, [pc, #368]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <HAL_RCC_OscConfig+0x152>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d001      	beq.n	80065c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e1c4      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c6:	4b56      	ldr	r3, [pc, #344]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4952      	ldr	r1, [pc, #328]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065da:	e03a      	b.n	8006652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d020      	beq.n	8006626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065e4:	4b4f      	ldr	r3, [pc, #316]	; (8006724 <HAL_RCC_OscConfig+0x2b0>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ea:	f7fd fb17 	bl	8003c1c <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f2:	f7fd fb13 	bl	8003c1c <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e1a5      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006604:	4b46      	ldr	r3, [pc, #280]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006610:	4b43      	ldr	r3, [pc, #268]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	4940      	ldr	r1, [pc, #256]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006620:	4313      	orrs	r3, r2
 8006622:	600b      	str	r3, [r1, #0]
 8006624:	e015      	b.n	8006652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006626:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <HAL_RCC_OscConfig+0x2b0>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662c:	f7fd faf6 	bl	8003c1c <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006634:	f7fd faf2 	bl	8003c1c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e184      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006646:	4b36      	ldr	r3, [pc, #216]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f0      	bne.n	8006634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d030      	beq.n	80066c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d016      	beq.n	8006694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006666:	4b30      	ldr	r3, [pc, #192]	; (8006728 <HAL_RCC_OscConfig+0x2b4>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666c:	f7fd fad6 	bl	8003c1c <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006674:	f7fd fad2 	bl	8003c1c <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e164      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006686:	4b26      	ldr	r3, [pc, #152]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 8006688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0x200>
 8006692:	e015      	b.n	80066c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006694:	4b24      	ldr	r3, [pc, #144]	; (8006728 <HAL_RCC_OscConfig+0x2b4>)
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800669a:	f7fd fabf 	bl	8003c1c <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066a2:	f7fd fabb 	bl	8003c1c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e14d      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80066b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80a0 	beq.w	800680e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066d2:	4b13      	ldr	r3, [pc, #76]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066de:	2300      	movs	r3, #0
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	4a0e      	ldr	r2, [pc, #56]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80066e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ec:	6413      	str	r3, [r2, #64]	; 0x40
 80066ee:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <HAL_RCC_OscConfig+0x2ac>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fa:	2301      	movs	r3, #1
 80066fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_RCC_OscConfig+0x2b8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d121      	bne.n	800674e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <HAL_RCC_OscConfig+0x2b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a07      	ldr	r2, [pc, #28]	; (800672c <HAL_RCC_OscConfig+0x2b8>)
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006716:	f7fd fa81 	bl	8003c1c <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671c:	e011      	b.n	8006742 <HAL_RCC_OscConfig+0x2ce>
 800671e:	bf00      	nop
 8006720:	40023800 	.word	0x40023800
 8006724:	42470000 	.word	0x42470000
 8006728:	42470e80 	.word	0x42470e80
 800672c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006730:	f7fd fa74 	bl	8003c1c <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e106      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006742:	4b85      	ldr	r3, [pc, #532]	; (8006958 <HAL_RCC_OscConfig+0x4e4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d106      	bne.n	8006764 <HAL_RCC_OscConfig+0x2f0>
 8006756:	4b81      	ldr	r3, [pc, #516]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	4a80      	ldr	r2, [pc, #512]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	6713      	str	r3, [r2, #112]	; 0x70
 8006762:	e01c      	b.n	800679e <HAL_RCC_OscConfig+0x32a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b05      	cmp	r3, #5
 800676a:	d10c      	bne.n	8006786 <HAL_RCC_OscConfig+0x312>
 800676c:	4b7b      	ldr	r3, [pc, #492]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	4a7a      	ldr	r2, [pc, #488]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 8006772:	f043 0304 	orr.w	r3, r3, #4
 8006776:	6713      	str	r3, [r2, #112]	; 0x70
 8006778:	4b78      	ldr	r3, [pc, #480]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4a77      	ldr	r2, [pc, #476]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6713      	str	r3, [r2, #112]	; 0x70
 8006784:	e00b      	b.n	800679e <HAL_RCC_OscConfig+0x32a>
 8006786:	4b75      	ldr	r3, [pc, #468]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a74      	ldr	r2, [pc, #464]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
 8006792:	4b72      	ldr	r3, [pc, #456]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	4a71      	ldr	r2, [pc, #452]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d015      	beq.n	80067d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fd fa39 	bl	8003c1c <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fd fa35 	bl	8003c1c <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e0c5      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c4:	4b65      	ldr	r3, [pc, #404]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ee      	beq.n	80067ae <HAL_RCC_OscConfig+0x33a>
 80067d0:	e014      	b.n	80067fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d2:	f7fd fa23 	bl	8003c1c <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7fd fa1f 	bl	8003c1c <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e0af      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f0:	4b5a      	ldr	r3, [pc, #360]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 80067f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ee      	bne.n	80067da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006802:	4b56      	ldr	r3, [pc, #344]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	4a55      	ldr	r2, [pc, #340]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 8006808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 809b 	beq.w	800694e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006818:	4b50      	ldr	r3, [pc, #320]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 030c 	and.w	r3, r3, #12
 8006820:	2b08      	cmp	r3, #8
 8006822:	d05c      	beq.n	80068de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d141      	bne.n	80068b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682c:	4b4c      	ldr	r3, [pc, #304]	; (8006960 <HAL_RCC_OscConfig+0x4ec>)
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006832:	f7fd f9f3 	bl	8003c1c <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800683a:	f7fd f9ef 	bl	8003c1c <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e081      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684c:	4b43      	ldr	r3, [pc, #268]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f0      	bne.n	800683a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	019b      	lsls	r3, r3, #6
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	3b01      	subs	r3, #1
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	061b      	lsls	r3, r3, #24
 800687c:	4937      	ldr	r1, [pc, #220]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 800687e:	4313      	orrs	r3, r2
 8006880:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006882:	4b37      	ldr	r3, [pc, #220]	; (8006960 <HAL_RCC_OscConfig+0x4ec>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006888:	f7fd f9c8 	bl	8003c1c <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006890:	f7fd f9c4 	bl	8003c1c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e056      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b2e      	ldr	r3, [pc, #184]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x41c>
 80068ae:	e04e      	b.n	800694e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b0:	4b2b      	ldr	r3, [pc, #172]	; (8006960 <HAL_RCC_OscConfig+0x4ec>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b6:	f7fd f9b1 	bl	8003c1c <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068be:	f7fd f9ad 	bl	8003c1c <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e03f      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d0:	4b22      	ldr	r3, [pc, #136]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f0      	bne.n	80068be <HAL_RCC_OscConfig+0x44a>
 80068dc:	e037      	b.n	800694e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e032      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068ea:	4b1c      	ldr	r3, [pc, #112]	; (800695c <HAL_RCC_OscConfig+0x4e8>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d028      	beq.n	800694a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006902:	429a      	cmp	r2, r3
 8006904:	d121      	bne.n	800694a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006910:	429a      	cmp	r2, r3
 8006912:	d11a      	bne.n	800694a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800691a:	4013      	ands	r3, r2
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006920:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006922:	4293      	cmp	r3, r2
 8006924:	d111      	bne.n	800694a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	3b01      	subs	r3, #1
 8006934:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d107      	bne.n	800694a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006946:	429a      	cmp	r2, r3
 8006948:	d001      	beq.n	800694e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40007000 	.word	0x40007000
 800695c:	40023800 	.word	0x40023800
 8006960:	42470060 	.word	0x42470060

08006964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e0cc      	b.n	8006b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006978:	4b68      	ldr	r3, [pc, #416]	; (8006b1c <HAL_RCC_ClockConfig+0x1b8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d90c      	bls.n	80069a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006986:	4b65      	ldr	r3, [pc, #404]	; (8006b1c <HAL_RCC_ClockConfig+0x1b8>)
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800698e:	4b63      	ldr	r3, [pc, #396]	; (8006b1c <HAL_RCC_ClockConfig+0x1b8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d001      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e0b8      	b.n	8006b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d020      	beq.n	80069ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069b8:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4a58      	ldr	r2, [pc, #352]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 80069be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069d0:	4b53      	ldr	r3, [pc, #332]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	4a52      	ldr	r2, [pc, #328]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069dc:	4b50      	ldr	r3, [pc, #320]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	494d      	ldr	r1, [pc, #308]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d044      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d107      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a02:	4b47      	ldr	r3, [pc, #284]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d119      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e07f      	b.n	8006b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d003      	beq.n	8006a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a22:	4b3f      	ldr	r3, [pc, #252]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e06f      	b.n	8006b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a32:	4b3b      	ldr	r3, [pc, #236]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e067      	b.n	8006b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a42:	4b37      	ldr	r3, [pc, #220]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 0203 	bic.w	r2, r3, #3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4934      	ldr	r1, [pc, #208]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a54:	f7fd f8e2 	bl	8003c1c <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a5c:	f7fd f8de 	bl	8003c1c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e04f      	b.n	8006b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a72:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 020c 	and.w	r2, r3, #12
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1eb      	bne.n	8006a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d20c      	bcs.n	8006aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a92:	4b22      	ldr	r3, [pc, #136]	; (8006b1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9a:	4b20      	ldr	r3, [pc, #128]	; (8006b1c <HAL_RCC_ClockConfig+0x1b8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d001      	beq.n	8006aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e032      	b.n	8006b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ab8:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4916      	ldr	r1, [pc, #88]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ad6:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	490e      	ldr	r1, [pc, #56]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aea:	f000 f821 	bl	8006b30 <HAL_RCC_GetSysClockFreq>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	490a      	ldr	r1, [pc, #40]	; (8006b24 <HAL_RCC_ClockConfig+0x1c0>)
 8006afc:	5ccb      	ldrb	r3, [r1, r3]
 8006afe:	fa22 f303 	lsr.w	r3, r2, r3
 8006b02:	4a09      	ldr	r2, [pc, #36]	; (8006b28 <HAL_RCC_ClockConfig+0x1c4>)
 8006b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <HAL_RCC_ClockConfig+0x1c8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fd f842 	bl	8003b94 <HAL_InitTick>

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40023c00 	.word	0x40023c00
 8006b20:	40023800 	.word	0x40023800
 8006b24:	0800c7a8 	.word	0x0800c7a8
 8006b28:	20000008 	.word	0x20000008
 8006b2c:	20000044 	.word	0x20000044

08006b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	2300      	movs	r3, #0
 8006b42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b48:	4b67      	ldr	r3, [pc, #412]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 030c 	and.w	r3, r3, #12
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d00d      	beq.n	8006b70 <HAL_RCC_GetSysClockFreq+0x40>
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	f200 80bd 	bhi.w	8006cd4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_RCC_GetSysClockFreq+0x34>
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d003      	beq.n	8006b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b62:	e0b7      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b64:	4b61      	ldr	r3, [pc, #388]	; (8006cec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b66:	60bb      	str	r3, [r7, #8]
       break;
 8006b68:	e0b7      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b6a:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006b6c:	60bb      	str	r3, [r7, #8]
      break;
 8006b6e:	e0b4      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b70:	4b5d      	ldr	r3, [pc, #372]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b7a:	4b5b      	ldr	r3, [pc, #364]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d04d      	beq.n	8006c22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b86:	4b58      	ldr	r3, [pc, #352]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	099b      	lsrs	r3, r3, #6
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b96:	f04f 0100 	mov.w	r1, #0
 8006b9a:	ea02 0800 	and.w	r8, r2, r0
 8006b9e:	ea03 0901 	and.w	r9, r3, r1
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	014b      	lsls	r3, r1, #5
 8006bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006bb4:	0142      	lsls	r2, r0, #5
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	ebb0 0008 	subs.w	r0, r0, r8
 8006bbe:	eb61 0109 	sbc.w	r1, r1, r9
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	018b      	lsls	r3, r1, #6
 8006bcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006bd0:	0182      	lsls	r2, r0, #6
 8006bd2:	1a12      	subs	r2, r2, r0
 8006bd4:	eb63 0301 	sbc.w	r3, r3, r1
 8006bd8:	f04f 0000 	mov.w	r0, #0
 8006bdc:	f04f 0100 	mov.w	r1, #0
 8006be0:	00d9      	lsls	r1, r3, #3
 8006be2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006be6:	00d0      	lsls	r0, r2, #3
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	eb12 0208 	adds.w	r2, r2, r8
 8006bf0:	eb43 0309 	adc.w	r3, r3, r9
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f04f 0100 	mov.w	r1, #0
 8006bfc:	0259      	lsls	r1, r3, #9
 8006bfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006c02:	0250      	lsls	r0, r2, #9
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	f7f9 ff64 	bl	8000ae0 <__aeabi_uldivmod>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e04a      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c22:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c32:	f04f 0100 	mov.w	r1, #0
 8006c36:	ea02 0400 	and.w	r4, r2, r0
 8006c3a:	ea03 0501 	and.w	r5, r3, r1
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	014b      	lsls	r3, r1, #5
 8006c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c50:	0142      	lsls	r2, r0, #5
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	1b00      	subs	r0, r0, r4
 8006c58:	eb61 0105 	sbc.w	r1, r1, r5
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	018b      	lsls	r3, r1, #6
 8006c66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c6a:	0182      	lsls	r2, r0, #6
 8006c6c:	1a12      	subs	r2, r2, r0
 8006c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f04f 0100 	mov.w	r1, #0
 8006c7a:	00d9      	lsls	r1, r3, #3
 8006c7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c80:	00d0      	lsls	r0, r2, #3
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	1912      	adds	r2, r2, r4
 8006c88:	eb45 0303 	adc.w	r3, r5, r3
 8006c8c:	f04f 0000 	mov.w	r0, #0
 8006c90:	f04f 0100 	mov.w	r1, #0
 8006c94:	0299      	lsls	r1, r3, #10
 8006c96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c9a:	0290      	lsls	r0, r2, #10
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	f7f9 ff18 	bl	8000ae0 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd0:	60bb      	str	r3, [r7, #8]
      break;
 8006cd2:	e002      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006cd6:	60bb      	str	r3, [r7, #8]
      break;
 8006cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cda:	68bb      	ldr	r3, [r7, #8]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	00f42400 	.word	0x00f42400
 8006cf0:	007a1200 	.word	0x007a1200

08006cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cf8:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000008 	.word	0x20000008

08006d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d10:	f7ff fff0 	bl	8006cf4 <HAL_RCC_GetHCLKFreq>
 8006d14:	4602      	mov	r2, r0
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	0a9b      	lsrs	r3, r3, #10
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	4903      	ldr	r1, [pc, #12]	; (8006d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d22:	5ccb      	ldrb	r3, [r1, r3]
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	0800c7b8 	.word	0x0800c7b8

08006d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d38:	f7ff ffdc 	bl	8006cf4 <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0b5b      	lsrs	r3, r3, #13
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4903      	ldr	r1, [pc, #12]	; (8006d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40023800 	.word	0x40023800
 8006d58:	0800c7b8 	.word	0x0800c7b8

08006d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e07b      	b.n	8006e66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d108      	bne.n	8006d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d7e:	d009      	beq.n	8006d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	61da      	str	r2, [r3, #28]
 8006d86:	e005      	b.n	8006d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fb fd98 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e18:	ea42 0103 	orr.w	r1, r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	f003 0104 	and.w	r1, r3, #4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	f003 0210 	and.w	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b088      	sub	sp, #32
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_SPI_Transmit+0x22>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e126      	b.n	80070de <HAL_SPI_Transmit+0x270>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e98:	f7fc fec0 	bl	8003c1c <HAL_GetTick>
 8006e9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d002      	beq.n	8006eb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eb2:	e10b      	b.n	80070cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_SPI_Transmit+0x52>
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ec4:	e102      	b.n	80070cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2203      	movs	r2, #3
 8006eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	88fa      	ldrh	r2, [r7, #6]
 8006ede:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0c:	d10f      	bne.n	8006f2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d007      	beq.n	8006f4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f54:	d14b      	bne.n	8006fee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_SPI_Transmit+0xf6>
 8006f5e:	8afb      	ldrh	r3, [r7, #22]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d13e      	bne.n	8006fe2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	881a      	ldrh	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	1c9a      	adds	r2, r3, #2
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f88:	e02b      	b.n	8006fe2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d112      	bne.n	8006fbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	881a      	ldrh	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	1c9a      	adds	r2, r3, #2
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fbc:	e011      	b.n	8006fe2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fbe:	f7fc fe2d 	bl	8003c1c <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d803      	bhi.n	8006fd6 <HAL_SPI_Transmit+0x168>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d102      	bne.n	8006fdc <HAL_SPI_Transmit+0x16e>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fe0:	e074      	b.n	80070cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1ce      	bne.n	8006f8a <HAL_SPI_Transmit+0x11c>
 8006fec:	e04c      	b.n	8007088 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <HAL_SPI_Transmit+0x18e>
 8006ff6:	8afb      	ldrh	r3, [r7, #22]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d140      	bne.n	800707e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007022:	e02c      	b.n	800707e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b02      	cmp	r3, #2
 8007030:	d113      	bne.n	800705a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	86da      	strh	r2, [r3, #54]	; 0x36
 8007058:	e011      	b.n	800707e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800705a:	f7fc fddf 	bl	8003c1c <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d803      	bhi.n	8007072 <HAL_SPI_Transmit+0x204>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d102      	bne.n	8007078 <HAL_SPI_Transmit+0x20a>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800707c:	e026      	b.n	80070cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1cd      	bne.n	8007024 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f8b3 	bl	80071f8 <SPI_EndRxTxTransaction>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e000      	b.n	80070cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80070ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3720      	adds	r7, #32
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070f8:	f7fc fd90 	bl	8003c1c <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	4413      	add	r3, r2
 8007106:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007108:	f7fc fd88 	bl	8003c1c <HAL_GetTick>
 800710c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800710e:	4b39      	ldr	r3, [pc, #228]	; (80071f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	015b      	lsls	r3, r3, #5
 8007114:	0d1b      	lsrs	r3, r3, #20
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	fb02 f303 	mul.w	r3, r2, r3
 800711c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800711e:	e054      	b.n	80071ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d050      	beq.n	80071ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007128:	f7fc fd78 	bl	8003c1c <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	429a      	cmp	r2, r3
 8007136:	d902      	bls.n	800713e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d13d      	bne.n	80071ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800714c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007156:	d111      	bne.n	800717c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007160:	d004      	beq.n	800716c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800716a:	d107      	bne.n	800717c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007184:	d10f      	bne.n	80071a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e017      	b.n	80071ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4013      	ands	r3, r2
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	bf0c      	ite	eq
 80071da:	2301      	moveq	r3, #1
 80071dc:	2300      	movne	r3, #0
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d19b      	bne.n	8007120 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000008 	.word	0x20000008

080071f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007204:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <SPI_EndRxTxTransaction+0x7c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <SPI_EndRxTxTransaction+0x80>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	0d5b      	lsrs	r3, r3, #21
 8007210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007214:	fb02 f303 	mul.w	r3, r2, r3
 8007218:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007222:	d112      	bne.n	800724a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff ff5a 	bl	80070e8 <SPI_WaitFlagStateUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d016      	beq.n	8007268 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e00f      	b.n	800726a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00a      	beq.n	8007266 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3b01      	subs	r3, #1
 8007254:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007260:	2b80      	cmp	r3, #128	; 0x80
 8007262:	d0f2      	beq.n	800724a <SPI_EndRxTxTransaction+0x52>
 8007264:	e000      	b.n	8007268 <SPI_EndRxTxTransaction+0x70>
        break;
 8007266:	bf00      	nop
  }

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000008 	.word	0x20000008
 8007278:	165e9f81 	.word	0x165e9f81

0800727c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e034      	b.n	80072fc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7fb fc8c 	bl	8002bc4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3308      	adds	r3, #8
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f002 f828 	bl	800930c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	461a      	mov	r2, r3
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	f002 f872 	bl	80093b0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6858      	ldr	r0, [r3, #4]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	f002 f8a7 	bl	800942c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	6892      	ldr	r2, [r2, #8]
 80072e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	6892      	ldr	r2, [r2, #8]
 80072f2:	f041 0101 	orr.w	r1, r1, #1
 80072f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e041      	b.n	800739a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fb fb22 	bl	8002974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f000 fc7a 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d001      	beq.n	80073bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e04e      	b.n	800745a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a23      	ldr	r2, [pc, #140]	; (8007468 <HAL_TIM_Base_Start_IT+0xc4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d022      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x80>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e6:	d01d      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x80>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1f      	ldr	r2, [pc, #124]	; (800746c <HAL_TIM_Base_Start_IT+0xc8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d018      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x80>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1e      	ldr	r2, [pc, #120]	; (8007470 <HAL_TIM_Base_Start_IT+0xcc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d013      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x80>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1c      	ldr	r2, [pc, #112]	; (8007474 <HAL_TIM_Base_Start_IT+0xd0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00e      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x80>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <HAL_TIM_Base_Start_IT+0xd4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d009      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x80>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a19      	ldr	r2, [pc, #100]	; (800747c <HAL_TIM_Base_Start_IT+0xd8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d004      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x80>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a18      	ldr	r2, [pc, #96]	; (8007480 <HAL_TIM_Base_Start_IT+0xdc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d111      	bne.n	8007448 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b06      	cmp	r3, #6
 8007434:	d010      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007446:	e007      	b.n	8007458 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	40010000 	.word	0x40010000
 800746c:	40000400 	.word	0x40000400
 8007470:	40000800 	.word	0x40000800
 8007474:	40000c00 	.word	0x40000c00
 8007478:	40010400 	.word	0x40010400
 800747c:	40014000 	.word	0x40014000
 8007480:	40001800 	.word	0x40001800

08007484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e041      	b.n	800751a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f839 	bl	8007522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f000 fbba 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <HAL_TIM_PWM_Start+0x24>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	bf14      	ite	ne
 8007554:	2301      	movne	r3, #1
 8007556:	2300      	moveq	r3, #0
 8007558:	b2db      	uxtb	r3, r3
 800755a:	e022      	b.n	80075a2 <HAL_TIM_PWM_Start+0x6a>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b04      	cmp	r3, #4
 8007560:	d109      	bne.n	8007576 <HAL_TIM_PWM_Start+0x3e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b01      	cmp	r3, #1
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	e015      	b.n	80075a2 <HAL_TIM_PWM_Start+0x6a>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b08      	cmp	r3, #8
 800757a:	d109      	bne.n	8007590 <HAL_TIM_PWM_Start+0x58>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	e008      	b.n	80075a2 <HAL_TIM_PWM_Start+0x6a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e07c      	b.n	80076a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_PWM_Start+0x82>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b8:	e013      	b.n	80075e2 <HAL_TIM_PWM_Start+0xaa>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d104      	bne.n	80075ca <HAL_TIM_PWM_Start+0x92>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075c8:	e00b      	b.n	80075e2 <HAL_TIM_PWM_Start+0xaa>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d104      	bne.n	80075da <HAL_TIM_PWM_Start+0xa2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075d8:	e003      	b.n	80075e2 <HAL_TIM_PWM_Start+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2201      	movs	r2, #1
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fe10 	bl	8008210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a2d      	ldr	r2, [pc, #180]	; (80076ac <HAL_TIM_PWM_Start+0x174>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <HAL_TIM_PWM_Start+0xcc>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a2c      	ldr	r2, [pc, #176]	; (80076b0 <HAL_TIM_PWM_Start+0x178>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d101      	bne.n	8007608 <HAL_TIM_PWM_Start+0xd0>
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <HAL_TIM_PWM_Start+0xd2>
 8007608:	2300      	movs	r3, #0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a22      	ldr	r2, [pc, #136]	; (80076ac <HAL_TIM_PWM_Start+0x174>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d022      	beq.n	800766e <HAL_TIM_PWM_Start+0x136>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d01d      	beq.n	800766e <HAL_TIM_PWM_Start+0x136>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1f      	ldr	r2, [pc, #124]	; (80076b4 <HAL_TIM_PWM_Start+0x17c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d018      	beq.n	800766e <HAL_TIM_PWM_Start+0x136>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_TIM_PWM_Start+0x180>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_TIM_PWM_Start+0x136>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_TIM_PWM_Start+0x184>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIM_PWM_Start+0x136>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <HAL_TIM_PWM_Start+0x178>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIM_PWM_Start+0x136>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_TIM_PWM_Start+0x188>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIM_PWM_Start+0x136>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <HAL_TIM_PWM_Start+0x18c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d111      	bne.n	8007692 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b06      	cmp	r3, #6
 800767e:	d010      	beq.n	80076a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007690:	e007      	b.n	80076a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0201 	orr.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40010400 	.word	0x40010400
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40001800 	.word	0x40001800

080076c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d122      	bne.n	8007724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d11b      	bne.n	8007724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0202 	mvn.w	r2, #2
 80076f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa77 	bl	8007bfe <HAL_TIM_IC_CaptureCallback>
 8007710:	e005      	b.n	800771e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa69 	bl	8007bea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fa7a 	bl	8007c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	2b04      	cmp	r3, #4
 8007730:	d122      	bne.n	8007778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d11b      	bne.n	8007778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0204 	mvn.w	r2, #4
 8007748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa4d 	bl	8007bfe <HAL_TIM_IC_CaptureCallback>
 8007764:	e005      	b.n	8007772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa3f 	bl	8007bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fa50 	bl	8007c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b08      	cmp	r3, #8
 8007784:	d122      	bne.n	80077cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b08      	cmp	r3, #8
 8007792:	d11b      	bne.n	80077cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0208 	mvn.w	r2, #8
 800779c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2204      	movs	r2, #4
 80077a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa23 	bl	8007bfe <HAL_TIM_IC_CaptureCallback>
 80077b8:	e005      	b.n	80077c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa15 	bl	8007bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa26 	bl	8007c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d122      	bne.n	8007820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0310 	and.w	r3, r3, #16
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d11b      	bne.n	8007820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0210 	mvn.w	r2, #16
 80077f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2208      	movs	r2, #8
 80077f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f9f9 	bl	8007bfe <HAL_TIM_IC_CaptureCallback>
 800780c:	e005      	b.n	800781a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f9eb 	bl	8007bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9fc 	bl	8007c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b01      	cmp	r3, #1
 800782c:	d10e      	bne.n	800784c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b01      	cmp	r3, #1
 800783a:	d107      	bne.n	800784c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0201 	mvn.w	r2, #1
 8007844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7fa ff04 	bl	8002654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d10e      	bne.n	8007878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007864:	2b80      	cmp	r3, #128	; 0x80
 8007866:	d107      	bne.n	8007878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fd78 	bl	8008368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d10e      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d107      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800789c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f9c1 	bl	8007c26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d10e      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d107      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0220 	mvn.w	r2, #32
 80078c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fd42 	bl	8008354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e0ae      	b.n	8007a54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	f200 809f 	bhi.w	8007a44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	08007941 	.word	0x08007941
 8007910:	08007a45 	.word	0x08007a45
 8007914:	08007a45 	.word	0x08007a45
 8007918:	08007a45 	.word	0x08007a45
 800791c:	08007981 	.word	0x08007981
 8007920:	08007a45 	.word	0x08007a45
 8007924:	08007a45 	.word	0x08007a45
 8007928:	08007a45 	.word	0x08007a45
 800792c:	080079c3 	.word	0x080079c3
 8007930:	08007a45 	.word	0x08007a45
 8007934:	08007a45 	.word	0x08007a45
 8007938:	08007a45 	.word	0x08007a45
 800793c:	08007a03 	.word	0x08007a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fa18 	bl	8007d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0208 	orr.w	r2, r2, #8
 800795a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0204 	bic.w	r2, r2, #4
 800796a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6999      	ldr	r1, [r3, #24]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	619a      	str	r2, [r3, #24]
      break;
 800797e:	e064      	b.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fa68 	bl	8007e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800799a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6999      	ldr	r1, [r3, #24]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	021a      	lsls	r2, r3, #8
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	619a      	str	r2, [r3, #24]
      break;
 80079c0:	e043      	b.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fabd 	bl	8007f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0208 	orr.w	r2, r2, #8
 80079dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0204 	bic.w	r2, r2, #4
 80079ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69d9      	ldr	r1, [r3, #28]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	61da      	str	r2, [r3, #28]
      break;
 8007a00:	e023      	b.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fb11 	bl	8008030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69d9      	ldr	r1, [r3, #28]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	021a      	lsls	r2, r3, #8
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	61da      	str	r2, [r3, #28]
      break;
 8007a42:	e002      	b.n	8007a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	75fb      	strb	r3, [r7, #23]
      break;
 8007a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_TIM_ConfigClockSource+0x1c>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e0b4      	b.n	8007be2 <HAL_TIM_ConfigClockSource+0x186>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ab0:	d03e      	beq.n	8007b30 <HAL_TIM_ConfigClockSource+0xd4>
 8007ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ab6:	f200 8087 	bhi.w	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abe:	f000 8086 	beq.w	8007bce <HAL_TIM_ConfigClockSource+0x172>
 8007ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac6:	d87f      	bhi.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ac8:	2b70      	cmp	r3, #112	; 0x70
 8007aca:	d01a      	beq.n	8007b02 <HAL_TIM_ConfigClockSource+0xa6>
 8007acc:	2b70      	cmp	r3, #112	; 0x70
 8007ace:	d87b      	bhi.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ad0:	2b60      	cmp	r3, #96	; 0x60
 8007ad2:	d050      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x11a>
 8007ad4:	2b60      	cmp	r3, #96	; 0x60
 8007ad6:	d877      	bhi.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ad8:	2b50      	cmp	r3, #80	; 0x50
 8007ada:	d03c      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0xfa>
 8007adc:	2b50      	cmp	r3, #80	; 0x50
 8007ade:	d873      	bhi.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d058      	beq.n	8007b96 <HAL_TIM_ConfigClockSource+0x13a>
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d86f      	bhi.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ae8:	2b30      	cmp	r3, #48	; 0x30
 8007aea:	d064      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007aec:	2b30      	cmp	r3, #48	; 0x30
 8007aee:	d86b      	bhi.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d060      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	d867      	bhi.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d05c      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d05a      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b00:	e062      	b.n	8007bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6899      	ldr	r1, [r3, #8]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f000 fb5d 	bl	80081d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	609a      	str	r2, [r3, #8]
      break;
 8007b2e:	e04f      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6818      	ldr	r0, [r3, #0]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	6899      	ldr	r1, [r3, #8]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f000 fb46 	bl	80081d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b52:	609a      	str	r2, [r3, #8]
      break;
 8007b54:	e03c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6859      	ldr	r1, [r3, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f000 faba 	bl	80080dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2150      	movs	r1, #80	; 0x50
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fb13 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007b74:	e02c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	6859      	ldr	r1, [r3, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f000 fad9 	bl	800813a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2160      	movs	r1, #96	; 0x60
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fb03 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007b94:	e01c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	6859      	ldr	r1, [r3, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f000 fa9a 	bl	80080dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2140      	movs	r1, #64	; 0x40
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 faf3 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007bb4:	e00c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f000 faea 	bl	800819a <TIM_ITRx_SetConfig>
      break;
 8007bc6:	e003      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
      break;
 8007bcc:	e000      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a40      	ldr	r2, [pc, #256]	; (8007d50 <TIM_Base_SetConfig+0x114>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d013      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5a:	d00f      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a3d      	ldr	r2, [pc, #244]	; (8007d54 <TIM_Base_SetConfig+0x118>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00b      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a3c      	ldr	r2, [pc, #240]	; (8007d58 <TIM_Base_SetConfig+0x11c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d007      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a3b      	ldr	r2, [pc, #236]	; (8007d5c <TIM_Base_SetConfig+0x120>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d003      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a3a      	ldr	r2, [pc, #232]	; (8007d60 <TIM_Base_SetConfig+0x124>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d108      	bne.n	8007c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a2f      	ldr	r2, [pc, #188]	; (8007d50 <TIM_Base_SetConfig+0x114>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d02b      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9c:	d027      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a2c      	ldr	r2, [pc, #176]	; (8007d54 <TIM_Base_SetConfig+0x118>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d023      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a2b      	ldr	r2, [pc, #172]	; (8007d58 <TIM_Base_SetConfig+0x11c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d01f      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a2a      	ldr	r2, [pc, #168]	; (8007d5c <TIM_Base_SetConfig+0x120>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d01b      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a29      	ldr	r2, [pc, #164]	; (8007d60 <TIM_Base_SetConfig+0x124>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d017      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a28      	ldr	r2, [pc, #160]	; (8007d64 <TIM_Base_SetConfig+0x128>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a27      	ldr	r2, [pc, #156]	; (8007d68 <TIM_Base_SetConfig+0x12c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00f      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <TIM_Base_SetConfig+0x130>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00b      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a25      	ldr	r2, [pc, #148]	; (8007d70 <TIM_Base_SetConfig+0x134>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d007      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a24      	ldr	r2, [pc, #144]	; (8007d74 <TIM_Base_SetConfig+0x138>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d003      	beq.n	8007cee <TIM_Base_SetConfig+0xb2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a23      	ldr	r2, [pc, #140]	; (8007d78 <TIM_Base_SetConfig+0x13c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d108      	bne.n	8007d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a0a      	ldr	r2, [pc, #40]	; (8007d50 <TIM_Base_SetConfig+0x114>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_Base_SetConfig+0xf8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a0c      	ldr	r2, [pc, #48]	; (8007d60 <TIM_Base_SetConfig+0x124>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d103      	bne.n	8007d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	615a      	str	r2, [r3, #20]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40010400 	.word	0x40010400
 8007d64:	40014000 	.word	0x40014000
 8007d68:	40014400 	.word	0x40014400
 8007d6c:	40014800 	.word	0x40014800
 8007d70:	40001800 	.word	0x40001800
 8007d74:	40001c00 	.word	0x40001c00
 8007d78:	40002000 	.word	0x40002000

08007d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	f023 0201 	bic.w	r2, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f023 0302 	bic.w	r3, r3, #2
 8007dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a20      	ldr	r2, [pc, #128]	; (8007e54 <TIM_OC1_SetConfig+0xd8>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d003      	beq.n	8007de0 <TIM_OC1_SetConfig+0x64>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <TIM_OC1_SetConfig+0xdc>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10c      	bne.n	8007dfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f023 0308 	bic.w	r3, r3, #8
 8007de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f023 0304 	bic.w	r3, r3, #4
 8007df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <TIM_OC1_SetConfig+0xd8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC1_SetConfig+0x8e>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <TIM_OC1_SetConfig+0xdc>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d111      	bne.n	8007e2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	621a      	str	r2, [r3, #32]
}
 8007e48:	bf00      	nop
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	40010000 	.word	0x40010000
 8007e58:	40010400 	.word	0x40010400

08007e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	f023 0210 	bic.w	r2, r3, #16
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f023 0320 	bic.w	r3, r3, #32
 8007ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a22      	ldr	r2, [pc, #136]	; (8007f40 <TIM_OC2_SetConfig+0xe4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_OC2_SetConfig+0x68>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a21      	ldr	r2, [pc, #132]	; (8007f44 <TIM_OC2_SetConfig+0xe8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d10d      	bne.n	8007ee0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a17      	ldr	r2, [pc, #92]	; (8007f40 <TIM_OC2_SetConfig+0xe4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_OC2_SetConfig+0x94>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a16      	ldr	r2, [pc, #88]	; (8007f44 <TIM_OC2_SetConfig+0xe8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d113      	bne.n	8007f18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	40010000 	.word	0x40010000
 8007f44:	40010400 	.word	0x40010400

08007f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a21      	ldr	r2, [pc, #132]	; (8008028 <TIM_OC3_SetConfig+0xe0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d003      	beq.n	8007fae <TIM_OC3_SetConfig+0x66>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a20      	ldr	r2, [pc, #128]	; (800802c <TIM_OC3_SetConfig+0xe4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d10d      	bne.n	8007fca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a16      	ldr	r2, [pc, #88]	; (8008028 <TIM_OC3_SetConfig+0xe0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d003      	beq.n	8007fda <TIM_OC3_SetConfig+0x92>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a15      	ldr	r2, [pc, #84]	; (800802c <TIM_OC3_SetConfig+0xe4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d113      	bne.n	8008002 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	621a      	str	r2, [r3, #32]
}
 800801c:	bf00      	nop
 800801e:	371c      	adds	r7, #28
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	40010000 	.word	0x40010000
 800802c:	40010400 	.word	0x40010400

08008030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800807a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	031b      	lsls	r3, r3, #12
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a12      	ldr	r2, [pc, #72]	; (80080d4 <TIM_OC4_SetConfig+0xa4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC4_SetConfig+0x68>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a11      	ldr	r2, [pc, #68]	; (80080d8 <TIM_OC4_SetConfig+0xa8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d109      	bne.n	80080ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800809e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	019b      	lsls	r3, r3, #6
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40010000 	.word	0x40010000
 80080d8:	40010400 	.word	0x40010400

080080dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f023 030a 	bic.w	r3, r3, #10
 8008118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800813a:	b480      	push	{r7}
 800813c:	b087      	sub	sp, #28
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	f023 0210 	bic.w	r2, r3, #16
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f043 0307 	orr.w	r3, r3, #7
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	609a      	str	r2, [r3, #8]
}
 80081c4:	bf00      	nop
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	021a      	lsls	r2, r3, #8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	609a      	str	r2, [r3, #8]
}
 8008204:	bf00      	nop
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	2201      	movs	r2, #1
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	43db      	mvns	r3, r3
 8008232:	401a      	ands	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a1a      	ldr	r2, [r3, #32]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	fa01 f303 	lsl.w	r3, r1, r3
 8008248:	431a      	orrs	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800826c:	2b01      	cmp	r3, #1
 800826e:	d101      	bne.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008270:	2302      	movs	r3, #2
 8008272:	e05a      	b.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a21      	ldr	r2, [pc, #132]	; (8008338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d022      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c0:	d01d      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1d      	ldr	r2, [pc, #116]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d018      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1b      	ldr	r2, [pc, #108]	; (8008340 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1a      	ldr	r2, [pc, #104]	; (8008344 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a18      	ldr	r2, [pc, #96]	; (8008348 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a17      	ldr	r2, [pc, #92]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a15      	ldr	r2, [pc, #84]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d10c      	bne.n	8008318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4313      	orrs	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40010000 	.word	0x40010000
 800833c:	40000400 	.word	0x40000400
 8008340:	40000800 	.word	0x40000800
 8008344:	40000c00 	.word	0x40000c00
 8008348:	40010400 	.word	0x40010400
 800834c:	40014000 	.word	0x40014000
 8008350:	40001800 	.word	0x40001800

08008354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e03f      	b.n	800840e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fa fb72 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2224      	movs	r2, #36	; 0x24
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fddb 	bl	8008f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695a      	ldr	r2, [r3, #20]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68da      	ldr	r2, [r3, #12]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2220      	movs	r2, #32
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b08a      	sub	sp, #40	; 0x28
 800841a:	af02      	add	r7, sp, #8
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b20      	cmp	r3, #32
 8008434:	d17c      	bne.n	8008530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_Transmit+0x2c>
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e075      	b.n	8008532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UART_Transmit+0x3e>
 8008450:	2302      	movs	r3, #2
 8008452:	e06e      	b.n	8008532 <HAL_UART_Transmit+0x11c>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2221      	movs	r2, #33	; 0x21
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800846a:	f7fb fbd7 	bl	8003c1c <HAL_GetTick>
 800846e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	88fa      	ldrh	r2, [r7, #6]
 8008474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	88fa      	ldrh	r2, [r7, #6]
 800847a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008484:	d108      	bne.n	8008498 <HAL_UART_Transmit+0x82>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d104      	bne.n	8008498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	e003      	b.n	80084a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084a8:	e02a      	b.n	8008500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2200      	movs	r2, #0
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fb1f 	bl	8008af8 <UART_WaitOnFlagUntilTimeout>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e036      	b.n	8008532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	3302      	adds	r3, #2
 80084de:	61bb      	str	r3, [r7, #24]
 80084e0:	e007      	b.n	80084f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	781a      	ldrb	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	3301      	adds	r3, #1
 80084f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1cf      	bne.n	80084aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2200      	movs	r2, #0
 8008512:	2140      	movs	r1, #64	; 0x40
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 faef 	bl	8008af8 <UART_WaitOnFlagUntilTimeout>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e006      	b.n	8008532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e000      	b.n	8008532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008530:	2302      	movs	r3, #2
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	4613      	mov	r3, r2
 8008546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b20      	cmp	r3, #32
 8008552:	d11d      	bne.n	8008590 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_UART_Receive_IT+0x26>
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e016      	b.n	8008592 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800856a:	2b01      	cmp	r3, #1
 800856c:	d101      	bne.n	8008572 <HAL_UART_Receive_IT+0x38>
 800856e:	2302      	movs	r3, #2
 8008570:	e00f      	b.n	8008592 <HAL_UART_Receive_IT+0x58>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	461a      	mov	r2, r3
 8008584:	68b9      	ldr	r1, [r7, #8]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fb24 	bl	8008bd4 <UART_Start_Receive_IT>
 800858c:	4603      	mov	r3, r0
 800858e:	e000      	b.n	8008592 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008590:	2302      	movs	r3, #2
  }
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b0ba      	sub	sp, #232	; 0xe8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d2:	f003 030f 	and.w	r3, r3, #15
 80085d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80085da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10f      	bne.n	8008602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <HAL_UART_IRQHandler+0x66>
 80085ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fc03 	bl	8008e06 <UART_Receive_IT>
      return;
 8008600:	e256      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80de 	beq.w	80087c8 <HAL_UART_IRQHandler+0x22c>
 800860c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80d1 	beq.w	80087c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <HAL_UART_IRQHandler+0xae>
 8008632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	f043 0201 	orr.w	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <HAL_UART_IRQHandler+0xd2>
 8008656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	f043 0202 	orr.w	r2, r3, #2
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800866e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <HAL_UART_IRQHandler+0xf6>
 800867a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f043 0204 	orr.w	r2, r3, #4
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d011      	beq.n	80086c2 <HAL_UART_IRQHandler+0x126>
 800869e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	f043 0208 	orr.w	r2, r3, #8
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 81ed 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <HAL_UART_IRQHandler+0x14e>
 80086d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086dc:	f003 0320 	and.w	r3, r3, #32
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fb8e 	bl	8008e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	bf0c      	ite	eq
 80086f8:	2301      	moveq	r3, #1
 80086fa:	2300      	movne	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	f003 0308 	and.w	r3, r3, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <HAL_UART_IRQHandler+0x17a>
 800870e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d04f      	beq.n	80087b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa96 	bl	8008c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008726:	2b40      	cmp	r3, #64	; 0x40
 8008728:	d141      	bne.n	80087ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3314      	adds	r3, #20
 8008730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3314      	adds	r3, #20
 8008752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800875a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800876e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1d9      	bne.n	800872a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d013      	beq.n	80087a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	4a7d      	ldr	r2, [pc, #500]	; (8008978 <HAL_UART_IRQHandler+0x3dc>)
 8008784:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878a:	4618      	mov	r0, r3
 800878c:	f7fc f910 	bl	80049b0 <HAL_DMA_Abort_IT>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d016      	beq.n	80087c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a4:	e00e      	b.n	80087c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f990 	bl	8008acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	e00a      	b.n	80087c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f98c 	bl	8008acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b4:	e006      	b.n	80087c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f988 	bl	8008acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087c2:	e170      	b.n	8008aa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	bf00      	nop
    return;
 80087c6:	e16e      	b.n	8008aa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	f040 814a 	bne.w	8008a66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 8143 	beq.w	8008a66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 813c 	beq.w	8008a66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ee:	2300      	movs	r3, #0
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880e:	2b40      	cmp	r3, #64	; 0x40
 8008810:	f040 80b4 	bne.w	800897c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8140 	beq.w	8008aaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800882e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008832:	429a      	cmp	r2, r3
 8008834:	f080 8139 	bcs.w	8008aaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800883e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884a:	f000 8088 	beq.w	800895e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	330c      	adds	r3, #12
 8008854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800886c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800887a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800887e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1d9      	bne.n	800884e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3314      	adds	r3, #20
 80088a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e1      	bne.n	800889a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3314      	adds	r3, #20
 80088dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3314      	adds	r3, #20
 80088f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80088fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e3      	bne.n	80088d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	330c      	adds	r3, #12
 8008922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800892c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892e:	f023 0310 	bic.w	r3, r3, #16
 8008932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	330c      	adds	r3, #12
 800893c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008940:	65ba      	str	r2, [r7, #88]	; 0x58
 8008942:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800894e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e3      	bne.n	800891c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	4618      	mov	r0, r3
 800895a:	f7fb ffb9 	bl	80048d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008966:	b29b      	uxth	r3, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f8b6 	bl	8008ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008974:	e099      	b.n	8008aaa <HAL_UART_IRQHandler+0x50e>
 8008976:	bf00      	nop
 8008978:	08008d0f 	.word	0x08008d0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008984:	b29b      	uxth	r3, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 808b 	beq.w	8008aae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8086 	beq.w	8008aae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	330c      	adds	r3, #12
 80089a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	330c      	adds	r3, #12
 80089c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089c6:	647a      	str	r2, [r7, #68]	; 0x44
 80089c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e3      	bne.n	80089a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3314      	adds	r3, #20
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	623b      	str	r3, [r7, #32]
   return(result);
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3314      	adds	r3, #20
 80089fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80089fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e3      	bne.n	80089da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	330c      	adds	r3, #12
 8008a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0310 	bic.w	r3, r3, #16
 8008a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	330c      	adds	r3, #12
 8008a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a44:	61fa      	str	r2, [r7, #28]
 8008a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	69b9      	ldr	r1, [r7, #24]
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	617b      	str	r3, [r7, #20]
   return(result);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e3      	bne.n	8008a20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f83e 	bl	8008ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a64:	e023      	b.n	8008aae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <HAL_UART_IRQHandler+0x4ea>
 8008a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f959 	bl	8008d36 <UART_Transmit_IT>
    return;
 8008a84:	e014      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00e      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x514>
 8008a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d008      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f999 	bl	8008dd6 <UART_EndTransmit_IT>
    return;
 8008aa4:	e004      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
    return;
 8008aa6:	bf00      	nop
 8008aa8:	e002      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8008aae:	bf00      	nop
  }
}
 8008ab0:	37e8      	adds	r7, #232	; 0xe8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop

08008ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b090      	sub	sp, #64	; 0x40
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	4613      	mov	r3, r2
 8008b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b08:	e050      	b.n	8008bac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d04c      	beq.n	8008bac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d007      	beq.n	8008b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b18:	f7fb f880 	bl	8003c1c <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d241      	bcs.n	8008bac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	330c      	adds	r3, #12
 8008b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b48:	637a      	str	r2, [r7, #52]	; 0x34
 8008b4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e5      	bne.n	8008b28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3314      	adds	r3, #20
 8008b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f023 0301 	bic.w	r3, r3, #1
 8008b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3314      	adds	r3, #20
 8008b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b7c:	623a      	str	r2, [r7, #32]
 8008b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	69f9      	ldr	r1, [r7, #28]
 8008b82:	6a3a      	ldr	r2, [r7, #32]
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e5      	bne.n	8008b5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e00f      	b.n	8008bcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	bf0c      	ite	eq
 8008bbc:	2301      	moveq	r3, #1
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d09f      	beq.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3740      	adds	r7, #64	; 0x40
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	88fa      	ldrh	r2, [r7, #6]
 8008bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2222      	movs	r2, #34	; 0x22
 8008bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695a      	ldr	r2, [r3, #20]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 0201 	orr.w	r2, r2, #1
 8008c28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f042 0220 	orr.w	r2, r2, #32
 8008c38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b095      	sub	sp, #84	; 0x54
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	330c      	adds	r3, #12
 8008c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	330c      	adds	r3, #12
 8008c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c70:	643a      	str	r2, [r7, #64]	; 0x40
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e5      	bne.n	8008c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3314      	adds	r3, #20
 8008ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cac:	e841 2300 	strex	r3, r2, [r1]
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e5      	bne.n	8008c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d119      	bne.n	8008cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f023 0310 	bic.w	r3, r3, #16
 8008cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	330c      	adds	r3, #12
 8008cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ce0:	61ba      	str	r2, [r7, #24]
 8008ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6979      	ldr	r1, [r7, #20]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	613b      	str	r3, [r7, #16]
   return(result);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e5      	bne.n	8008cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d02:	bf00      	nop
 8008d04:	3754      	adds	r7, #84	; 0x54
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f7ff fecf 	bl	8008acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b21      	cmp	r3, #33	; 0x21
 8008d48:	d13e      	bne.n	8008dc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d52:	d114      	bne.n	8008d7e <UART_Transmit_IT+0x48>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d110      	bne.n	8008d7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	1c9a      	adds	r2, r3, #2
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	621a      	str	r2, [r3, #32]
 8008d7c:	e008      	b.n	8008d90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	1c59      	adds	r1, r3, #1
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6211      	str	r1, [r2, #32]
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10f      	bne.n	8008dc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008db2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e000      	b.n	8008dca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008dc8:	2302      	movs	r3, #2
  }
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff fe5e 	bl	8008ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b08c      	sub	sp, #48	; 0x30
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b22      	cmp	r3, #34	; 0x22
 8008e18:	f040 80ab 	bne.w	8008f72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e24:	d117      	bne.n	8008e56 <UART_Receive_IT+0x50>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d113      	bne.n	8008e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	1c9a      	adds	r2, r3, #2
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	629a      	str	r2, [r3, #40]	; 0x28
 8008e54:	e026      	b.n	8008ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e68:	d007      	beq.n	8008e7a <UART_Receive_IT+0x74>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <UART_Receive_IT+0x82>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	e008      	b.n	8008e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d15a      	bne.n	8008f6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 0220 	bic.w	r2, r2, #32
 8008ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0201 	bic.w	r2, r2, #1
 8008ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d135      	bne.n	8008f64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	330c      	adds	r3, #12
 8008f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f023 0310 	bic.w	r3, r3, #16
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	623a      	str	r2, [r7, #32]
 8008f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	69f9      	ldr	r1, [r7, #28]
 8008f24:	6a3a      	ldr	r2, [r7, #32]
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e5      	bne.n	8008efe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0310 	and.w	r3, r3, #16
 8008f3c:	2b10      	cmp	r3, #16
 8008f3e:	d10a      	bne.n	8008f56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fdbf 	bl	8008ae0 <HAL_UARTEx_RxEventCallback>
 8008f62:	e002      	b.n	8008f6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fa fd87 	bl	8003a78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e002      	b.n	8008f74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e000      	b.n	8008f74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f72:	2302      	movs	r3, #2
  }
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3730      	adds	r7, #48	; 0x30
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	b09f      	sub	sp, #124	; 0x7c
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f92:	68d9      	ldr	r1, [r3, #12]
 8008f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	ea40 0301 	orr.w	r3, r0, r1
 8008f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	431a      	orrs	r2, r3
 8008fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fc0:	f021 010c 	bic.w	r1, r1, #12
 8008fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fda:	6999      	ldr	r1, [r3, #24]
 8008fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	ea40 0301 	orr.w	r3, r0, r1
 8008fe4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4bc5      	ldr	r3, [pc, #788]	; (8009300 <UART_SetConfig+0x384>)
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d004      	beq.n	8008ffa <UART_SetConfig+0x7e>
 8008ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4bc3      	ldr	r3, [pc, #780]	; (8009304 <UART_SetConfig+0x388>)
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d103      	bne.n	8009002 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ffa:	f7fd fe9b 	bl	8006d34 <HAL_RCC_GetPCLK2Freq>
 8008ffe:	6778      	str	r0, [r7, #116]	; 0x74
 8009000:	e002      	b.n	8009008 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009002:	f7fd fe83 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 8009006:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009010:	f040 80b6 	bne.w	8009180 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009016:	461c      	mov	r4, r3
 8009018:	f04f 0500 	mov.w	r5, #0
 800901c:	4622      	mov	r2, r4
 800901e:	462b      	mov	r3, r5
 8009020:	1891      	adds	r1, r2, r2
 8009022:	6439      	str	r1, [r7, #64]	; 0x40
 8009024:	415b      	adcs	r3, r3
 8009026:	647b      	str	r3, [r7, #68]	; 0x44
 8009028:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800902c:	1912      	adds	r2, r2, r4
 800902e:	eb45 0303 	adc.w	r3, r5, r3
 8009032:	f04f 0000 	mov.w	r0, #0
 8009036:	f04f 0100 	mov.w	r1, #0
 800903a:	00d9      	lsls	r1, r3, #3
 800903c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009040:	00d0      	lsls	r0, r2, #3
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	1911      	adds	r1, r2, r4
 8009048:	6639      	str	r1, [r7, #96]	; 0x60
 800904a:	416b      	adcs	r3, r5
 800904c:	667b      	str	r3, [r7, #100]	; 0x64
 800904e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	461a      	mov	r2, r3
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	1891      	adds	r1, r2, r2
 800905a:	63b9      	str	r1, [r7, #56]	; 0x38
 800905c:	415b      	adcs	r3, r3
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009064:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009068:	f7f7 fd3a 	bl	8000ae0 <__aeabi_uldivmod>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4ba5      	ldr	r3, [pc, #660]	; (8009308 <UART_SetConfig+0x38c>)
 8009072:	fba3 2302 	umull	r2, r3, r3, r2
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	011e      	lsls	r6, r3, #4
 800907a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800907c:	461c      	mov	r4, r3
 800907e:	f04f 0500 	mov.w	r5, #0
 8009082:	4622      	mov	r2, r4
 8009084:	462b      	mov	r3, r5
 8009086:	1891      	adds	r1, r2, r2
 8009088:	6339      	str	r1, [r7, #48]	; 0x30
 800908a:	415b      	adcs	r3, r3
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
 800908e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009092:	1912      	adds	r2, r2, r4
 8009094:	eb45 0303 	adc.w	r3, r5, r3
 8009098:	f04f 0000 	mov.w	r0, #0
 800909c:	f04f 0100 	mov.w	r1, #0
 80090a0:	00d9      	lsls	r1, r3, #3
 80090a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090a6:	00d0      	lsls	r0, r2, #3
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	1911      	adds	r1, r2, r4
 80090ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80090b0:	416b      	adcs	r3, r5
 80090b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f04f 0300 	mov.w	r3, #0
 80090be:	1891      	adds	r1, r2, r2
 80090c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80090c2:	415b      	adcs	r3, r3
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80090ce:	f7f7 fd07 	bl	8000ae0 <__aeabi_uldivmod>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4b8c      	ldr	r3, [pc, #560]	; (8009308 <UART_SetConfig+0x38c>)
 80090d8:	fba3 1302 	umull	r1, r3, r3, r2
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	2164      	movs	r1, #100	; 0x64
 80090e0:	fb01 f303 	mul.w	r3, r1, r3
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	3332      	adds	r3, #50	; 0x32
 80090ea:	4a87      	ldr	r2, [pc, #540]	; (8009308 <UART_SetConfig+0x38c>)
 80090ec:	fba2 2303 	umull	r2, r3, r2, r3
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090f8:	441e      	add	r6, r3
 80090fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090fc:	4618      	mov	r0, r3
 80090fe:	f04f 0100 	mov.w	r1, #0
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	1894      	adds	r4, r2, r2
 8009108:	623c      	str	r4, [r7, #32]
 800910a:	415b      	adcs	r3, r3
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
 800910e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009112:	1812      	adds	r2, r2, r0
 8009114:	eb41 0303 	adc.w	r3, r1, r3
 8009118:	f04f 0400 	mov.w	r4, #0
 800911c:	f04f 0500 	mov.w	r5, #0
 8009120:	00dd      	lsls	r5, r3, #3
 8009122:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009126:	00d4      	lsls	r4, r2, #3
 8009128:	4622      	mov	r2, r4
 800912a:	462b      	mov	r3, r5
 800912c:	1814      	adds	r4, r2, r0
 800912e:	653c      	str	r4, [r7, #80]	; 0x50
 8009130:	414b      	adcs	r3, r1
 8009132:	657b      	str	r3, [r7, #84]	; 0x54
 8009134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	461a      	mov	r2, r3
 800913a:	f04f 0300 	mov.w	r3, #0
 800913e:	1891      	adds	r1, r2, r2
 8009140:	61b9      	str	r1, [r7, #24]
 8009142:	415b      	adcs	r3, r3
 8009144:	61fb      	str	r3, [r7, #28]
 8009146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800914a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800914e:	f7f7 fcc7 	bl	8000ae0 <__aeabi_uldivmod>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4b6c      	ldr	r3, [pc, #432]	; (8009308 <UART_SetConfig+0x38c>)
 8009158:	fba3 1302 	umull	r1, r3, r3, r2
 800915c:	095b      	lsrs	r3, r3, #5
 800915e:	2164      	movs	r1, #100	; 0x64
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	3332      	adds	r3, #50	; 0x32
 800916a:	4a67      	ldr	r2, [pc, #412]	; (8009308 <UART_SetConfig+0x38c>)
 800916c:	fba2 2303 	umull	r2, r3, r2, r3
 8009170:	095b      	lsrs	r3, r3, #5
 8009172:	f003 0207 	and.w	r2, r3, #7
 8009176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4432      	add	r2, r6
 800917c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800917e:	e0b9      	b.n	80092f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009182:	461c      	mov	r4, r3
 8009184:	f04f 0500 	mov.w	r5, #0
 8009188:	4622      	mov	r2, r4
 800918a:	462b      	mov	r3, r5
 800918c:	1891      	adds	r1, r2, r2
 800918e:	6139      	str	r1, [r7, #16]
 8009190:	415b      	adcs	r3, r3
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009198:	1912      	adds	r2, r2, r4
 800919a:	eb45 0303 	adc.w	r3, r5, r3
 800919e:	f04f 0000 	mov.w	r0, #0
 80091a2:	f04f 0100 	mov.w	r1, #0
 80091a6:	00d9      	lsls	r1, r3, #3
 80091a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091ac:	00d0      	lsls	r0, r2, #3
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	eb12 0804 	adds.w	r8, r2, r4
 80091b6:	eb43 0905 	adc.w	r9, r3, r5
 80091ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	4618      	mov	r0, r3
 80091c0:	f04f 0100 	mov.w	r1, #0
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	f04f 0300 	mov.w	r3, #0
 80091cc:	008b      	lsls	r3, r1, #2
 80091ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091d2:	0082      	lsls	r2, r0, #2
 80091d4:	4640      	mov	r0, r8
 80091d6:	4649      	mov	r1, r9
 80091d8:	f7f7 fc82 	bl	8000ae0 <__aeabi_uldivmod>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	4b49      	ldr	r3, [pc, #292]	; (8009308 <UART_SetConfig+0x38c>)
 80091e2:	fba3 2302 	umull	r2, r3, r3, r2
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	011e      	lsls	r6, r3, #4
 80091ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ec:	4618      	mov	r0, r3
 80091ee:	f04f 0100 	mov.w	r1, #0
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	1894      	adds	r4, r2, r2
 80091f8:	60bc      	str	r4, [r7, #8]
 80091fa:	415b      	adcs	r3, r3
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009202:	1812      	adds	r2, r2, r0
 8009204:	eb41 0303 	adc.w	r3, r1, r3
 8009208:	f04f 0400 	mov.w	r4, #0
 800920c:	f04f 0500 	mov.w	r5, #0
 8009210:	00dd      	lsls	r5, r3, #3
 8009212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009216:	00d4      	lsls	r4, r2, #3
 8009218:	4622      	mov	r2, r4
 800921a:	462b      	mov	r3, r5
 800921c:	1814      	adds	r4, r2, r0
 800921e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009220:	414b      	adcs	r3, r1
 8009222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	f04f 0100 	mov.w	r1, #0
 800922e:	f04f 0200 	mov.w	r2, #0
 8009232:	f04f 0300 	mov.w	r3, #0
 8009236:	008b      	lsls	r3, r1, #2
 8009238:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800923c:	0082      	lsls	r2, r0, #2
 800923e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009242:	f7f7 fc4d 	bl	8000ae0 <__aeabi_uldivmod>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4b2f      	ldr	r3, [pc, #188]	; (8009308 <UART_SetConfig+0x38c>)
 800924c:	fba3 1302 	umull	r1, r3, r3, r2
 8009250:	095b      	lsrs	r3, r3, #5
 8009252:	2164      	movs	r1, #100	; 0x64
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	3332      	adds	r3, #50	; 0x32
 800925e:	4a2a      	ldr	r2, [pc, #168]	; (8009308 <UART_SetConfig+0x38c>)
 8009260:	fba2 2303 	umull	r2, r3, r2, r3
 8009264:	095b      	lsrs	r3, r3, #5
 8009266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800926a:	441e      	add	r6, r3
 800926c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800926e:	4618      	mov	r0, r3
 8009270:	f04f 0100 	mov.w	r1, #0
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	1894      	adds	r4, r2, r2
 800927a:	603c      	str	r4, [r7, #0]
 800927c:	415b      	adcs	r3, r3
 800927e:	607b      	str	r3, [r7, #4]
 8009280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009284:	1812      	adds	r2, r2, r0
 8009286:	eb41 0303 	adc.w	r3, r1, r3
 800928a:	f04f 0400 	mov.w	r4, #0
 800928e:	f04f 0500 	mov.w	r5, #0
 8009292:	00dd      	lsls	r5, r3, #3
 8009294:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009298:	00d4      	lsls	r4, r2, #3
 800929a:	4622      	mov	r2, r4
 800929c:	462b      	mov	r3, r5
 800929e:	eb12 0a00 	adds.w	sl, r2, r0
 80092a2:	eb43 0b01 	adc.w	fp, r3, r1
 80092a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f04f 0100 	mov.w	r1, #0
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	008b      	lsls	r3, r1, #2
 80092ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092be:	0082      	lsls	r2, r0, #2
 80092c0:	4650      	mov	r0, sl
 80092c2:	4659      	mov	r1, fp
 80092c4:	f7f7 fc0c 	bl	8000ae0 <__aeabi_uldivmod>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <UART_SetConfig+0x38c>)
 80092ce:	fba3 1302 	umull	r1, r3, r3, r2
 80092d2:	095b      	lsrs	r3, r3, #5
 80092d4:	2164      	movs	r1, #100	; 0x64
 80092d6:	fb01 f303 	mul.w	r3, r1, r3
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	3332      	adds	r3, #50	; 0x32
 80092e0:	4a09      	ldr	r2, [pc, #36]	; (8009308 <UART_SetConfig+0x38c>)
 80092e2:	fba2 2303 	umull	r2, r3, r2, r3
 80092e6:	095b      	lsrs	r3, r3, #5
 80092e8:	f003 020f 	and.w	r2, r3, #15
 80092ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4432      	add	r2, r6
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	377c      	adds	r7, #124	; 0x7c
 80092f8:	46bd      	mov	sp, r7
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	bf00      	nop
 8009300:	40011000 	.word	0x40011000
 8009304:	40011400 	.word	0x40011400
 8009308:	51eb851f 	.word	0x51eb851f

0800930c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009324:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	4b20      	ldr	r3, [pc, #128]	; (80093ac <FSMC_NORSRAM_Init+0xa0>)
 800932a:	4013      	ands	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009336:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800933c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009342:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009348:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800934e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009354:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800935a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009360:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009366:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800936c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8009372:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009378:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	4313      	orrs	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b08      	cmp	r3, #8
 8009386:	d103      	bne.n	8009390 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68f9      	ldr	r1, [r7, #12]
 8009398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	fff00080 	.word	0xfff00080

080093b0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ca:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80093d2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80093de:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80093e6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80093ee:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80093f8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	3b02      	subs	r3, #2
 8009400:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009402:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009408:	4313      	orrs	r3, r2
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4313      	orrs	r3, r2
 800940e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6979      	ldr	r1, [r7, #20]
 8009418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
	...

0800942c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009444:	d122      	bne.n	800948c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009454:	4013      	ands	r3, r2
 8009456:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009462:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800946a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009472:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009478:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	4313      	orrs	r3, r2
 800947e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6979      	ldr	r1, [r7, #20]
 8009486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800948a:	e005      	b.n	8009498 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	cff00000 	.word	0xcff00000

080094ac <__errno>:
 80094ac:	4b01      	ldr	r3, [pc, #4]	; (80094b4 <__errno+0x8>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	2000004c 	.word	0x2000004c

080094b8 <__libc_init_array>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	4d0d      	ldr	r5, [pc, #52]	; (80094f0 <__libc_init_array+0x38>)
 80094bc:	4c0d      	ldr	r4, [pc, #52]	; (80094f4 <__libc_init_array+0x3c>)
 80094be:	1b64      	subs	r4, r4, r5
 80094c0:	10a4      	asrs	r4, r4, #2
 80094c2:	2600      	movs	r6, #0
 80094c4:	42a6      	cmp	r6, r4
 80094c6:	d109      	bne.n	80094dc <__libc_init_array+0x24>
 80094c8:	4d0b      	ldr	r5, [pc, #44]	; (80094f8 <__libc_init_array+0x40>)
 80094ca:	4c0c      	ldr	r4, [pc, #48]	; (80094fc <__libc_init_array+0x44>)
 80094cc:	f000 f908 	bl	80096e0 <_init>
 80094d0:	1b64      	subs	r4, r4, r5
 80094d2:	10a4      	asrs	r4, r4, #2
 80094d4:	2600      	movs	r6, #0
 80094d6:	42a6      	cmp	r6, r4
 80094d8:	d105      	bne.n	80094e6 <__libc_init_array+0x2e>
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e0:	4798      	blx	r3
 80094e2:	3601      	adds	r6, #1
 80094e4:	e7ee      	b.n	80094c4 <__libc_init_array+0xc>
 80094e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ea:	4798      	blx	r3
 80094ec:	3601      	adds	r6, #1
 80094ee:	e7f2      	b.n	80094d6 <__libc_init_array+0x1e>
 80094f0:	0800c7d0 	.word	0x0800c7d0
 80094f4:	0800c7d0 	.word	0x0800c7d0
 80094f8:	0800c7d0 	.word	0x0800c7d0
 80094fc:	0800c7d4 	.word	0x0800c7d4

08009500 <memset>:
 8009500:	4402      	add	r2, r0
 8009502:	4603      	mov	r3, r0
 8009504:	4293      	cmp	r3, r2
 8009506:	d100      	bne.n	800950a <memset+0xa>
 8009508:	4770      	bx	lr
 800950a:	f803 1b01 	strb.w	r1, [r3], #1
 800950e:	e7f9      	b.n	8009504 <memset+0x4>

08009510 <sqrt>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	ed2d 8b02 	vpush	{d8}
 8009516:	ec55 4b10 	vmov	r4, r5, d0
 800951a:	f000 f82d 	bl	8009578 <__ieee754_sqrt>
 800951e:	4b15      	ldr	r3, [pc, #84]	; (8009574 <sqrt+0x64>)
 8009520:	eeb0 8a40 	vmov.f32	s16, s0
 8009524:	eef0 8a60 	vmov.f32	s17, s1
 8009528:	f993 3000 	ldrsb.w	r3, [r3]
 800952c:	3301      	adds	r3, #1
 800952e:	d019      	beq.n	8009564 <sqrt+0x54>
 8009530:	4622      	mov	r2, r4
 8009532:	462b      	mov	r3, r5
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	f7f7 fa9c 	bl	8000a74 <__aeabi_dcmpun>
 800953c:	b990      	cbnz	r0, 8009564 <sqrt+0x54>
 800953e:	2200      	movs	r2, #0
 8009540:	2300      	movs	r3, #0
 8009542:	4620      	mov	r0, r4
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 fa6d 	bl	8000a24 <__aeabi_dcmplt>
 800954a:	b158      	cbz	r0, 8009564 <sqrt+0x54>
 800954c:	f7ff ffae 	bl	80094ac <__errno>
 8009550:	2321      	movs	r3, #33	; 0x21
 8009552:	6003      	str	r3, [r0, #0]
 8009554:	2200      	movs	r2, #0
 8009556:	2300      	movs	r3, #0
 8009558:	4610      	mov	r0, r2
 800955a:	4619      	mov	r1, r3
 800955c:	f7f7 f91a 	bl	8000794 <__aeabi_ddiv>
 8009560:	ec41 0b18 	vmov	d8, r0, r1
 8009564:	eeb0 0a48 	vmov.f32	s0, s16
 8009568:	eef0 0a68 	vmov.f32	s1, s17
 800956c:	ecbd 8b02 	vpop	{d8}
 8009570:	bd38      	pop	{r3, r4, r5, pc}
 8009572:	bf00      	nop
 8009574:	200000b0 	.word	0x200000b0

08009578 <__ieee754_sqrt>:
 8009578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957c:	ec55 4b10 	vmov	r4, r5, d0
 8009580:	4e56      	ldr	r6, [pc, #344]	; (80096dc <__ieee754_sqrt+0x164>)
 8009582:	43ae      	bics	r6, r5
 8009584:	ee10 0a10 	vmov	r0, s0
 8009588:	ee10 3a10 	vmov	r3, s0
 800958c:	4629      	mov	r1, r5
 800958e:	462a      	mov	r2, r5
 8009590:	d110      	bne.n	80095b4 <__ieee754_sqrt+0x3c>
 8009592:	ee10 2a10 	vmov	r2, s0
 8009596:	462b      	mov	r3, r5
 8009598:	f7f6 ffd2 	bl	8000540 <__aeabi_dmul>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f6 fe16 	bl	80001d4 <__adddf3>
 80095a8:	4604      	mov	r4, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	ec45 4b10 	vmov	d0, r4, r5
 80095b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	dc10      	bgt.n	80095da <__ieee754_sqrt+0x62>
 80095b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80095bc:	4330      	orrs	r0, r6
 80095be:	d0f5      	beq.n	80095ac <__ieee754_sqrt+0x34>
 80095c0:	b15d      	cbz	r5, 80095da <__ieee754_sqrt+0x62>
 80095c2:	ee10 2a10 	vmov	r2, s0
 80095c6:	462b      	mov	r3, r5
 80095c8:	ee10 0a10 	vmov	r0, s0
 80095cc:	f7f6 fe00 	bl	80001d0 <__aeabi_dsub>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	f7f7 f8de 	bl	8000794 <__aeabi_ddiv>
 80095d8:	e7e6      	b.n	80095a8 <__ieee754_sqrt+0x30>
 80095da:	1509      	asrs	r1, r1, #20
 80095dc:	d076      	beq.n	80096cc <__ieee754_sqrt+0x154>
 80095de:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80095e2:	07ce      	lsls	r6, r1, #31
 80095e4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80095e8:	bf5e      	ittt	pl
 80095ea:	0fda      	lsrpl	r2, r3, #31
 80095ec:	005b      	lslpl	r3, r3, #1
 80095ee:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80095f2:	0fda      	lsrs	r2, r3, #31
 80095f4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80095f8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80095fc:	2000      	movs	r0, #0
 80095fe:	106d      	asrs	r5, r5, #1
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	f04f 0e16 	mov.w	lr, #22
 8009606:	4684      	mov	ip, r0
 8009608:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800960c:	eb0c 0401 	add.w	r4, ip, r1
 8009610:	4294      	cmp	r4, r2
 8009612:	bfde      	ittt	le
 8009614:	1b12      	suble	r2, r2, r4
 8009616:	eb04 0c01 	addle.w	ip, r4, r1
 800961a:	1840      	addle	r0, r0, r1
 800961c:	0052      	lsls	r2, r2, #1
 800961e:	f1be 0e01 	subs.w	lr, lr, #1
 8009622:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009626:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800962a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800962e:	d1ed      	bne.n	800960c <__ieee754_sqrt+0x94>
 8009630:	4671      	mov	r1, lr
 8009632:	2720      	movs	r7, #32
 8009634:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009638:	4562      	cmp	r2, ip
 800963a:	eb04 060e 	add.w	r6, r4, lr
 800963e:	dc02      	bgt.n	8009646 <__ieee754_sqrt+0xce>
 8009640:	d113      	bne.n	800966a <__ieee754_sqrt+0xf2>
 8009642:	429e      	cmp	r6, r3
 8009644:	d811      	bhi.n	800966a <__ieee754_sqrt+0xf2>
 8009646:	2e00      	cmp	r6, #0
 8009648:	eb06 0e04 	add.w	lr, r6, r4
 800964c:	da43      	bge.n	80096d6 <__ieee754_sqrt+0x15e>
 800964e:	f1be 0f00 	cmp.w	lr, #0
 8009652:	db40      	blt.n	80096d6 <__ieee754_sqrt+0x15e>
 8009654:	f10c 0801 	add.w	r8, ip, #1
 8009658:	eba2 020c 	sub.w	r2, r2, ip
 800965c:	429e      	cmp	r6, r3
 800965e:	bf88      	it	hi
 8009660:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009664:	1b9b      	subs	r3, r3, r6
 8009666:	4421      	add	r1, r4
 8009668:	46c4      	mov	ip, r8
 800966a:	0052      	lsls	r2, r2, #1
 800966c:	3f01      	subs	r7, #1
 800966e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009672:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800967a:	d1dd      	bne.n	8009638 <__ieee754_sqrt+0xc0>
 800967c:	4313      	orrs	r3, r2
 800967e:	d006      	beq.n	800968e <__ieee754_sqrt+0x116>
 8009680:	1c4c      	adds	r4, r1, #1
 8009682:	bf13      	iteet	ne
 8009684:	3101      	addne	r1, #1
 8009686:	3001      	addeq	r0, #1
 8009688:	4639      	moveq	r1, r7
 800968a:	f021 0101 	bicne.w	r1, r1, #1
 800968e:	1043      	asrs	r3, r0, #1
 8009690:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009694:	0849      	lsrs	r1, r1, #1
 8009696:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800969a:	07c2      	lsls	r2, r0, #31
 800969c:	bf48      	it	mi
 800969e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80096a2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80096a6:	460c      	mov	r4, r1
 80096a8:	463d      	mov	r5, r7
 80096aa:	e77f      	b.n	80095ac <__ieee754_sqrt+0x34>
 80096ac:	0ada      	lsrs	r2, r3, #11
 80096ae:	3815      	subs	r0, #21
 80096b0:	055b      	lsls	r3, r3, #21
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	d0fa      	beq.n	80096ac <__ieee754_sqrt+0x134>
 80096b6:	02d7      	lsls	r7, r2, #11
 80096b8:	d50a      	bpl.n	80096d0 <__ieee754_sqrt+0x158>
 80096ba:	f1c1 0420 	rsb	r4, r1, #32
 80096be:	fa23 f404 	lsr.w	r4, r3, r4
 80096c2:	1e4d      	subs	r5, r1, #1
 80096c4:	408b      	lsls	r3, r1
 80096c6:	4322      	orrs	r2, r4
 80096c8:	1b41      	subs	r1, r0, r5
 80096ca:	e788      	b.n	80095de <__ieee754_sqrt+0x66>
 80096cc:	4608      	mov	r0, r1
 80096ce:	e7f0      	b.n	80096b2 <__ieee754_sqrt+0x13a>
 80096d0:	0052      	lsls	r2, r2, #1
 80096d2:	3101      	adds	r1, #1
 80096d4:	e7ef      	b.n	80096b6 <__ieee754_sqrt+0x13e>
 80096d6:	46e0      	mov	r8, ip
 80096d8:	e7be      	b.n	8009658 <__ieee754_sqrt+0xe0>
 80096da:	bf00      	nop
 80096dc:	7ff00000 	.word	0x7ff00000

080096e0 <_init>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr

080096ec <_fini>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr
