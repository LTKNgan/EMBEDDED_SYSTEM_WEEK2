
SOURCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe8  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb0  0800afb0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afb8  0800afb8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb8  0800afb8  0001afb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800afc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000328  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000033c  2000033c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bca8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003742  00000000  00000000  0003bcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  00040a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251c6  00000000  00000000  00041f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b98d  00000000  00000000  000670c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfa02  00000000  00000000  00082a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00162455  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d88  00000000  00000000  001624a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fb0 	.word	0x08007fb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007fb0 	.word	0x08007fb0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2108      	movs	r1, #8
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <button_init+0x14>)
 8000d06:	f003 faf5 	bl	80042f4 <HAL_GPIO_WritePin>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	482f      	ldr	r0, [pc, #188]	; (8000ddc <button_Scan+0xc8>)
 8000d20:	f003 fae8 	bl	80042f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2108      	movs	r1, #8
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <button_Scan+0xc8>)
 8000d2a:	f003 fae3 	bl	80042f4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000d2e:	230a      	movs	r3, #10
 8000d30:	2202      	movs	r2, #2
 8000d32:	492b      	ldr	r1, [pc, #172]	; (8000de0 <button_Scan+0xcc>)
 8000d34:	482b      	ldr	r0, [pc, #172]	; (8000de4 <button_Scan+0xd0>)
 8000d36:	f004 fc14 	bl	8005562 <HAL_SPI_Receive>
	  int button_index = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d42:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	e03f      	b.n	8000dca <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db06      	blt.n	8000d5e <button_Scan+0x4a>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	dc03      	bgt.n	8000d5e <button_Scan+0x4a>
			  button_index = i + 4;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e018      	b.n	8000d90 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	dd07      	ble.n	8000d74 <button_Scan+0x60>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	dc04      	bgt.n	8000d74 <button_Scan+0x60>
			  button_index = 7 - i;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f1c3 0307 	rsb	r3, r3, #7
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e00d      	b.n	8000d90 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	dd06      	ble.n	8000d88 <button_Scan+0x74>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0b      	cmp	r3, #11
 8000d7e:	dc03      	bgt.n	8000d88 <button_Scan+0x74>
			  button_index = i + 4;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3304      	adds	r3, #4
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e003      	b.n	8000d90 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1c3 0317 	rsb	r3, r3, #23
 8000d8e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <button_Scan+0xcc>)
 8000d92:	881a      	ldrh	r2, [r3, #0]
 8000d94:	897b      	ldrh	r3, [r7, #10]
 8000d96:	4013      	ands	r3, r2
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <button_Scan+0x96>
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <button_Scan+0xd4>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2100      	movs	r1, #0
 8000da4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000da8:	e009      	b.n	8000dbe <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <button_Scan+0xd4>)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b299      	uxth	r1, r3
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <button_Scan+0xd4>)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000dbe:	897b      	ldrh	r3, [r7, #10]
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	ddbc      	ble.n	8000d4a <button_Scan+0x36>
	  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	20000030 	.word	0x20000030
 8000de4:	2000028c 	.word	0x2000028c
 8000de8:	20000048 	.word	0x20000048

08000dec <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8000df0:	2100      	movs	r1, #0
 8000df2:	4802      	ldr	r0, [pc, #8]	; (8000dfc <buzzer_init+0x10>)
 8000df4:	f005 f8f6 	bl	8005fe4 <HAL_TIM_PWM_Start>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200001a0 	.word	0x200001a0

08000e00 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <buzzer_SetVolume+0x28>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <buzzer_SetVolume+0x28>)
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <buzzer_SetVolume+0x2c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000032 	.word	0x20000032
 8000e2c:	200001a0 	.word	0x200001a0

08000e30 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000e34:	201e      	movs	r0, #30
 8000e36:	f001 feb7 	bl	8002ba8 <DEC2BCD>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <ds3231_init+0x80>)
 8000e40:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000e42:	2016      	movs	r0, #22
 8000e44:	f001 feb0 	bl	8002ba8 <DEC2BCD>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <ds3231_init+0x80>)
 8000e4e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000e50:	2015      	movs	r0, #21
 8000e52:	f001 fea9 	bl	8002ba8 <DEC2BCD>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <ds3231_init+0x80>)
 8000e5c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000e5e:	2006      	movs	r0, #6
 8000e60:	f001 fea2 	bl	8002ba8 <DEC2BCD>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <ds3231_init+0x80>)
 8000e6a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000e6c:	200f      	movs	r0, #15
 8000e6e:	f001 fe9b 	bl	8002ba8 <DEC2BCD>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <ds3231_init+0x80>)
 8000e78:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000e7a:	2009      	movs	r0, #9
 8000e7c:	f001 fe94 	bl	8002ba8 <DEC2BCD>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <ds3231_init+0x80>)
 8000e86:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000e88:	2017      	movs	r0, #23
 8000e8a:	f001 fe8d 	bl	8002ba8 <DEC2BCD>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <ds3231_init+0x80>)
 8000e94:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000e96:	2332      	movs	r3, #50	; 0x32
 8000e98:	2203      	movs	r2, #3
 8000e9a:	21d0      	movs	r1, #208	; 0xd0
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <ds3231_init+0x84>)
 8000e9e:	f003 fba1 	bl	80045e4 <HAL_I2C_IsDeviceReady>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d000      	beq.n	8000eaa <ds3231_init+0x7a>
		while(1);
 8000ea8:	e7fe      	b.n	8000ea8 <ds3231_init+0x78>
	};
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000070 	.word	0x20000070
 8000eb4:	200000b4 	.word	0x200000b4

08000eb8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <LCD_WR_REG+0x1c>)
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	8013      	strh	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	600ffffe 	.word	0x600ffffe

08000ed8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <LCD_WR_DATA+0x1c>)
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	8053      	strh	r3, [r2, #2]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	600ffffe 	.word	0x600ffffe

08000ef8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LCD_RD_DATA+0x20>)
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	b29b      	uxth	r3, r3
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	600ffffe 	.word	0x600ffffe

08000f1c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	80fb      	strh	r3, [r7, #6]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80bb      	strh	r3, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	807b      	strh	r3, [r7, #2]
 8000f36:	4613      	mov	r3, r2
 8000f38:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000f3a:	202a      	movs	r0, #42	; 0x2a
 8000f3c:	f7ff ffbc 	bl	8000eb8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffc6 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffc0 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ffba 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ffb4 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000f70:	202b      	movs	r0, #43	; 0x2b
 8000f72:	f7ff ffa1 	bl	8000eb8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffab 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ffa5 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000f8e:	883b      	ldrh	r3, [r7, #0]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff9f 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000f9a:	883b      	ldrh	r3, [r7, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff99 	bl	8000ed8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000fa6:	202c      	movs	r0, #44	; 0x2c
 8000fa8:	f7ff ff86 	bl	8000eb8 <LCD_WR_REG>
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	88b9      	ldrh	r1, [r7, #4]
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	f7ff ffa5 	bl	8000f1c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff7f 	bl	8000ed8 <LCD_WR_DATA>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	70fb      	strb	r3, [r7, #3]
 8000ffe:	4613      	mov	r3, r2
 8001000:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001002:	2300      	movs	r3, #0
 8001004:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800100a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf14      	ite	ne
 8001026:	2301      	movne	r3, #1
 8001028:	2300      	moveq	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4413      	add	r3, r2
 800102e:	b29a      	uxth	r2, r3
 8001030:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001034:	b29b      	uxth	r3, r3
 8001036:	fb12 f303 	smulbb	r3, r2, r3
 800103a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	3b20      	subs	r3, #32
 8001040:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	b29a      	uxth	r2, r3
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	3b01      	subs	r3, #1
 800104e:	b29c      	uxth	r4, r3
 8001050:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001054:	b29a      	uxth	r2, r3
 8001056:	88bb      	ldrh	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	b29b      	uxth	r3, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	88b9      	ldrh	r1, [r7, #4]
 8001062:	88f8      	ldrh	r0, [r7, #6]
 8001064:	4622      	mov	r2, r4
 8001066:	f7ff ff59 	bl	8000f1c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800106a:	2300      	movs	r3, #0
 800106c:	827b      	strh	r3, [r7, #18]
 800106e:	e07a      	b.n	8001166 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001070:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001074:	2b0c      	cmp	r3, #12
 8001076:	d028      	beq.n	80010ca <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001078:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800107c:	2b10      	cmp	r3, #16
 800107e:	d108      	bne.n	8001092 <lcd_ShowChar+0xae>
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	8a7b      	ldrh	r3, [r7, #18]
 8001084:	493c      	ldr	r1, [pc, #240]	; (8001178 <lcd_ShowChar+0x194>)
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	440a      	add	r2, r1
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	75fb      	strb	r3, [r7, #23]
 8001090:	e01b      	b.n	80010ca <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001092:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001096:	2b18      	cmp	r3, #24
 8001098:	d10b      	bne.n	80010b2 <lcd_ShowChar+0xce>
 800109a:	78fa      	ldrb	r2, [r7, #3]
 800109c:	8a79      	ldrh	r1, [r7, #18]
 800109e:	4837      	ldr	r0, [pc, #220]	; (800117c <lcd_ShowChar+0x198>)
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4403      	add	r3, r0
 80010aa:	440b      	add	r3, r1
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	75fb      	strb	r3, [r7, #23]
 80010b0:	e00b      	b.n	80010ca <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80010b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010b6:	2b20      	cmp	r3, #32
 80010b8:	d15a      	bne.n	8001170 <lcd_ShowChar+0x18c>
 80010ba:	78fa      	ldrb	r2, [r7, #3]
 80010bc:	8a7b      	ldrh	r3, [r7, #18]
 80010be:	4930      	ldr	r1, [pc, #192]	; (8001180 <lcd_ShowChar+0x19c>)
 80010c0:	0192      	lsls	r2, r2, #6
 80010c2:	440a      	add	r2, r1
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75bb      	strb	r3, [r7, #22]
 80010ce:	e044      	b.n	800115a <lcd_ShowChar+0x176>
		{
			if(!mode)
 80010d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d120      	bne.n	800111a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80010d8:	7dfa      	ldrb	r2, [r7, #23]
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	fa42 f303 	asr.w	r3, r2, r3
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <lcd_ShowChar+0x10e>
 80010e8:	883b      	ldrh	r3, [r7, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fef4 	bl	8000ed8 <LCD_WR_DATA>
 80010f0:	e003      	b.n	80010fa <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80010f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff feef 	bl	8000ed8 <LCD_WR_DATA>
				m++;
 80010fa:	7d7b      	ldrb	r3, [r7, #21]
 80010fc:	3301      	adds	r3, #1
 80010fe:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001100:	7d7b      	ldrb	r3, [r7, #21]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	fbb3 f1f2 	udiv	r1, r3, r2
 8001108:	fb02 f201 	mul.w	r2, r2, r1
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d11f      	bne.n	8001154 <lcd_ShowChar+0x170>
				{
					m=0;
 8001114:	2300      	movs	r3, #0
 8001116:	757b      	strb	r3, [r7, #21]
					break;
 8001118:	e022      	b.n	8001160 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800111a:	7dfa      	ldrb	r2, [r7, #23]
 800111c:	7dbb      	ldrb	r3, [r7, #22]
 800111e:	fa42 f303 	asr.w	r3, r2, r3
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <lcd_ShowChar+0x152>
 800112a:	883a      	ldrh	r2, [r7, #0]
 800112c:	88b9      	ldrh	r1, [r7, #4]
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff3f 	bl	8000fb4 <lcd_DrawPoint>
				x++;
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	3301      	adds	r3, #1
 800113a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800113c:	88fa      	ldrh	r2, [r7, #6]
 800113e:	8a3b      	ldrh	r3, [r7, #16]
 8001140:	1ad2      	subs	r2, r2, r3
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	429a      	cmp	r2, r3
 8001146:	d105      	bne.n	8001154 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001148:	8a3b      	ldrh	r3, [r7, #16]
 800114a:	80fb      	strh	r3, [r7, #6]
					y++;
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	80bb      	strh	r3, [r7, #4]
					break;
 8001152:	e005      	b.n	8001160 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	3301      	adds	r3, #1
 8001158:	75bb      	strb	r3, [r7, #22]
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	2b07      	cmp	r3, #7
 800115e:	d9b7      	bls.n	80010d0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001160:	8a7b      	ldrh	r3, [r7, #18]
 8001162:	3301      	adds	r3, #1
 8001164:	827b      	strh	r3, [r7, #18]
 8001166:	8a7a      	ldrh	r2, [r7, #18]
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	429a      	cmp	r2, r3
 800116c:	d380      	bcc.n	8001070 <lcd_ShowChar+0x8c>
 800116e:	e000      	b.n	8001172 <lcd_ShowChar+0x18e>
		else return;
 8001170:	bf00      	nop
				}
			}
		}
	}
}
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	08008010 	.word	0x08008010
 800117c:	08008600 	.word	0x08008600
 8001180:	080097d0 	.word	0x080097d0

08001184 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001194:	2301      	movs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001198:	e004      	b.n	80011a4 <mypow+0x20>
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	1e5a      	subs	r2, r3, #1
 80011a8:	71ba      	strb	r2, [r7, #6]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f5      	bne.n	800119a <mypow+0x16>
	return result;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	4604      	mov	r4, r0
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4623      	mov	r3, r4
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	4603      	mov	r3, r0
 80011d0:	80bb      	strh	r3, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]
 80011d6:	4613      	mov	r3, r2
 80011d8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80011da:	2300      	movs	r3, #0
 80011dc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80011de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011e2:	085b      	lsrs	r3, r3, #1
 80011e4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e059      	b.n	80012a0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80011ec:	887c      	ldrh	r4, [r7, #2]
 80011ee:	787a      	ldrb	r2, [r7, #1]
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	200a      	movs	r0, #10
 80011fe:	f7ff ffc1 	bl	8001184 <mypow>
 8001202:	4603      	mov	r3, r0
 8001204:	fbb4 f1f3 	udiv	r1, r4, r3
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <lcd_ShowIntNum+0xf8>)
 800120a:	fba3 2301 	umull	r2, r3, r3, r1
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	1aca      	subs	r2, r1, r3
 800121a:	4613      	mov	r3, r2
 800121c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d121      	bne.n	8001268 <lcd_ShowIntNum+0xac>
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	787b      	ldrb	r3, [r7, #1]
 8001228:	3b01      	subs	r3, #1
 800122a:	429a      	cmp	r2, r3
 800122c:	da1c      	bge.n	8001268 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d117      	bne.n	8001264 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	b29a      	uxth	r2, r3
 8001238:	7b7b      	ldrb	r3, [r7, #13]
 800123a:	b29b      	uxth	r3, r3
 800123c:	fb12 f303 	smulbb	r3, r2, r3
 8001240:	b29a      	uxth	r2, r3
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4413      	add	r3, r2
 8001246:	b298      	uxth	r0, r3
 8001248:	8c3a      	ldrh	r2, [r7, #32]
 800124a:	88b9      	ldrh	r1, [r7, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	2220      	movs	r2, #32
 800125e:	f7ff fec1 	bl	8000fe4 <lcd_ShowChar>
				continue;
 8001262:	e01a      	b.n	800129a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001264:	2301      	movs	r3, #1
 8001266:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	b29a      	uxth	r2, r3
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	b29b      	uxth	r3, r3
 8001270:	fb12 f303 	smulbb	r3, r2, r3
 8001274:	b29a      	uxth	r2, r3
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	4413      	add	r3, r2
 800127a:	b298      	uxth	r0, r3
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	3330      	adds	r3, #48	; 0x30
 8001280:	b2da      	uxtb	r2, r3
 8001282:	8c3c      	ldrh	r4, [r7, #32]
 8001284:	88b9      	ldrh	r1, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff fea5 	bl	8000fe4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	3301      	adds	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	787b      	ldrb	r3, [r7, #1]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3a1      	bcc.n	80011ec <lcd_ShowIntNum+0x30>
	}
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	cccccccd 	.word	0xcccccccd

080012b8 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af04      	add	r7, sp, #16
 80012be:	4604      	mov	r4, r0
 80012c0:	4608      	mov	r0, r1
 80012c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	81fb      	strh	r3, [r7, #14]
 80012ce:	4603      	mov	r3, r0
 80012d0:	81bb      	strh	r3, [r7, #12]
 80012d2:	460b      	mov	r3, r1
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 80012da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 80012e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80013c0 <lcd_ShowFloatNum+0x108>
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e057      	b.n	80013ae <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 80012fe:	8abc      	ldrh	r4, [r7, #20]
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3b01      	subs	r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4619      	mov	r1, r3
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff ff38 	bl	8001184 <mypow>
 8001314:	4603      	mov	r3, r0
 8001316:	fbb4 f1f3 	udiv	r1, r4, r3
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <lcd_ShowFloatNum+0x10c>)
 800131c:	fba3 2301 	umull	r2, r3, r3, r1
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	1aca      	subs	r2, r1, r3
 800132c:	4613      	mov	r3, r2
 800132e:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001330:	7dfa      	ldrb	r2, [r7, #23]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3b02      	subs	r3, #2
 8001336:	429a      	cmp	r2, r3
 8001338:	d11d      	bne.n	8001376 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	3b02      	subs	r3, #2
 800133e:	b29a      	uxth	r2, r3
 8001340:	7dbb      	ldrb	r3, [r7, #22]
 8001342:	b29b      	uxth	r3, r3
 8001344:	fb12 f303 	smulbb	r3, r2, r3
 8001348:	b29a      	uxth	r2, r3
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	4413      	add	r3, r2
 800134e:	b298      	uxth	r0, r3
 8001350:	88ba      	ldrh	r2, [r7, #4]
 8001352:	89b9      	ldrh	r1, [r7, #12]
 8001354:	2300      	movs	r3, #0
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4613      	mov	r3, r2
 8001364:	222e      	movs	r2, #46	; 0x2e
 8001366:	f7ff fe3d 	bl	8000fe4 <lcd_ShowChar>
			t++;
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	3301      	adds	r3, #1
 800136e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	3301      	adds	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	b29a      	uxth	r2, r3
 800137a:	7dbb      	ldrb	r3, [r7, #22]
 800137c:	b29b      	uxth	r3, r3
 800137e:	fb12 f303 	smulbb	r3, r2, r3
 8001382:	b29a      	uxth	r2, r3
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	4413      	add	r3, r2
 8001388:	b298      	uxth	r0, r3
 800138a:	7cfb      	ldrb	r3, [r7, #19]
 800138c:	3330      	adds	r3, #48	; 0x30
 800138e:	b2da      	uxtb	r2, r3
 8001390:	88bc      	ldrh	r4, [r7, #4]
 8001392:	89b9      	ldrh	r1, [r7, #12]
 8001394:	2300      	movs	r3, #0
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4623      	mov	r3, r4
 80013a4:	f7ff fe1e 	bl	8000fe4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	3301      	adds	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
 80013ae:	7dfa      	ldrb	r2, [r7, #23]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3a3      	bcc.n	80012fe <lcd_ShowFloatNum+0x46>
	}
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	42c80000 	.word	0x42c80000
 80013c4:	cccccccd 	.word	0xcccccccd

080013c8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <lcd_SetDir+0x44>)
 80013e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013e8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <lcd_SetDir+0x44>)
 80013ec:	22f0      	movs	r2, #240	; 0xf0
 80013ee:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80013f0:	e006      	b.n	8001400 <lcd_SetDir+0x38>
		lcddev.width=240;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <lcd_SetDir+0x44>)
 80013f4:	22f0      	movs	r2, #240	; 0xf0
 80013f6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <lcd_SetDir+0x44>)
 80013fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013fe:	805a      	strh	r2, [r3, #2]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000078 	.word	0x20000078

08001410 <lcd_init>:


void lcd_init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	48aa      	ldr	r0, [pc, #680]	; (80016c4 <lcd_init+0x2b4>)
 800141c:	f002 ff6a 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001424:	f001 fc80 	bl	8002d28 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142e:	48a5      	ldr	r0, [pc, #660]	; (80016c4 <lcd_init+0x2b4>)
 8001430:	f002 ff60 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001434:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001438:	f001 fc76 	bl	8002d28 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff ffc3 	bl	80013c8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001442:	20d3      	movs	r0, #211	; 0xd3
 8001444:	f7ff fd38 	bl	8000eb8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001448:	f7ff fd56 	bl	8000ef8 <LCD_RD_DATA>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <lcd_init+0x2b8>)
 8001452:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001454:	f7ff fd50 	bl	8000ef8 <LCD_RD_DATA>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b9a      	ldr	r3, [pc, #616]	; (80016c8 <lcd_init+0x2b8>)
 800145e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001460:	f7ff fd4a 	bl	8000ef8 <LCD_RD_DATA>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b97      	ldr	r3, [pc, #604]	; (80016c8 <lcd_init+0x2b8>)
 800146a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800146c:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <lcd_init+0x2b8>)
 800146e:	889b      	ldrh	r3, [r3, #4]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b94      	ldr	r3, [pc, #592]	; (80016c8 <lcd_init+0x2b8>)
 8001476:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001478:	f7ff fd3e 	bl	8000ef8 <LCD_RD_DATA>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b91      	ldr	r3, [pc, #580]	; (80016c8 <lcd_init+0x2b8>)
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	4313      	orrs	r3, r2
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b8f      	ldr	r3, [pc, #572]	; (80016c8 <lcd_init+0x2b8>)
 800148a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800148c:	20cf      	movs	r0, #207	; 0xcf
 800148e:	f7ff fd13 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fd20 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001498:	20c1      	movs	r0, #193	; 0xc1
 800149a:	f7ff fd1d 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800149e:	2030      	movs	r0, #48	; 0x30
 80014a0:	f7ff fd1a 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80014a4:	20ed      	movs	r0, #237	; 0xed
 80014a6:	f7ff fd07 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80014aa:	2064      	movs	r0, #100	; 0x64
 80014ac:	f7ff fd14 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f7ff fd11 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80014b6:	2012      	movs	r0, #18
 80014b8:	f7ff fd0e 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80014bc:	2081      	movs	r0, #129	; 0x81
 80014be:	f7ff fd0b 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80014c2:	20e8      	movs	r0, #232	; 0xe8
 80014c4:	f7ff fcf8 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80014c8:	2085      	movs	r0, #133	; 0x85
 80014ca:	f7ff fd05 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80014ce:	2010      	movs	r0, #16
 80014d0:	f7ff fd02 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80014d4:	207a      	movs	r0, #122	; 0x7a
 80014d6:	f7ff fcff 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80014da:	20cb      	movs	r0, #203	; 0xcb
 80014dc:	f7ff fcec 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80014e0:	2039      	movs	r0, #57	; 0x39
 80014e2:	f7ff fcf9 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80014e6:	202c      	movs	r0, #44	; 0x2c
 80014e8:	f7ff fcf6 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fcf3 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80014f2:	2034      	movs	r0, #52	; 0x34
 80014f4:	f7ff fcf0 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff fced 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80014fe:	20f7      	movs	r0, #247	; 0xf7
 8001500:	f7ff fcda 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001504:	2020      	movs	r0, #32
 8001506:	f7ff fce7 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800150a:	20ea      	movs	r0, #234	; 0xea
 800150c:	f7ff fcd4 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fce1 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff fcde 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800151c:	20c0      	movs	r0, #192	; 0xc0
 800151e:	f7ff fccb 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001522:	201b      	movs	r0, #27
 8001524:	f7ff fcd8 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001528:	20c1      	movs	r0, #193	; 0xc1
 800152a:	f7ff fcc5 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff fcd2 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001534:	20c5      	movs	r0, #197	; 0xc5
 8001536:	f7ff fcbf 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800153a:	2030      	movs	r0, #48	; 0x30
 800153c:	f7ff fccc 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001540:	2030      	movs	r0, #48	; 0x30
 8001542:	f7ff fcc9 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001546:	20c7      	movs	r0, #199	; 0xc7
 8001548:	f7ff fcb6 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800154c:	20b7      	movs	r0, #183	; 0xb7
 800154e:	f7ff fcc3 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001552:	2036      	movs	r0, #54	; 0x36
 8001554:	f7ff fcb0 	bl	8000eb8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001558:	2008      	movs	r0, #8
 800155a:	f7ff fcbd 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800155e:	203a      	movs	r0, #58	; 0x3a
 8001560:	f7ff fcaa 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001564:	2055      	movs	r0, #85	; 0x55
 8001566:	f7ff fcb7 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800156a:	20b1      	movs	r0, #177	; 0xb1
 800156c:	f7ff fca4 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff fcb1 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001576:	201a      	movs	r0, #26
 8001578:	f7ff fcae 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800157c:	20b6      	movs	r0, #182	; 0xb6
 800157e:	f7ff fc9b 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001582:	200a      	movs	r0, #10
 8001584:	f7ff fca8 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001588:	20a2      	movs	r0, #162	; 0xa2
 800158a:	f7ff fca5 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800158e:	20f2      	movs	r0, #242	; 0xf2
 8001590:	f7ff fc92 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fc9f 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800159a:	2026      	movs	r0, #38	; 0x26
 800159c:	f7ff fc8c 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff fc99 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80015a6:	20e0      	movs	r0, #224	; 0xe0
 80015a8:	f7ff fc86 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80015ac:	200f      	movs	r0, #15
 80015ae:	f7ff fc93 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80015b2:	202a      	movs	r0, #42	; 0x2a
 80015b4:	f7ff fc90 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80015b8:	2028      	movs	r0, #40	; 0x28
 80015ba:	f7ff fc8d 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80015be:	2008      	movs	r0, #8
 80015c0:	f7ff fc8a 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80015c4:	200e      	movs	r0, #14
 80015c6:	f7ff fc87 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80015ca:	2008      	movs	r0, #8
 80015cc:	f7ff fc84 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80015d0:	2054      	movs	r0, #84	; 0x54
 80015d2:	f7ff fc81 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80015d6:	20a9      	movs	r0, #169	; 0xa9
 80015d8:	f7ff fc7e 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80015dc:	2043      	movs	r0, #67	; 0x43
 80015de:	f7ff fc7b 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80015e2:	200a      	movs	r0, #10
 80015e4:	f7ff fc78 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80015e8:	200f      	movs	r0, #15
 80015ea:	f7ff fc75 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fc72 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fc6f 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fc6c 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff fc69 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001606:	20e1      	movs	r0, #225	; 0xe1
 8001608:	f7ff fc56 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fc63 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001612:	2015      	movs	r0, #21
 8001614:	f7ff fc60 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001618:	2017      	movs	r0, #23
 800161a:	f7ff fc5d 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800161e:	2007      	movs	r0, #7
 8001620:	f7ff fc5a 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001624:	2011      	movs	r0, #17
 8001626:	f7ff fc57 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800162a:	2006      	movs	r0, #6
 800162c:	f7ff fc54 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001630:	202b      	movs	r0, #43	; 0x2b
 8001632:	f7ff fc51 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001636:	2056      	movs	r0, #86	; 0x56
 8001638:	f7ff fc4e 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800163c:	203c      	movs	r0, #60	; 0x3c
 800163e:	f7ff fc4b 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001642:	2005      	movs	r0, #5
 8001644:	f7ff fc48 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001648:	2010      	movs	r0, #16
 800164a:	f7ff fc45 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800164e:	200f      	movs	r0, #15
 8001650:	f7ff fc42 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001654:	203f      	movs	r0, #63	; 0x3f
 8001656:	f7ff fc3f 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800165a:	203f      	movs	r0, #63	; 0x3f
 800165c:	f7ff fc3c 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001660:	200f      	movs	r0, #15
 8001662:	f7ff fc39 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001666:	202b      	movs	r0, #43	; 0x2b
 8001668:	f7ff fc26 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fc33 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fc30 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff fc2d 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800167e:	203f      	movs	r0, #63	; 0x3f
 8001680:	f7ff fc2a 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001684:	202a      	movs	r0, #42	; 0x2a
 8001686:	f7ff fc17 	bl	8000eb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fc24 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fc21 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fc1e 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800169c:	20ef      	movs	r0, #239	; 0xef
 800169e:	f7ff fc1b 	bl	8000ed8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80016a2:	2011      	movs	r0, #17
 80016a4:	f7ff fc08 	bl	8000eb8 <LCD_WR_REG>
	HAL_Delay(120);
 80016a8:	2078      	movs	r0, #120	; 0x78
 80016aa:	f001 fb3d 	bl	8002d28 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80016ae:	2029      	movs	r0, #41	; 0x29
 80016b0:	f7ff fc02 	bl	8000eb8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <lcd_init+0x2bc>)
 80016bc:	f002 fe1a 	bl	80042f4 <HAL_GPIO_WritePin>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800
 80016c8:	20000078 	.word	0x20000078
 80016cc:	40020000 	.word	0x40020000

080016d0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b08b      	sub	sp, #44	; 0x2c
 80016d4:	af04      	add	r7, sp, #16
 80016d6:	60ba      	str	r2, [r7, #8]
 80016d8:	461a      	mov	r2, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	81fb      	strh	r3, [r7, #14]
 80016de:	460b      	mov	r3, r1
 80016e0:	81bb      	strh	r3, [r7, #12]
 80016e2:	4613      	mov	r3, r2
 80016e4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80016ee:	e048      	b.n	8001782 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d145      	bne.n	8001782 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80016f6:	89fa      	ldrh	r2, [r7, #14]
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <lcd_ShowStr+0xc4>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	1acb      	subs	r3, r1, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	dc3f      	bgt.n	800178c <lcd_ShowStr+0xbc>
 800170c:	89ba      	ldrh	r2, [r7, #12]
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <lcd_ShowStr+0xc4>)
 8001710:	885b      	ldrh	r3, [r3, #2]
 8001712:	4619      	mov	r1, r3
 8001714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001718:	1acb      	subs	r3, r1, r3
 800171a:	429a      	cmp	r2, r3
 800171c:	dc36      	bgt.n	800178c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b80      	cmp	r3, #128	; 0x80
 8001724:	d902      	bls.n	800172c <lcd_ShowStr+0x5c>
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
 800172a:	e02a      	b.n	8001782 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b0d      	cmp	r3, #13
 8001732:	d10b      	bne.n	800174c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001734:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001738:	b29a      	uxth	r2, r3
 800173a:	89bb      	ldrh	r3, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001740:	8abb      	ldrh	r3, [r7, #20]
 8001742:	81fb      	strh	r3, [r7, #14]
					str++;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3301      	adds	r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	e017      	b.n	800177c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	88fc      	ldrh	r4, [r7, #6]
 8001752:	89b9      	ldrh	r1, [r7, #12]
 8001754:	89f8      	ldrh	r0, [r7, #14]
 8001756:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4623      	mov	r3, r4
 8001768:	f7ff fc3c 	bl	8000fe4 <lcd_ShowChar>
					x+=sizey/2;
 800176c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	b29a      	uxth	r2, r3
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	4413      	add	r3, r2
 800177a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1b2      	bne.n	80016f0 <lcd_ShowStr+0x20>
 800178a:	e000      	b.n	800178e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800178c:	bf00      	nop
			}
		}
	}
}
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}
 8001794:	20000078 	.word	0x20000078

08001798 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800179c:	2201      	movs	r2, #1
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <led7_init+0x14>)
 80017a2:	f002 fda7 	bl	80042f4 <HAL_GPIO_WritePin>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021800 	.word	0x40021800

080017b0 <led7_Scan>:

void led7_Scan(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80017b4:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <led7_Scan+0x104>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <led7_Scan+0x104>)
 80017be:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80017c0:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <led7_Scan+0x108>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a3d      	ldr	r2, [pc, #244]	; (80018bc <led7_Scan+0x10c>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <led7_Scan+0x104>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <led7_Scan+0x104>)
 80017da:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <led7_Scan+0x108>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d847      	bhi.n	8001874 <led7_Scan+0xc4>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <led7_Scan+0x3c>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	0800181b 	.word	0x0800181b
 80017f4:	08001839 	.word	0x08001839
 80017f8:	08001857 	.word	0x08001857
	case 0:
		spi_buffer |= 0x00b0;
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <led7_Scan+0x104>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <led7_Scan+0x104>)
 8001808:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <led7_Scan+0x104>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <led7_Scan+0x104>)
 8001816:	801a      	strh	r2, [r3, #0]
		break;
 8001818:	e02d      	b.n	8001876 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <led7_Scan+0x104>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <led7_Scan+0x104>)
 8001826:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <led7_Scan+0x104>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	f023 0320 	bic.w	r3, r3, #32
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <led7_Scan+0x104>)
 8001834:	801a      	strh	r2, [r3, #0]
		break;
 8001836:	e01e      	b.n	8001876 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <led7_Scan+0x104>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001840:	b29a      	uxth	r2, r3
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <led7_Scan+0x104>)
 8001844:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <led7_Scan+0x104>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	f023 0310 	bic.w	r3, r3, #16
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <led7_Scan+0x104>)
 8001852:	801a      	strh	r2, [r3, #0]
		break;
 8001854:	e00f      	b.n	8001876 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <led7_Scan+0x104>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <led7_Scan+0x104>)
 8001862:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <led7_Scan+0x104>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <led7_Scan+0x104>)
 8001870:	801a      	strh	r2, [r3, #0]
		break;
 8001872:	e000      	b.n	8001876 <led7_Scan+0xc6>
	default:
		break;
 8001874:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <led7_Scan+0x108>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	425a      	negs	r2, r3
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	bf58      	it	pl
 8001888:	4253      	negpl	r3, r2
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <led7_Scan+0x108>)
 800188c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2140      	movs	r1, #64	; 0x40
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <led7_Scan+0x110>)
 8001894:	f002 fd2e 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001898:	2301      	movs	r3, #1
 800189a:	2202      	movs	r2, #2
 800189c:	4905      	ldr	r1, [pc, #20]	; (80018b4 <led7_Scan+0x104>)
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <led7_Scan+0x114>)
 80018a0:	f003 fd23 	bl	80052ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2140      	movs	r1, #64	; 0x40
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <led7_Scan+0x110>)
 80018aa:	f002 fd23 	bl	80042f4 <HAL_GPIO_WritePin>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000004 	.word	0x20000004
 80018b8:	20000034 	.word	0x20000034
 80018bc:	20000000 	.word	0x20000000
 80018c0:	40021800 	.word	0x40021800
 80018c4:	2000028c 	.word	0x2000028c

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018cc:	f001 f9ba 	bl	8002c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f828 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d4:	f000 fa62 	bl	8001d9c <MX_GPIO_Init>
  MX_TIM2_Init();
 80018d8:	f000 f97c 	bl	8001bd4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80018dc:	f000 f944 	bl	8001b68 <MX_SPI1_Init>
  MX_FSMC_Init();
 80018e0:	f000 fb62 	bl	8001fa8 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80018e4:	f000 fa10 	bl	8001d08 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80018e8:	f000 fa38 	bl	8001d5c <MX_DMA_Init>
  MX_ADC1_Init();
 80018ec:	f000 f884 	bl	80019f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80018f0:	f000 f90c 	bl	8001b0c <MX_I2C1_Init>
  MX_TIM13_Init();
 80018f4:	f000 f9ba 	bl	8001c6c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80018f8:	f000 fbd0 	bl	800209c <system_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  while (!flag_timer2);
 80018fc:	bf00      	nop
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <main+0x58>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0fb      	beq.n	80018fe <main+0x36>
	  flag_timer2 = 0;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <main+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800190c:	f7ff fa02 	bl	8000d14 <button_Scan>
	  test_ledDebug();
 8001910:	f000 fbec 	bl	80020ec <test_ledDebug>
	  test_adc();
 8001914:	f000 fc3e 	bl	8002194 <test_adc>
	  test_buzzer();
 8001918:	f000 fcfc 	bl	8002314 <test_buzzer>
	  while (!flag_timer2);
 800191c:	e7ee      	b.n	80018fc <main+0x34>
 800191e:	bf00      	nop
 8001920:	2000003a 	.word	0x2000003a

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 fb34 	bl	8007fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <SystemClock_Config+0xcc>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <SystemClock_Config+0xcc>)
 8001952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <SystemClock_Config+0xcc>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <SystemClock_Config+0xd0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <SystemClock_Config+0xd0>)
 800196e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <SystemClock_Config+0xd0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001980:	2302      	movs	r3, #2
 8001982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001984:	2301      	movs	r3, #1
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001988:	2310      	movs	r3, #16
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198c:	2302      	movs	r3, #2
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001990:	2300      	movs	r3, #0
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001994:	2308      	movs	r3, #8
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001998:	23a8      	movs	r3, #168	; 0xa8
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800199c:	2302      	movs	r3, #2
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019a0:	2304      	movs	r3, #4
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ffa1 	bl	80048f0 <HAL_RCC_OscConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019b4:	f000 fcca 	bl	800234c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b8:	230f      	movs	r3, #15
 80019ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019bc:	2302      	movs	r3, #2
 80019be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2105      	movs	r1, #5
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fa02 	bl	8004de0 <HAL_RCC_ClockConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019e2:	f000 fcb3 	bl	800234c <Error_Handler>
  }
}
 80019e6:	bf00      	nop
 80019e8:	3750      	adds	r7, #80	; 0x50
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a0c:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <MX_ADC1_Init+0x10c>)
 8001a0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a10:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a16:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a1c:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a30:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a38:	4a33      	ldr	r2, [pc, #204]	; (8001b08 <MX_ADC1_Init+0x110>)
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a44:	2205      	movs	r2, #5
 8001a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a56:	482a      	ldr	r0, [pc, #168]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a58:	f001 f98a 	bl	8002d70 <HAL_ADC_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f000 fc73 	bl	800234c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a66:	2308      	movs	r3, #8
 8001a68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4822      	ldr	r0, [pc, #136]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a78:	f001 faec 	bl	8003054 <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a82:	f000 fc63 	bl	800234c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a86:	2309      	movs	r3, #9
 8001a88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	481b      	ldr	r0, [pc, #108]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001a94:	f001 fade 	bl	8003054 <HAL_ADC_ConfigChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001a9e:	f000 fc55 	bl	800234c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4814      	ldr	r0, [pc, #80]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001ab0:	f001 fad0 	bl	8003054 <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001aba:	f000 fc47 	bl	800234c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001abe:	230b      	movs	r3, #11
 8001ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001acc:	f001 fac2 	bl	8003054 <HAL_ADC_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001ad6:	f000 fc39 	bl	800234c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001ada:	230c      	movs	r3, #12
 8001adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001ade:	2305      	movs	r3, #5
 8001ae0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <MX_ADC1_Init+0x108>)
 8001ae8:	f001 fab4 	bl	8003054 <HAL_ADC_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001af2:	f000 fc2b 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000158 	.word	0x20000158
 8001b04:	40012000 	.word	0x40012000
 8001b08:	0f000001 	.word	0x0f000001

08001b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <MX_I2C1_Init+0x54>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x58>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b4a:	f002 fc07 	bl	800435c <HAL_I2C_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f000 fbfa 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200000b4 	.word	0x200000b4
 8001b60:	40005400 	.word	0x40005400
 8001b64:	000186a0 	.word	0x000186a0

08001b68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <MX_SPI1_Init+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bba:	f003 fb0d 	bl	80051d8 <HAL_SPI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc4:	f000 fbc2 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000028c 	.word	0x2000028c
 8001bd0:	40013000 	.word	0x40013000

08001bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bfa:	f240 3247 	movw	r2, #839	; 0x347
 8001bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c08:	2263      	movs	r2, #99	; 0x63
 8001c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c1a:	f004 f8c9 	bl	8005db0 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c24:	f000 fb92 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c36:	f004 fc67 	bl	8006508 <HAL_TIM_ConfigClockSource>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c40:	f000 fb84 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c52:	f005 f859 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f000 fb76 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200002e4 	.word	0x200002e4

08001c6c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	615a      	str	r2, [r3, #20]
 8001c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001c86:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <MX_TIM13_Init+0x98>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001c8c:	f240 3247 	movw	r2, #839	; 0x347
 8001c90:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001c9a:	2263      	movs	r2, #99	; 0x63
 8001c9c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001caa:	4815      	ldr	r0, [pc, #84]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001cac:	f004 f880 	bl	8005db0 <HAL_TIM_Base_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001cb6:	f000 fb49 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001cba:	4811      	ldr	r0, [pc, #68]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001cbc:	f004 f938 	bl	8005f30 <HAL_TIM_PWM_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001cc6:	f000 fb41 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cca:	2360      	movs	r3, #96	; 0x60
 8001ccc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001ce2:	f004 fb4f 	bl	8006384 <HAL_TIM_PWM_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001cec:	f000 fb2e 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM13_Init+0x94>)
 8001cf2:	f000 fdf3 	bl	80028dc <HAL_TIM_MspPostInit>

}
 8001cf6:	bf00      	nop
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200001a0 	.word	0x200001a0
 8001d04:	40001c00 	.word	0x40001c00

08001d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <MX_USART1_UART_Init+0x50>)
 8001d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	220c      	movs	r2, #12
 8001d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_USART1_UART_Init+0x4c>)
 8001d40:	f005 f872 	bl	8006e28 <HAL_UART_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d4a:	f000 faff 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200001e8 	.word	0x200001e8
 8001d58:	40011000 	.word	0x40011000

08001d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_DMA_Init+0x3c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <MX_DMA_Init+0x3c>)
 8001d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_DMA_Init+0x3c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2038      	movs	r0, #56	; 0x38
 8001d84:	f001 fce1 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d88:	2038      	movs	r0, #56	; 0x38
 8001d8a:	f001 fcfa 	bl	8003782 <HAL_NVIC_EnableIRQ>

}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a6e      	ldr	r2, [pc, #440]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	4b68      	ldr	r3, [pc, #416]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a67      	ldr	r2, [pc, #412]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a60      	ldr	r2, [pc, #384]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a59      	ldr	r2, [pc, #356]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a44      	ldr	r2, [pc, #272]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <MX_GPIO_Init+0x1f4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2170      	movs	r1, #112	; 0x70
 8001e96:	483f      	ldr	r0, [pc, #252]	; (8001f94 <MX_GPIO_Init+0x1f8>)
 8001e98:	f002 fa2c 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea2:	483d      	ldr	r0, [pc, #244]	; (8001f98 <MX_GPIO_Init+0x1fc>)
 8001ea4:	f002 fa26 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2140      	movs	r1, #64	; 0x40
 8001eac:	483b      	ldr	r0, [pc, #236]	; (8001f9c <MX_GPIO_Init+0x200>)
 8001eae:	f002 fa21 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb8:	4839      	ldr	r0, [pc, #228]	; (8001fa0 <MX_GPIO_Init+0x204>)
 8001eba:	f002 fa1b 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2108      	movs	r1, #8
 8001ec2:	4838      	ldr	r0, [pc, #224]	; (8001fa4 <MX_GPIO_Init+0x208>)
 8001ec4:	f002 fa16 	bl	80042f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001ec8:	2370      	movs	r3, #112	; 0x70
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	4619      	mov	r1, r3
 8001ede:	482d      	ldr	r0, [pc, #180]	; (8001f94 <MX_GPIO_Init+0x1f8>)
 8001ee0:	f002 f86c 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_RES_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	4826      	ldr	r0, [pc, #152]	; (8001f98 <MX_GPIO_Init+0x1fc>)
 8001efe:	f002 f85d 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X0_Pin INPUT_X1_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001f02:	23c0      	movs	r3, #192	; 0xc0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	4822      	ldr	r0, [pc, #136]	; (8001fa0 <MX_GPIO_Init+0x204>)
 8001f16:	f002 f851 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001f1a:	2330      	movs	r3, #48	; 0x30
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481a      	ldr	r0, [pc, #104]	; (8001f98 <MX_GPIO_Init+0x1fc>)
 8001f2e:	f002 f845 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001f32:	2340      	movs	r3, #64	; 0x40
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f46:	4619      	mov	r1, r3
 8001f48:	4814      	ldr	r0, [pc, #80]	; (8001f9c <MX_GPIO_Init+0x200>)
 8001f4a:	f002 f837 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	4619      	mov	r1, r3
 8001f66:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <MX_GPIO_Init+0x204>)
 8001f68:	f002 f828 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	4619      	mov	r1, r3
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <MX_GPIO_Init+0x208>)
 8001f84:	f002 f81a 	bl	8003fbc <HAL_GPIO_Init>

}
 8001f88:	bf00      	nop
 8001f8a:	3738      	adds	r7, #56	; 0x38
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020c00 	.word	0x40020c00

08001fa8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	; 0x38
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <MX_FSMC_Init+0xec>)
 8001fd6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001fda:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <MX_FSMC_Init+0xec>)
 8001fde:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <MX_FSMC_Init+0xf0>)
 8001fe0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <MX_FSMC_Init+0xec>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <MX_FSMC_Init+0xec>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <MX_FSMC_Init+0xec>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <MX_FSMC_Init+0xec>)
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MX_FSMC_Init+0xec>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <MX_FSMC_Init+0xec>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <MX_FSMC_Init+0xec>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <MX_FSMC_Init+0xec>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <MX_FSMC_Init+0xec>)
 8002014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_FSMC_Init+0xec>)
 800201c:	2200      	movs	r2, #0
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_FSMC_Init+0xec>)
 8002022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_FSMC_Init+0xec>)
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MX_FSMC_Init+0xec>)
 8002030:	2200      	movs	r2, #0
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_FSMC_Init+0xec>)
 8002036:	2200      	movs	r2, #0
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800203a:	230f      	movs	r3, #15
 800203c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800203e:	230f      	movs	r3, #15
 8002040:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8002042:	233c      	movs	r3, #60	; 0x3c
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800204a:	2310      	movs	r3, #16
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800204e:	2311      	movs	r3, #17
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002052:	2300      	movs	r3, #0
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8002056:	2308      	movs	r3, #8
 8002058:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800205a:	230f      	movs	r3, #15
 800205c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800205e:	2309      	movs	r3, #9
 8002060:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8002066:	2310      	movs	r3, #16
 8002068:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800206a:	2311      	movs	r3, #17
 800206c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8002072:	463a      	mov	r2, r7
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <MX_FSMC_Init+0xec>)
 800207c:	f003 fe54 	bl	8005d28 <HAL_SRAM_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8002086:	f000 f961 	bl	800234c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800208a:	bf00      	nop
 800208c:	3738      	adds	r7, #56	; 0x38
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000108 	.word	0x20000108
 8002098:	a0000104 	.word	0xa0000104

0800209c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2120      	movs	r1, #32
 80020a4:	4810      	ldr	r0, [pc, #64]	; (80020e8 <system_init+0x4c>)
 80020a6:	f002 f925 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	480e      	ldr	r0, [pc, #56]	; (80020e8 <system_init+0x4c>)
 80020b0:	f002 f920 	bl	80042f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2110      	movs	r1, #16
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <system_init+0x4c>)
 80020ba:	f002 f91b 	bl	80042f4 <HAL_GPIO_WritePin>

	timer_init();
 80020be:	f000 fa35 	bl	800252c <timer_init>
	led7_init();
 80020c2:	f7ff fb69 	bl	8001798 <led7_init>
	button_init();
 80020c6:	f7fe fe19 	bl	8000cfc <button_init>
	lcd_init();
 80020ca:	f7ff f9a1 	bl	8001410 <lcd_init>
	ds3231_init();
 80020ce:	f7fe feaf 	bl	8000e30 <ds3231_init>
	uart_init_rs232();
 80020d2:	f000 fd3d 	bl	8002b50 <uart_init_rs232>
	sensor_init();
 80020d6:	f000 f93f 	bl	8002358 <sensor_init>
	buzzer_init();
 80020da:	f7fe fe87 	bl	8000dec <buzzer_init>
	setTimer2(50);
 80020de:	2032      	movs	r0, #50	; 0x32
 80020e0:	f000 fa2e 	bl	8002540 <setTimer2>
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000

080020ec <test_ledDebug>:

uint8_t count_LED_debug = 0;
uint8_t count_LED_Y0 = 0;
uint8_t count_LED_Y1 = 0;

void test_ledDebug(){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	count_LED_debug = (count_LED_debug + 1) % 20;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <test_ledDebug+0x3c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <test_ledDebug+0x40>)
 80020f8:	fb83 1302 	smull	r1, r3, r3, r2
 80020fc:	10d9      	asrs	r1, r3, #3
 80020fe:	17d3      	asrs	r3, r2, #31
 8002100:	1ac9      	subs	r1, r1, r3
 8002102:	460b      	mov	r3, r1
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	1ad1      	subs	r1, r2, r3
 800210c:	b2ca      	uxtb	r2, r1
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <test_ledDebug+0x3c>)
 8002110:	701a      	strb	r2, [r3, #0]
	if (count_LED_debug == 0) {
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <test_ledDebug+0x3c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <test_ledDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800211a:	2110      	movs	r1, #16
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <test_ledDebug+0x44>)
 800211e:	f002 f902 	bl	8004326 <HAL_GPIO_TogglePin>
	}
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000038 	.word	0x20000038
 800212c:	66666667 	.word	0x66666667
 8002130:	40021000 	.word	0x40021000

08002134 <isButtonUp>:
		uart_Rs232SendNum(ds3231_sec);
		uart_Rs232SendString("\n");
	}
}
uint8_t isButtonUp ()
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	if ( button_count [3] == 1)
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <isButtonUp+0x1c>)
 800213a:	88db      	ldrh	r3, [r3, #6]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <isButtonUp+0x10>
		return 1;
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <isButtonUp+0x12>
	else
		return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	20000048 	.word	0x20000048

08002154 <isButtonDown>:

uint8_t isButtonDown (){
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	if ( button_count [7] == 1)
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <isButtonDown+0x1c>)
 800215a:	89db      	ldrh	r3, [r3, #14]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <isButtonDown+0x10>
		return 1;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <isButtonDown+0x12>
	else
		return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	20000048 	.word	0x20000048

08002174 <isButtonRight>:

uint8_t isButtonRight (){
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	if ( button_count [11] == 1)
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <isButtonRight+0x1c>)
 800217a:	8adb      	ldrh	r3, [r3, #22]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <isButtonRight+0x10>
		return 1;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <isButtonRight+0x12>
	else
		return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000048 	.word	0x20000048

08002194 <test_adc>:

uint8_t count_adc = 0;

void test_adc(){
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 800219a:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <test_adc+0x164>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	4b56      	ldr	r3, [pc, #344]	; (80022fc <test_adc+0x168>)
 80021a2:	fb83 1302 	smull	r1, r3, r3, r2
 80021a6:	10d9      	asrs	r1, r3, #3
 80021a8:	17d3      	asrs	r3, r2, #31
 80021aa:	1ac9      	subs	r1, r1, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	1ad1      	subs	r1, r2, r3
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <test_adc+0x164>)
 80021ba:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80021bc:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <test_adc+0x164>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 8096 	bne.w	80022f2 <test_adc+0x15e>
		sensor_Read();
 80021c6:	f000 f8d5 	bl	8002374 <sensor_Read>
		lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80021ca:	2300      	movs	r3, #0
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2310      	movs	r3, #16
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021da:	4a49      	ldr	r2, [pc, #292]	; (8002300 <test_adc+0x16c>)
 80021dc:	2164      	movs	r1, #100	; 0x64
 80021de:	200a      	movs	r0, #10
 80021e0:	f7ff fa76 	bl	80016d0 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 100,sensor_GetVoltage(), 4, RED, BLACK, 16);
 80021e4:	f000 f8ec 	bl	80023c0 <sensor_GetVoltage>
 80021e8:	eef0 7a40 	vmov.f32	s15, s0
 80021ec:	2310      	movs	r3, #16
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021f8:	2204      	movs	r2, #4
 80021fa:	eeb0 0a67 	vmov.f32	s0, s15
 80021fe:	2164      	movs	r1, #100	; 0x64
 8002200:	2082      	movs	r0, #130	; 0x82
 8002202:	f7ff f859 	bl	80012b8 <lcd_ShowFloatNum>
		lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 8002206:	2300      	movs	r3, #0
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	2310      	movs	r3, #16
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002216:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <test_adc+0x170>)
 8002218:	2178      	movs	r1, #120	; 0x78
 800221a:	200a      	movs	r0, #10
 800221c:	f7ff fa58 	bl	80016d0 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 120,sensor_GetCurrent(), 4, RED, BLACK, 16);
 8002220:	f000 f90a 	bl	8002438 <sensor_GetCurrent>
 8002224:	eef0 7a40 	vmov.f32	s15, s0
 8002228:	2310      	movs	r3, #16
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2300      	movs	r3, #0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002234:	2204      	movs	r2, #4
 8002236:	eeb0 0a67 	vmov.f32	s0, s15
 800223a:	2178      	movs	r1, #120	; 0x78
 800223c:	2082      	movs	r0, #130	; 0x82
 800223e:	f7ff f83b 	bl	80012b8 <lcd_ShowFloatNum>
		lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 8002242:	2300      	movs	r3, #0
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	2310      	movs	r3, #16
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002252:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <test_adc+0x174>)
 8002254:	218c      	movs	r1, #140	; 0x8c
 8002256:	200a      	movs	r0, #10
 8002258:	f7ff fa3a 	bl	80016d0 <lcd_ShowStr>
		lcd_ShowIntNum(130, 140, sensor_GetLight(), 4, RED, BLACK, 16);
 800225c:	f000 f898 	bl	8002390 <sensor_GetLight>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	2310      	movs	r3, #16
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2304      	movs	r3, #4
 8002274:	218c      	movs	r1, #140	; 0x8c
 8002276:	2082      	movs	r0, #130	; 0x82
 8002278:	f7fe ffa0 	bl	80011bc <lcd_ShowIntNum>
		lcd_ShowStr(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 800227c:	2300      	movs	r3, #0
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	2310      	movs	r3, #16
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2300      	movs	r3, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <test_adc+0x178>)
 800228e:	21a0      	movs	r1, #160	; 0xa0
 8002290:	200a      	movs	r0, #10
 8002292:	f7ff fa1d 	bl	80016d0 <lcd_ShowStr>
		lcd_ShowIntNum(130, 160, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
 8002296:	f000 f887 	bl	80023a8 <sensor_GetPotentiometer>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	2310      	movs	r3, #16
 80022a0:	9302      	str	r3, [sp, #8]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2304      	movs	r3, #4
 80022ae:	21a0      	movs	r1, #160	; 0xa0
 80022b0:	2082      	movs	r0, #130	; 0x82
 80022b2:	f7fe ff83 	bl	80011bc <lcd_ShowIntNum>
		lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80022b6:	2300      	movs	r3, #0
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2310      	movs	r3, #16
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2300      	movs	r3, #0
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <test_adc+0x17c>)
 80022c8:	21b4      	movs	r1, #180	; 0xb4
 80022ca:	200a      	movs	r0, #10
 80022cc:	f7ff fa00 	bl	80016d0 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 180,sensor_GetTemperature(), 4, RED, BLACK, 16);
 80022d0:	f000 f90e 	bl	80024f0 <sensor_GetTemperature>
 80022d4:	eef0 7a40 	vmov.f32	s15, s0
 80022d8:	2310      	movs	r3, #16
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022e4:	2204      	movs	r2, #4
 80022e6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ea:	21b4      	movs	r1, #180	; 0xb4
 80022ec:	2082      	movs	r0, #130	; 0x82
 80022ee:	f7fe ffe3 	bl	80012b8 <lcd_ShowFloatNum>
	}
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000039 	.word	0x20000039
 80022fc:	66666667 	.word	0x66666667
 8002300:	08007fd0 	.word	0x08007fd0
 8002304:	08007fdc 	.word	0x08007fdc
 8002308:	08007fe8 	.word	0x08007fe8
 800230c:	08007ff0 	.word	0x08007ff0
 8002310:	08008000 	.word	0x08008000

08002314 <test_buzzer>:

void test_buzzer(){
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 8002318:	f7ff ff0c 	bl	8002134 <isButtonUp>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <test_buzzer+0x14>
		buzzer_SetVolume(50);
 8002322:	2032      	movs	r0, #50	; 0x32
 8002324:	f7fe fd6c 	bl	8000e00 <buzzer_SetVolume>
	}

	if(isButtonDown()){
 8002328:	f7ff ff14 	bl	8002154 <isButtonDown>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <test_buzzer+0x24>
		buzzer_SetVolume(0);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fd64 	bl	8000e00 <buzzer_SetVolume>
	}

	if(isButtonRight()){
 8002338:	f7ff ff1c 	bl	8002174 <isButtonRight>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <test_buzzer+0x34>
		buzzer_SetVolume(25);
 8002342:	2019      	movs	r0, #25
 8002344:	f7fe fd5c 	bl	8000e00 <buzzer_SetVolume>
	}

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002354:	e7fe      	b.n	8002354 <Error_Handler+0x8>
	...

08002358 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 800235c:	2205      	movs	r2, #5
 800235e:	4903      	ldr	r1, [pc, #12]	; (800236c <sensor_init+0x14>)
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <sensor_init+0x18>)
 8002362:	f000 fd49 	bl	8002df8 <HAL_ADC_Start_DMA>
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000032c 	.word	0x2000032c
 8002370:	20000158 	.word	0x20000158

08002374 <sensor_Read>:

void sensor_Read(){
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002378:	2205      	movs	r2, #5
 800237a:	4903      	ldr	r1, [pc, #12]	; (8002388 <sensor_Read+0x14>)
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <sensor_Read+0x18>)
 800237e:	f000 fd3b 	bl	8002df8 <HAL_ADC_Start_DMA>
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000032c 	.word	0x2000032c
 800238c:	20000158 	.word	0x20000158

08002390 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <sensor_GetLight+0x14>)
 8002396:	889b      	ldrh	r3, [r3, #4]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000032c 	.word	0x2000032c

080023a8 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <sensor_GetPotentiometer+0x14>)
 80023ae:	88db      	ldrh	r3, [r3, #6]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000032c 	.word	0x2000032c

080023c0 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <sensor_GetVoltage+0x70>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d0:	ee17 0a90 	vmov	r0, s15
 80023d4:	f7fe f85c 	bl	8000490 <__aeabi_f2d>
 80023d8:	a311      	add	r3, pc, #68	; (adr r3, 8002420 <sensor_GetVoltage+0x60>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe f8af 	bl	8000540 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <sensor_GetVoltage+0x74>)
 80023f0:	f7fe f8a6 	bl	8000540 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	a30a      	add	r3, pc, #40	; (adr r3, 8002428 <sensor_GetVoltage+0x68>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f9c7 	bl	8000794 <__aeabi_ddiv>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe faa9 	bl	8000964 <__aeabi_d2f>
 8002412:	4603      	mov	r3, r0
 8002414:	ee07 3a90 	vmov	s15, r3
}
 8002418:	eeb0 0a67 	vmov.f32	s0, s15
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	66666666 	.word	0x66666666
 8002424:	400a6666 	.word	0x400a6666
 8002428:	cccccccd 	.word	0xcccccccd
 800242c:	40b908ac 	.word	0x40b908ac
 8002430:	2000032c 	.word	0x2000032c
 8002434:	40280000 	.word	0x40280000

08002438 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <sensor_GetCurrent+0xa8>)
 800243e:	885b      	ldrh	r3, [r3, #2]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002448:	ee17 0a90 	vmov	r0, s15
 800244c:	f7fe f820 	bl	8000490 <__aeabi_f2d>
 8002450:	a31f      	add	r3, pc, #124	; (adr r3, 80024d0 <sensor_GetCurrent+0x98>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe f873 	bl	8000540 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <sensor_GetCurrent+0xac>)
 8002468:	f7fe f86a 	bl	8000540 <__aeabi_dmul>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	a318      	add	r3, pc, #96	; (adr r3, 80024d8 <sensor_GetCurrent+0xa0>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f7fe f98b 	bl	8000794 <__aeabi_ddiv>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <sensor_GetCurrent+0xb0>)
 800248c:	f7fd fea0 	bl	80001d0 <__aeabi_dsub>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <sensor_GetCurrent+0xb4>)
 800249e:	f7fe f84f 	bl	8000540 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <sensor_GetCurrent+0xb0>)
 80024b0:	f7fe f970 	bl	8000794 <__aeabi_ddiv>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fa52 	bl	8000964 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	ee07 3a90 	vmov	s15, r3
}
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	f3af 8000 	nop.w
 80024d0:	66666666 	.word	0x66666666
 80024d4:	400a6666 	.word	0x400a6666
 80024d8:	147ae148 	.word	0x147ae148
 80024dc:	40a4b2ee 	.word	0x40a4b2ee
 80024e0:	2000032c 	.word	0x2000032c
 80024e4:	408f4000 	.word	0x408f4000
 80024e8:	40040000 	.word	0x40040000
 80024ec:	40140000 	.word	0x40140000

080024f0 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <sensor_GetTemperature+0x30>)
 80024f6:	891b      	ldrh	r3, [r3, #8]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002500:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002524 <sensor_GetTemperature+0x34>
 8002504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002508:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002528 <sensor_GetTemperature+0x38>
 800250c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002510:	eef0 7a66 	vmov.f32	s15, s13
}
 8002514:	eeb0 0a67 	vmov.f32	s0, s15
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	2000032c 	.word	0x2000032c
 8002524:	43a50000 	.word	0x43a50000
 8002528:	457ff000 	.word	0x457ff000

0800252c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <timer_init+0x10>)
 8002532:	f003 fc8d 	bl	8005e50 <HAL_TIM_Base_Start_IT>
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200002e4 	.word	0x200002e4

08002540 <setTimer2>:

void setTimer2(uint16_t duration){
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <setTimer2+0x2c>)
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <setTimer2+0x2c>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <setTimer2+0x30>)
 8002556:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <setTimer2+0x34>)
 800255a:	2200      	movs	r2, #0
 800255c:	801a      	strh	r2, [r3, #0]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000003e 	.word	0x2000003e
 8002570:	2000003c 	.word	0x2000003c
 8002574:	2000003a 	.word	0x2000003a

08002578 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002588:	d116      	bne.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800259c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x40>
				flag_timer2 = 1;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025b2:	801a      	strh	r2, [r3, #0]
				led7_Scan();
 80025b4:	f7ff f8fc 	bl	80017b0 <led7_Scan>
			}
		}

	}
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000003c 	.word	0x2000003c
 80025c4:	2000003a 	.word	0x2000003a
 80025c8:	2000003e 	.word	0x2000003e

080025cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_MspInit+0x4c>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_MspInit+0x4c>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_MspInit+0x4c>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_MspInit+0x4c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_MspInit+0x4c>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_MspInit+0x4c>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800

0800261c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3c      	ldr	r2, [pc, #240]	; (800272c <HAL_ADC_MspInit+0x110>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d171      	bne.n	8002722 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_ADC_MspInit+0x114>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a3a      	ldr	r2, [pc, #232]	; (8002730 <HAL_ADC_MspInit+0x114>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_ADC_MspInit+0x114>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_ADC_MspInit+0x114>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a33      	ldr	r2, [pc, #204]	; (8002730 <HAL_ADC_MspInit+0x114>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_ADC_MspInit+0x114>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_ADC_MspInit+0x114>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a2c      	ldr	r2, [pc, #176]	; (8002730 <HAL_ADC_MspInit+0x114>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_ADC_MspInit+0x114>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002692:	2307      	movs	r3, #7
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002696:	2303      	movs	r3, #3
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	4823      	ldr	r0, [pc, #140]	; (8002734 <HAL_ADC_MspInit+0x118>)
 80026a6:	f001 fc89 	bl	8003fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026aa:	2303      	movs	r3, #3
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ae:	2303      	movs	r3, #3
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	481e      	ldr	r0, [pc, #120]	; (8002738 <HAL_ADC_MspInit+0x11c>)
 80026be:	f001 fc7d 	bl	8003fbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026c4:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <HAL_ADC_MspInit+0x124>)
 80026c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_ADC_MspInit+0x120>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_ADC_MspInit+0x120>)
 8002702:	2200      	movs	r2, #0
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <HAL_ADC_MspInit+0x120>)
 8002708:	f001 f856 	bl	80037b8 <HAL_DMA_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002712:	f7ff fe1b 	bl	800234c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_ADC_MspInit+0x120>)
 800271a:	639a      	str	r2, [r3, #56]	; 0x38
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_ADC_MspInit+0x120>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40012000 	.word	0x40012000
 8002730:	40023800 	.word	0x40023800
 8002734:	40020800 	.word	0x40020800
 8002738:	40020400 	.word	0x40020400
 800273c:	2000022c 	.word	0x2000022c
 8002740:	40026410 	.word	0x40026410

08002744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_I2C_MspInit+0x84>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d12b      	bne.n	80027be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_I2C_MspInit+0x88>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_I2C_MspInit+0x88>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_I2C_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002786:	2312      	movs	r3, #18
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002792:	2304      	movs	r3, #4
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <HAL_I2C_MspInit+0x8c>)
 800279e:	f001 fc0d 	bl	8003fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_I2C_MspInit+0x88>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_I2C_MspInit+0x88>)
 80027ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_I2C_MspInit+0x88>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	3728      	adds	r7, #40	; 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40005400 	.word	0x40005400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400

080027d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_SPI_MspInit+0x84>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12b      	bne.n	800284e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_SPI_MspInit+0x88>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_SPI_MspInit+0x88>)
 8002800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_SPI_MspInit+0x88>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_SPI_MspInit+0x88>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_SPI_MspInit+0x88>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_SPI_MspInit+0x88>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800282e:	2338      	movs	r3, #56	; 0x38
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800283e:	2305      	movs	r3, #5
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <HAL_SPI_MspInit+0x8c>)
 800284a:	f001 fbb7 	bl	8003fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800284e:	bf00      	nop
 8002850:	3728      	adds	r7, #40	; 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40013000 	.word	0x40013000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020400 	.word	0x40020400

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d116      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	201c      	movs	r0, #28
 8002898:	f000 ff57 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800289c:	201c      	movs	r0, #28
 800289e:	f000 ff70 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80028a2:	e012      	b.n	80028ca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM13)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <HAL_TIM_Base_MspInit+0x74>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10d      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 80028b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_TIM_Base_MspInit+0x70>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40001c00 	.word	0x40001c00

080028dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_TIM_MspPostInit+0x68>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d11e      	bne.n	800293c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_TIM_MspPostInit+0x6c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <HAL_TIM_MspPostInit+0x6c>)
 8002908:	f043 0320 	orr.w	r3, r3, #32
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_TIM_MspPostInit+0x6c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800291a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800292c:	2309      	movs	r3, #9
 800292e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4619      	mov	r1, r3
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <HAL_TIM_MspPostInit+0x70>)
 8002938:	f001 fb40 	bl	8003fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800293c:	bf00      	nop
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40001c00 	.word	0x40001c00
 8002948:	40023800 	.word	0x40023800
 800294c:	40021400 	.word	0x40021400

08002950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_UART_MspInit+0x94>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d134      	bne.n	80029dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_UART_MspInit+0x98>)
 800297c:	f043 0310 	orr.w	r3, r3, #16
 8002980:	6453      	str	r3, [r2, #68]	; 0x44
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_UART_MspInit+0x98>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029bc:	2307      	movs	r3, #7
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	4809      	ldr	r0, [pc, #36]	; (80029ec <HAL_UART_MspInit+0x9c>)
 80029c8:	f001 faf8 	bl	8003fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	2025      	movs	r0, #37	; 0x25
 80029d2:	f000 feba 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029d6:	2025      	movs	r0, #37	; 0x25
 80029d8:	f000 fed3 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029dc:	bf00      	nop
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020000 	.word	0x40020000

080029f0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_FSMC_MspInit+0x88>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d131      	bne.n	8002a70 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_FSMC_MspInit+0x88>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_FSMC_MspInit+0x8c>)
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <HAL_FSMC_MspInit+0x8c>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6393      	str	r3, [r2, #56]	; 0x38
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_FSMC_MspInit+0x8c>)
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002a2e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8002a32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a40:	230c      	movs	r3, #12
 8002a42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <HAL_FSMC_MspInit+0x90>)
 8002a4a:	f001 fab7 	bl	8003fbc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002a4e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002a52:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a60:	230c      	movs	r3, #12
 8002a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4806      	ldr	r0, [pc, #24]	; (8002a84 <HAL_FSMC_MspInit+0x94>)
 8002a6a:	f001 faa7 	bl	8003fbc <HAL_GPIO_Init>
 8002a6e:	e000      	b.n	8002a72 <HAL_FSMC_MspInit+0x82>
    return;
 8002a70:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000040 	.word	0x20000040
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40020c00 	.word	0x40020c00

08002a88 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002a90:	f7ff ffae 	bl	80029f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 f8fe 	bl	8002ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <TIM2_IRQHandler+0x10>)
 8002af6:	f003 fb3d 	bl	8006174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200002e4 	.word	0x200002e4

08002b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <USART1_IRQHandler+0x10>)
 8002b0a:	f004 fa9d 	bl	8007048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200001e8 	.word	0x200001e8

08002b18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <DMA2_Stream0_IRQHandler+0x10>)
 8002b1e:	f000 ffe3 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2000022c 	.word	0x2000022c

08002b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <SystemInit+0x20>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <SystemInit+0x20>)
 8002b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	4903      	ldr	r1, [pc, #12]	; (8002b64 <uart_init_rs232+0x14>)
 8002b58:	4803      	ldr	r0, [pc, #12]	; (8002b68 <uart_init_rs232+0x18>)
 8002b5a:	f004 fa44 	bl	8006fe6 <HAL_UART_Receive_IT>
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000044 	.word	0x20000044
 8002b68:	200001e8 	.word	0x200001e8

08002b6c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_UART_RxCpltCallback+0x30>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10a      	bne.n	8002b94 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002b7e:	230a      	movs	r3, #10
 8002b80:	2201      	movs	r2, #1
 8002b82:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <HAL_UART_RxCpltCallback+0x34>)
 8002b84:	4807      	ldr	r0, [pc, #28]	; (8002ba4 <HAL_UART_RxCpltCallback+0x38>)
 8002b86:	f004 f99c 	bl	8006ec2 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4904      	ldr	r1, [pc, #16]	; (8002ba0 <HAL_UART_RxCpltCallback+0x34>)
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <HAL_UART_RxCpltCallback+0x38>)
 8002b90:	f004 fa29 	bl	8006fe6 <HAL_UART_Receive_IT>
	}
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40011000 	.word	0x40011000
 8002ba0:	20000044 	.word	0x20000044
 8002ba4:	200001e8 	.word	0x200001e8

08002ba8 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <DEC2BCD+0x44>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	08db      	lsrs	r3, r3, #3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	b258      	sxtb	r0, r3
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <DEC2BCD+0x44>)
 8002bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bca:	08d9      	lsrs	r1, r3, #3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	4303      	orrs	r3, r0
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	cccccccd 	.word	0xcccccccd

08002bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bf4:	480d      	ldr	r0, [pc, #52]	; (8002c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bf6:	490e      	ldr	r1, [pc, #56]	; (8002c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bfc:	e002      	b.n	8002c04 <LoopCopyDataInit>

08002bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c02:	3304      	adds	r3, #4

08002c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c08:	d3f9      	bcc.n	8002bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c0c:	4c0b      	ldr	r4, [pc, #44]	; (8002c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c10:	e001      	b.n	8002c16 <LoopFillZerobss>

08002c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c14:	3204      	adds	r2, #4

08002c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c18:	d3fb      	bcc.n	8002c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c1a:	f7ff ff87 	bl	8002b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f005 f99b 	bl	8007f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c22:	f7fe fe51 	bl	80018c8 <main>
  bx  lr    
 8002c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c30:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002c34:	0800afc0 	.word	0x0800afc0
  ldr r2, =_sbss
 8002c38:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002c3c:	2000033c 	.word	0x2000033c

08002c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c40:	e7fe      	b.n	8002c40 <ADC_IRQHandler>
	...

08002c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <HAL_Init+0x40>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <HAL_Init+0x40>)
 8002c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_Init+0x40>)
 8002c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_Init+0x40>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_Init+0x40>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c6c:	2003      	movs	r0, #3
 8002c6e:	f000 fd61 	bl	8003734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c72:	200f      	movs	r0, #15
 8002c74:	f000 f808 	bl	8002c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c78:	f7ff fca8 	bl	80025cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00

08002c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_InitTick+0x54>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_InitTick+0x58>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fd79 	bl	800379e <HAL_SYSTICK_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00e      	b.n	8002cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d80a      	bhi.n	8002cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	f000 fd41 	bl	800374a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc8:	4a06      	ldr	r2, [pc, #24]	; (8002ce4 <HAL_InitTick+0x5c>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000008 	.word	0x20000008
 8002ce0:	20000010 	.word	0x20000010
 8002ce4:	2000000c 	.word	0x2000000c

08002ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_IncTick+0x20>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_IncTick+0x24>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_IncTick+0x24>)
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000010 	.word	0x20000010
 8002d0c:	20000338 	.word	0x20000338

08002d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return uwTick;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_GetTick+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000338 	.word	0x20000338

08002d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d30:	f7ff ffee 	bl	8002d10 <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d005      	beq.n	8002d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_Delay+0x44>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d4e:	bf00      	nop
 8002d50:	f7ff ffde 	bl	8002d10 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d8f7      	bhi.n	8002d50 <HAL_Delay+0x28>
  {
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000010 	.word	0x20000010

08002d70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e033      	b.n	8002dee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fc44 	bl	800261c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d118      	bne.n	8002de0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db6:	f023 0302 	bic.w	r3, r3, #2
 8002dba:	f043 0202 	orr.w	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa68 	bl	8003298 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8002dde:	e001      	b.n	8002de4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Start_DMA+0x1e>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0e9      	b.n	8002fea <HAL_ADC_Start_DMA+0x1f2>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d018      	beq.n	8002e5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e3c:	4b6d      	ldr	r3, [pc, #436]	; (8002ff4 <HAL_ADC_Start_DMA+0x1fc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6d      	ldr	r2, [pc, #436]	; (8002ff8 <HAL_ADC_Start_DMA+0x200>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0c9a      	lsrs	r2, r3, #18
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e50:	e002      	b.n	8002e58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f9      	bne.n	8002e52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6c:	d107      	bne.n	8002e7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	f040 80a1 	bne.w	8002fd0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	d106      	bne.n	8002edc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f023 0206 	bic.w	r2, r3, #6
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
 8002eda:	e002      	b.n	8002ee2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <HAL_ADC_Start_DMA+0x204>)
 8002eec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	4a43      	ldr	r2, [pc, #268]	; (8003000 <HAL_ADC_Start_DMA+0x208>)
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4a42      	ldr	r2, [pc, #264]	; (8003004 <HAL_ADC_Start_DMA+0x20c>)
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a41      	ldr	r2, [pc, #260]	; (8003008 <HAL_ADC_Start_DMA+0x210>)
 8002f04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	334c      	adds	r3, #76	; 0x4c
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f000 fce8 	bl	8003914 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d12a      	bne.n	8002fa6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2d      	ldr	r2, [pc, #180]	; (800300c <HAL_ADC_Start_DMA+0x214>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d015      	beq.n	8002f86 <HAL_ADC_Start_DMA+0x18e>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2c      	ldr	r2, [pc, #176]	; (8003010 <HAL_ADC_Start_DMA+0x218>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x178>
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_ADC_Start_DMA+0x204>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a27      	ldr	r2, [pc, #156]	; (8003014 <HAL_ADC_Start_DMA+0x21c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d136      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0x1f0>
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_ADC_Start_DMA+0x204>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d130      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d129      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e020      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_ADC_Start_DMA+0x214>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d11b      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0x1f0>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d114      	bne.n	8002fe8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	e00b      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000008 	.word	0x20000008
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	40012300 	.word	0x40012300
 8003000:	08003491 	.word	0x08003491
 8003004:	0800354b 	.word	0x0800354b
 8003008:	08003567 	.word	0x08003567
 800300c:	40012000 	.word	0x40012000
 8003010:	40012100 	.word	0x40012100
 8003014:	40012200 	.word	0x40012200

08003018 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1c>
 800306c:	2302      	movs	r3, #2
 800306e:	e105      	b.n	800327c <HAL_ADC_ConfigChannel+0x228>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b09      	cmp	r3, #9
 800307e:	d925      	bls.n	80030cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68d9      	ldr	r1, [r3, #12]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	3b1e      	subs	r3, #30
 8003096:	2207      	movs	r2, #7
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43da      	mvns	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	400a      	ands	r2, r1
 80030a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68d9      	ldr	r1, [r3, #12]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	4603      	mov	r3, r0
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4403      	add	r3, r0
 80030be:	3b1e      	subs	r3, #30
 80030c0:	409a      	lsls	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	e022      	b.n	8003112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	2207      	movs	r2, #7
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	400a      	ands	r2, r1
 80030ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6919      	ldr	r1, [r3, #16]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	4603      	mov	r3, r0
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4403      	add	r3, r0
 8003108:	409a      	lsls	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b06      	cmp	r3, #6
 8003118:	d824      	bhi.n	8003164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b05      	subs	r3, #5
 800312c:	221f      	movs	r2, #31
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	400a      	ands	r2, r1
 800313a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	4618      	mov	r0, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	3b05      	subs	r3, #5
 8003156:	fa00 f203 	lsl.w	r2, r0, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
 8003162:	e04c      	b.n	80031fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d824      	bhi.n	80031b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	3b23      	subs	r3, #35	; 0x23
 800317e:	221f      	movs	r2, #31
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43da      	mvns	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	400a      	ands	r2, r1
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	4618      	mov	r0, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3b23      	subs	r3, #35	; 0x23
 80031a8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
 80031b4:	e023      	b.n	80031fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	3b41      	subs	r3, #65	; 0x41
 80031c8:	221f      	movs	r2, #31
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	400a      	ands	r2, r1
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	3b41      	subs	r3, #65	; 0x41
 80031f2:	fa00 f203 	lsl.w	r2, r0, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_ADC_ConfigChannel+0x234>)
 8003200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_ADC_ConfigChannel+0x238>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d109      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1cc>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b12      	cmp	r3, #18
 8003212:	d105      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_ADC_ConfigChannel+0x238>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d123      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x21e>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b10      	cmp	r3, #16
 8003230:	d003      	beq.n	800323a <HAL_ADC_ConfigChannel+0x1e6>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b11      	cmp	r3, #17
 8003238:	d11b      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b10      	cmp	r3, #16
 800324c:	d111      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_ADC_ConfigChannel+0x23c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_ADC_ConfigChannel+0x240>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	0c9a      	lsrs	r2, r3, #18
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003264:	e002      	b.n	800326c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3b01      	subs	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f9      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40012300 	.word	0x40012300
 800328c:	40012000 	.word	0x40012000
 8003290:	20000008 	.word	0x20000008
 8003294:	431bde83 	.word	0x431bde83

08003298 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032a0:	4b79      	ldr	r3, [pc, #484]	; (8003488 <ADC_Init+0x1f0>)
 80032a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	021a      	lsls	r2, r3, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6899      	ldr	r1, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	4a58      	ldr	r2, [pc, #352]	; (800348c <ADC_Init+0x1f4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d022      	beq.n	8003376 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800333e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	e00f      	b.n	8003396 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003394:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0202 	bic.w	r2, r2, #2
 80033a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
 80033b0:	005a      	lsls	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	3b01      	subs	r3, #1
 80033f0:	035a      	lsls	r2, r3, #13
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	e007      	b.n	800340c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	3b01      	subs	r3, #1
 8003428:	051a      	lsls	r2, r3, #20
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800344e:	025a      	lsls	r2, r3, #9
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6899      	ldr	r1, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	029a      	lsls	r2, r3, #10
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012300 	.word	0x40012300
 800348c:	0f000001 	.word	0x0f000001

08003490 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d13c      	bne.n	8003524 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d12b      	bne.n	800351c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d127      	bne.n	800351c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d119      	bne.n	800351c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0220 	bic.w	r2, r2, #32
 80034f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fd7b 	bl	8003018 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003522:	e00e      	b.n	8003542 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fd85 	bl	8003040 <HAL_ADC_ErrorCallback>
}
 8003536:	e004      	b.n	8003542 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff fd67 	bl	800302c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0204 	orr.w	r2, r3, #4
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff fd5a 	bl	8003040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db0b      	blt.n	8003622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4907      	ldr	r1, [pc, #28]	; (8003630 <__NVIC_EnableIRQ+0x38>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2001      	movs	r0, #1
 800361a:	fa00 f202 	lsl.w	r2, r0, r2
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	db0a      	blt.n	800365e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	490c      	ldr	r1, [pc, #48]	; (8003680 <__NVIC_SetPriority+0x4c>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	440b      	add	r3, r1
 8003658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800365c:	e00a      	b.n	8003674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4908      	ldr	r1, [pc, #32]	; (8003684 <__NVIC_SetPriority+0x50>)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	3b04      	subs	r3, #4
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	440b      	add	r3, r1
 8003672:	761a      	strb	r2, [r3, #24]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000e100 	.word	0xe000e100
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	bf28      	it	cs
 80036a6:	2304      	movcs	r3, #4
 80036a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d902      	bls.n	80036b8 <NVIC_EncodePriority+0x30>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3b03      	subs	r3, #3
 80036b6:	e000      	b.n	80036ba <NVIC_EncodePriority+0x32>
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	401a      	ands	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43d9      	mvns	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	4313      	orrs	r3, r2
         );
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3724      	adds	r7, #36	; 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003700:	d301      	bcc.n	8003706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <SysTick_Config+0x40>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370e:	210f      	movs	r1, #15
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f7ff ff8e 	bl	8003634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <SysTick_Config+0x40>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <SysTick_Config+0x40>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	e000e010 	.word	0xe000e010

08003734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff29 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff3e 	bl	80035dc <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff8e 	bl	8003688 <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5d 	bl	8003634 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff31 	bl	80035f8 <__NVIC_EnableIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffa2 	bl	80036f0 <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff faa4 	bl	8002d10 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e099      	b.n	8003908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f4:	e00f      	b.n	8003816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037f6:	f7ff fa8b 	bl	8002d10 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b05      	cmp	r3, #5
 8003802:	d908      	bls.n	8003816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2203      	movs	r2, #3
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e078      	b.n	8003908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e8      	bne.n	80037f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4b38      	ldr	r3, [pc, #224]	; (8003910 <HAL_DMA_Init+0x158>)
 8003830:	4013      	ands	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	2b04      	cmp	r3, #4
 800386e:	d107      	bne.n	8003880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4313      	orrs	r3, r2
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d117      	bne.n	80038da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb01 	bl	8003ec4 <DMA_CheckFifoParam>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038d6:	2301      	movs	r3, #1
 80038d8:	e016      	b.n	8003908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fab8 	bl	8003e58 <DMA_CalcBaseAndBitshift>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	223f      	movs	r2, #63	; 0x3f
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	f010803f 	.word	0xf010803f

08003914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_DMA_Start_IT+0x26>
 8003936:	2302      	movs	r3, #2
 8003938:	e040      	b.n	80039bc <HAL_DMA_Start_IT+0xa8>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d12f      	bne.n	80039ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa4a 	bl	8003dfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	223f      	movs	r2, #63	; 0x3f
 800396e:	409a      	lsls	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0216 	orr.w	r2, r2, #22
 8003982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0208 	orr.w	r2, r2, #8
 800399a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e005      	b.n	80039ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
 80039b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039d2:	f7ff f99d 	bl	8002d10 <HAL_GetTick>
 80039d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2280      	movs	r2, #128	; 0x80
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e052      	b.n	8003a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0216 	bic.w	r2, r2, #22
 8003a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <HAL_DMA_Abort+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0208 	bic.w	r2, r2, #8
 8003a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	e013      	b.n	8003a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a48:	f7ff f962 	bl	8002d10 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d90c      	bls.n	8003a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e015      	b.n	8003a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e4      	bne.n	8003a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	223f      	movs	r2, #63	; 0x3f
 8003a84:	409a      	lsls	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00c      	b.n	8003adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af4:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <HAL_DMA_IRQHandler+0x258>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a92      	ldr	r2, [pc, #584]	; (8003d44 <HAL_DMA_IRQHandler+0x25c>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0a9b      	lsrs	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2208      	movs	r2, #8
 8003b14:	409a      	lsls	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01a      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2208      	movs	r2, #8
 8003b42:	409a      	lsls	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	2201      	movs	r2, #1
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f043 0202 	orr.w	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2204      	movs	r2, #4
 8003b90:	409a      	lsls	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d012      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	2204      	movs	r2, #4
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f043 0204 	orr.w	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d043      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d03c      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	2210      	movs	r2, #16
 8003be4:	409a      	lsls	r2, r3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d018      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d024      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e01f      	b.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01b      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e016      	b.n	8003c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0208 	bic.w	r2, r2, #8
 8003c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 808e 	beq.w	8003d86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8086 	beq.w	8003d86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	2220      	movs	r2, #32
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d136      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0216 	bic.w	r2, r2, #22
 8003ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_DMA_IRQHandler+0x1da>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0208 	bic.w	r2, r2, #8
 8003cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	223f      	movs	r2, #63	; 0x3f
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d07d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
        }
        return;
 8003cfe:	e078      	b.n	8003df2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d030      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
 8003d2c:	e02b      	b.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d027      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e022      	b.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
 8003d40:	20000008 	.word	0x20000008
 8003d44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0210 	bic.w	r2, r2, #16
 8003d64:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d032      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d307      	bcc.n	8003dce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f2      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x2ca>
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
 8003df0:	e000      	b.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003df2:	bf00      	nop
    }
  }
}
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop

08003dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d108      	bne.n	8003e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e3a:	e007      	b.n	8003e4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	3b10      	subs	r3, #16
 8003e68:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <DMA_CalcBaseAndBitshift+0x64>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e72:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d909      	bls.n	8003e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	1d1a      	adds	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58
 8003e98:	e007      	b.n	8003eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	aaaaaaab 	.word	0xaaaaaaab
 8003ec0:	0800afa8 	.word	0x0800afa8

08003ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d11f      	bne.n	8003f1e <DMA_CheckFifoParam+0x5a>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d856      	bhi.n	8003f92 <DMA_CheckFifoParam+0xce>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <DMA_CheckFifoParam+0x28>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003efd 	.word	0x08003efd
 8003ef0:	08003f0f 	.word	0x08003f0f
 8003ef4:	08003efd 	.word	0x08003efd
 8003ef8:	08003f93 	.word	0x08003f93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d046      	beq.n	8003f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e043      	b.n	8003f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f16:	d140      	bne.n	8003f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1c:	e03d      	b.n	8003f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d121      	bne.n	8003f6c <DMA_CheckFifoParam+0xa8>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d837      	bhi.n	8003f9e <DMA_CheckFifoParam+0xda>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <DMA_CheckFifoParam+0x70>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f4b 	.word	0x08003f4b
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	08003f5d 	.word	0x08003f5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e030      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d025      	beq.n	8003fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5a:	e022      	b.n	8003fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f64:	d11f      	bne.n	8003fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f6a:	e01c      	b.n	8003fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d903      	bls.n	8003f7a <DMA_CheckFifoParam+0xb6>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d003      	beq.n	8003f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f78:	e018      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7e:	e015      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e00b      	b.n	8003faa <DMA_CheckFifoParam+0xe6>
      break;
 8003f92:	bf00      	nop
 8003f94:	e00a      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e008      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e006      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e004      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;   
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
    }
  } 
  
  return status; 
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop

08003fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e16b      	b.n	80042b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f040 815a 	bne.w	80042aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d005      	beq.n	800400e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400a:	2b02      	cmp	r3, #2
 800400c:	d130      	bne.n	8004070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004044:	2201      	movs	r2, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 0201 	and.w	r2, r3, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b03      	cmp	r3, #3
 800407a:	d017      	beq.n	80040ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d123      	bne.n	8004100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	220f      	movs	r2, #15
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80b4 	beq.w	80042aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b60      	ldr	r3, [pc, #384]	; (80042c8 <HAL_GPIO_Init+0x30c>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	4a5f      	ldr	r2, [pc, #380]	; (80042c8 <HAL_GPIO_Init+0x30c>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004150:	6453      	str	r3, [r2, #68]	; 0x44
 8004152:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <HAL_GPIO_Init+0x30c>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800415e:	4a5b      	ldr	r2, [pc, #364]	; (80042cc <HAL_GPIO_Init+0x310>)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	3302      	adds	r3, #2
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a52      	ldr	r2, [pc, #328]	; (80042d0 <HAL_GPIO_Init+0x314>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02b      	beq.n	80041e2 <HAL_GPIO_Init+0x226>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a51      	ldr	r2, [pc, #324]	; (80042d4 <HAL_GPIO_Init+0x318>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d025      	beq.n	80041de <HAL_GPIO_Init+0x222>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a50      	ldr	r2, [pc, #320]	; (80042d8 <HAL_GPIO_Init+0x31c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01f      	beq.n	80041da <HAL_GPIO_Init+0x21e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4f      	ldr	r2, [pc, #316]	; (80042dc <HAL_GPIO_Init+0x320>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d019      	beq.n	80041d6 <HAL_GPIO_Init+0x21a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4e      	ldr	r2, [pc, #312]	; (80042e0 <HAL_GPIO_Init+0x324>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_GPIO_Init+0x216>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4d      	ldr	r2, [pc, #308]	; (80042e4 <HAL_GPIO_Init+0x328>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00d      	beq.n	80041ce <HAL_GPIO_Init+0x212>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4c      	ldr	r2, [pc, #304]	; (80042e8 <HAL_GPIO_Init+0x32c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <HAL_GPIO_Init+0x20e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4b      	ldr	r2, [pc, #300]	; (80042ec <HAL_GPIO_Init+0x330>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_GPIO_Init+0x20a>
 80041c2:	2307      	movs	r3, #7
 80041c4:	e00e      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041c6:	2308      	movs	r3, #8
 80041c8:	e00c      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041ca:	2306      	movs	r3, #6
 80041cc:	e00a      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041ce:	2305      	movs	r3, #5
 80041d0:	e008      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041d2:	2304      	movs	r3, #4
 80041d4:	e006      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041d6:	2303      	movs	r3, #3
 80041d8:	e004      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041da:	2302      	movs	r3, #2
 80041dc:	e002      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041e2:	2300      	movs	r3, #0
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f002 0203 	and.w	r2, r2, #3
 80041ea:	0092      	lsls	r2, r2, #2
 80041ec:	4093      	lsls	r3, r2
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f4:	4935      	ldr	r1, [pc, #212]	; (80042cc <HAL_GPIO_Init+0x310>)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_GPIO_Init+0x334>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004226:	4a32      	ldr	r2, [pc, #200]	; (80042f0 <HAL_GPIO_Init+0x334>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_GPIO_Init+0x334>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004250:	4a27      	ldr	r2, [pc, #156]	; (80042f0 <HAL_GPIO_Init+0x334>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <HAL_GPIO_Init+0x334>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800427a:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_GPIO_Init+0x334>)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_GPIO_Init+0x334>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042a4:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <HAL_GPIO_Init+0x334>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	f67f ae90 	bls.w	8003fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40013800 	.word	0x40013800
 80042d0:	40020000 	.word	0x40020000
 80042d4:	40020400 	.word	0x40020400
 80042d8:	40020800 	.word	0x40020800
 80042dc:	40020c00 	.word	0x40020c00
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40021400 	.word	0x40021400
 80042e8:	40021800 	.word	0x40021800
 80042ec:	40021c00 	.word	0x40021c00
 80042f0:	40013c00 	.word	0x40013c00

080042f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	807b      	strh	r3, [r7, #2]
 8004300:	4613      	mov	r3, r2
 8004302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004304:	787b      	ldrb	r3, [r7, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430a:	887a      	ldrh	r2, [r7, #2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004310:	e003      	b.n	800431a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	041a      	lsls	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	619a      	str	r2, [r3, #24]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004338:	887a      	ldrh	r2, [r7, #2]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4013      	ands	r3, r2
 800433e:	041a      	lsls	r2, r3, #16
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43d9      	mvns	r1, r3
 8004344:	887b      	ldrh	r3, [r7, #2]
 8004346:	400b      	ands	r3, r1
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	619a      	str	r2, [r3, #24]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e12b      	b.n	80045c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fe f9de 	bl	8002744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043c0:	f000 fee2 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 80043c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4a81      	ldr	r2, [pc, #516]	; (80045d0 <HAL_I2C_Init+0x274>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d807      	bhi.n	80043e0 <HAL_I2C_Init+0x84>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a80      	ldr	r2, [pc, #512]	; (80045d4 <HAL_I2C_Init+0x278>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e006      	b.n	80043ee <HAL_I2C_Init+0x92>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a7d      	ldr	r2, [pc, #500]	; (80045d8 <HAL_I2C_Init+0x27c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bf94      	ite	ls
 80043e8:	2301      	movls	r3, #1
 80043ea:	2300      	movhi	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e0e7      	b.n	80045c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a78      	ldr	r2, [pc, #480]	; (80045dc <HAL_I2C_Init+0x280>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	0c9b      	lsrs	r3, r3, #18
 8004400:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a6a      	ldr	r2, [pc, #424]	; (80045d0 <HAL_I2C_Init+0x274>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d802      	bhi.n	8004430 <HAL_I2C_Init+0xd4>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3301      	adds	r3, #1
 800442e:	e009      	b.n	8004444 <HAL_I2C_Init+0xe8>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	4a69      	ldr	r2, [pc, #420]	; (80045e0 <HAL_I2C_Init+0x284>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	3301      	adds	r3, #1
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	430b      	orrs	r3, r1
 800444a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004456:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	495c      	ldr	r1, [pc, #368]	; (80045d0 <HAL_I2C_Init+0x274>)
 8004460:	428b      	cmp	r3, r1
 8004462:	d819      	bhi.n	8004498 <HAL_I2C_Init+0x13c>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e59      	subs	r1, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004478:	400b      	ands	r3, r1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_I2C_Init+0x138>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1e59      	subs	r1, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fbb1 f3f3 	udiv	r3, r1, r3
 800448c:	3301      	adds	r3, #1
 800448e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004492:	e051      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 8004494:	2304      	movs	r3, #4
 8004496:	e04f      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <HAL_I2C_Init+0x168>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1e58      	subs	r0, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	440b      	add	r3, r1
 80044ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b2:	3301      	adds	r3, #1
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e012      	b.n	80044ea <HAL_I2C_Init+0x18e>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1e58      	subs	r0, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	0099      	lsls	r1, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_I2C_Init+0x196>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e022      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10e      	bne.n	8004518 <HAL_I2C_Init+0x1bc>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1e58      	subs	r0, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6859      	ldr	r1, [r3, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	440b      	add	r3, r1
 8004508:	fbb0 f3f3 	udiv	r3, r0, r3
 800450c:	3301      	adds	r3, #1
 800450e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004516:	e00f      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1e58      	subs	r0, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	0099      	lsls	r1, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	fbb0 f3f3 	udiv	r3, r0, r3
 800452e:	3301      	adds	r3, #1
 8004530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	6809      	ldr	r1, [r1, #0]
 800453c:	4313      	orrs	r3, r2
 800453e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6911      	ldr	r1, [r2, #16]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	4311      	orrs	r1, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	000186a0 	.word	0x000186a0
 80045d4:	001e847f 	.word	0x001e847f
 80045d8:	003d08ff 	.word	0x003d08ff
 80045dc:	431bde83 	.word	0x431bde83
 80045e0:	10624dd3 	.word	0x10624dd3

080045e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	460b      	mov	r3, r1
 80045f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80045f4:	f7fe fb8c 	bl	8002d10 <HAL_GetTick>
 80045f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80045fa:	2301      	movs	r3, #1
 80045fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b20      	cmp	r3, #32
 8004608:	f040 8111 	bne.w	800482e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2319      	movs	r3, #25
 8004612:	2201      	movs	r2, #1
 8004614:	4988      	ldr	r1, [pc, #544]	; (8004838 <HAL_I2C_IsDeviceReady+0x254>)
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f912 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
 8004624:	e104      	b.n	8004830 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_I2C_IsDeviceReady+0x50>
 8004630:	2302      	movs	r3, #2
 8004632:	e0fd      	b.n	8004830 <HAL_I2C_IsDeviceReady+0x24c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d007      	beq.n	800465a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2224      	movs	r2, #36	; 0x24
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a70      	ldr	r2, [pc, #448]	; (800483c <HAL_I2C_IsDeviceReady+0x258>)
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2200      	movs	r2, #0
 8004696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8d0 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b4:	d103      	bne.n	80046be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0b6      	b.n	8004830 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046c2:	897b      	ldrh	r3, [r7, #10]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046d2:	f7fe fb1d 	bl	8002d10 <HAL_GetTick>
 80046d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004706:	e025      	b.n	8004754 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004708:	f7fe fb02 	bl	8002d10 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d302      	bcc.n	800471e <HAL_I2C_IsDeviceReady+0x13a>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	22a0      	movs	r2, #160	; 0xa0
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2ba0      	cmp	r3, #160	; 0xa0
 800475e:	d005      	beq.n	800476c <HAL_I2C_IsDeviceReady+0x188>
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d102      	bne.n	800476c <HAL_I2C_IsDeviceReady+0x188>
 8004766:	7dbb      	ldrb	r3, [r7, #22]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0cd      	beq.n	8004708 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d129      	bne.n	80047d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2319      	movs	r3, #25
 80047ae:	2201      	movs	r2, #1
 80047b0:	4921      	ldr	r1, [pc, #132]	; (8004838 <HAL_I2C_IsDeviceReady+0x254>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f844 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e036      	b.n	8004830 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e02c      	b.n	8004830 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2319      	movs	r3, #25
 80047f6:	2201      	movs	r2, #1
 80047f8:	490f      	ldr	r1, [pc, #60]	; (8004838 <HAL_I2C_IsDeviceReady+0x254>)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f820 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e012      	b.n	8004830 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	3301      	adds	r3, #1
 800480e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	f4ff af32 	bcc.w	800467e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3720      	adds	r7, #32
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00100002 	.word	0x00100002
 800483c:	ffff0000 	.word	0xffff0000

08004840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004850:	e025      	b.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d021      	beq.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fe fa59 	bl	8002d10 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e023      	b.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10d      	bne.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	e00c      	b.n	80048de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	43da      	mvns	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d0b6      	beq.n	8004852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e264      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d075      	beq.n	80049fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800490e:	4ba3      	ldr	r3, [pc, #652]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b04      	cmp	r3, #4
 8004918:	d00c      	beq.n	8004934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491a:	4ba0      	ldr	r3, [pc, #640]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004922:	2b08      	cmp	r3, #8
 8004924:	d112      	bne.n	800494c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4b9d      	ldr	r3, [pc, #628]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004932:	d10b      	bne.n	800494c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	4b99      	ldr	r3, [pc, #612]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d05b      	beq.n	80049f8 <HAL_RCC_OscConfig+0x108>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d157      	bne.n	80049f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e23f      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d106      	bne.n	8004964 <HAL_RCC_OscConfig+0x74>
 8004956:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a90      	ldr	r2, [pc, #576]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e01d      	b.n	80049a0 <HAL_RCC_OscConfig+0xb0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800496c:	d10c      	bne.n	8004988 <HAL_RCC_OscConfig+0x98>
 800496e:	4b8b      	ldr	r3, [pc, #556]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a8a      	ldr	r2, [pc, #552]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a87      	ldr	r2, [pc, #540]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e00b      	b.n	80049a0 <HAL_RCC_OscConfig+0xb0>
 8004988:	4b84      	ldr	r3, [pc, #528]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a83      	ldr	r2, [pc, #524]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 800498e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b81      	ldr	r3, [pc, #516]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a80      	ldr	r2, [pc, #512]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 800499a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d013      	beq.n	80049d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fe f9b2 	bl	8002d10 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fe f9ae 	bl	8002d10 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e204      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	4b76      	ldr	r3, [pc, #472]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0xc0>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fe f99e 	bl	8002d10 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fe f99a 	bl	8002d10 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1f0      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ea:	4b6c      	ldr	r3, [pc, #432]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0xe8>
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d063      	beq.n	8004ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a06:	4b65      	ldr	r3, [pc, #404]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a12:	4b62      	ldr	r3, [pc, #392]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d11c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d116      	bne.n	8004a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2a:	4b5c      	ldr	r3, [pc, #368]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_RCC_OscConfig+0x152>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e1c4      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a42:	4b56      	ldr	r3, [pc, #344]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4952      	ldr	r1, [pc, #328]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a56:	e03a      	b.n	8004ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a60:	4b4f      	ldr	r3, [pc, #316]	; (8004ba0 <HAL_RCC_OscConfig+0x2b0>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fe f953 	bl	8002d10 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6e:	f7fe f94f 	bl	8002d10 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e1a5      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a80:	4b46      	ldr	r3, [pc, #280]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8c:	4b43      	ldr	r3, [pc, #268]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4940      	ldr	r1, [pc, #256]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]
 8004aa0:	e015      	b.n	8004ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa2:	4b3f      	ldr	r3, [pc, #252]	; (8004ba0 <HAL_RCC_OscConfig+0x2b0>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fe f932 	bl	8002d10 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab0:	f7fe f92e 	bl	8002d10 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e184      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac2:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d030      	beq.n	8004b3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d016      	beq.n	8004b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae2:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <HAL_RCC_OscConfig+0x2b4>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fe f912 	bl	8002d10 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af0:	f7fe f90e 	bl	8002d10 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e164      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b02:	4b26      	ldr	r3, [pc, #152]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x200>
 8004b0e:	e015      	b.n	8004b3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <HAL_RCC_OscConfig+0x2b4>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b16:	f7fe f8fb 	bl	8002d10 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fe f8f7 	bl	8002d10 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e14d      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80a0 	beq.w	8004c8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b68:	6413      	str	r3, [r2, #64]	; 0x40
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCC_OscConfig+0x2b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d121      	bne.n	8004bca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <HAL_RCC_OscConfig+0x2b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <HAL_RCC_OscConfig+0x2b8>)
 8004b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b92:	f7fe f8bd 	bl	8002d10 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	e011      	b.n	8004bbe <HAL_RCC_OscConfig+0x2ce>
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	42470000 	.word	0x42470000
 8004ba4:	42470e80 	.word	0x42470e80
 8004ba8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bac:	f7fe f8b0 	bl	8002d10 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e106      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbe:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <HAL_RCC_OscConfig+0x4e4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x2f0>
 8004bd2:	4b81      	ldr	r3, [pc, #516]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a80      	ldr	r2, [pc, #512]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bde:	e01c      	b.n	8004c1a <HAL_RCC_OscConfig+0x32a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	d10c      	bne.n	8004c02 <HAL_RCC_OscConfig+0x312>
 8004be8:	4b7b      	ldr	r3, [pc, #492]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4a7a      	ldr	r2, [pc, #488]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf4:	4b78      	ldr	r3, [pc, #480]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a77      	ldr	r2, [pc, #476]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	e00b      	b.n	8004c1a <HAL_RCC_OscConfig+0x32a>
 8004c02:	4b75      	ldr	r3, [pc, #468]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a74      	ldr	r2, [pc, #464]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0e:	4b72      	ldr	r3, [pc, #456]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a71      	ldr	r2, [pc, #452]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c14:	f023 0304 	bic.w	r3, r3, #4
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d015      	beq.n	8004c4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fe f875 	bl	8002d10 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fe f871 	bl	8002d10 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0c5      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	4b65      	ldr	r3, [pc, #404]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ee      	beq.n	8004c2a <HAL_RCC_OscConfig+0x33a>
 8004c4c:	e014      	b.n	8004c78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4e:	f7fe f85f 	bl	8002d10 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fe f85b 	bl	8002d10 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e0af      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ee      	bne.n	8004c56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d105      	bne.n	8004c8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7e:	4b56      	ldr	r3, [pc, #344]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	4a55      	ldr	r2, [pc, #340]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 809b 	beq.w	8004dca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c94:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d05c      	beq.n	8004d5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d141      	bne.n	8004d2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	4b4c      	ldr	r3, [pc, #304]	; (8004ddc <HAL_RCC_OscConfig+0x4ec>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fe f82f 	bl	8002d10 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fe f82b 	bl	8002d10 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e081      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc8:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	019b      	lsls	r3, r3, #6
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	3b01      	subs	r3, #1
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	4937      	ldr	r1, [pc, #220]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cfe:	4b37      	ldr	r3, [pc, #220]	; (8004ddc <HAL_RCC_OscConfig+0x4ec>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fe f804 	bl	8002d10 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fe f800 	bl	8002d10 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e056      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b2e      	ldr	r3, [pc, #184]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x41c>
 8004d2a:	e04e      	b.n	8004dca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_RCC_OscConfig+0x4ec>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fd ffed 	bl	8002d10 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fd ffe9 	bl	8002d10 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e03f      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4c:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x44a>
 8004d58:	e037      	b.n	8004dca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e032      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d66:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <HAL_RCC_OscConfig+0x4e8>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d028      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d121      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d11a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d96:	4013      	ands	r3, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d111      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	3b01      	subs	r3, #1
 8004db0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40007000 	.word	0x40007000
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	42470060 	.word	0x42470060

08004de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0cc      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b68      	ldr	r3, [pc, #416]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d90c      	bls.n	8004e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b65      	ldr	r3, [pc, #404]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b63      	ldr	r3, [pc, #396]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0b8      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d020      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e34:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a58      	ldr	r2, [pc, #352]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e4c:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a52      	ldr	r2, [pc, #328]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e58:	4b50      	ldr	r3, [pc, #320]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	494d      	ldr	r1, [pc, #308]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d044      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d119      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e07f      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	4b3f      	ldr	r3, [pc, #252]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e06f      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eae:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e067      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4934      	ldr	r1, [pc, #208]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ed0:	f7fd ff1e 	bl	8002d10 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fd ff1a 	bl	8002d10 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e04f      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 020c 	and.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d1eb      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f00:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d20c      	bcs.n	8004f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f16:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <HAL_RCC_ClockConfig+0x1b8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e032      	b.n	8004f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4916      	ldr	r1, [pc, #88]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	490e      	ldr	r1, [pc, #56]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f66:	f000 f821 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	490a      	ldr	r1, [pc, #40]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f78:	5ccb      	ldrb	r3, [r1, r3]
 8004f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fd fe7e 	bl	8002c88 <HAL_InitTick>

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40023c00 	.word	0x40023c00
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	0800af90 	.word	0x0800af90
 8004fa4:	20000008 	.word	0x20000008
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fc4:	4b67      	ldr	r3, [pc, #412]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 030c 	and.w	r3, r3, #12
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d00d      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x40>
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	f200 80bd 	bhi.w	8005150 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fde:	e0b7      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe0:	4b61      	ldr	r3, [pc, #388]	; (8005168 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fe2:	60bb      	str	r3, [r7, #8]
       break;
 8004fe4:	e0b7      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fe6:	4b61      	ldr	r3, [pc, #388]	; (800516c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004fe8:	60bb      	str	r3, [r7, #8]
      break;
 8004fea:	e0b4      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fec:	4b5d      	ldr	r3, [pc, #372]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ff6:	4b5b      	ldr	r3, [pc, #364]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04d      	beq.n	800509e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005002:	4b58      	ldr	r3, [pc, #352]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	099b      	lsrs	r3, r3, #6
 8005008:	461a      	mov	r2, r3
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005012:	f04f 0100 	mov.w	r1, #0
 8005016:	ea02 0800 	and.w	r8, r2, r0
 800501a:	ea03 0901 	and.w	r9, r3, r1
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	014b      	lsls	r3, r1, #5
 800502c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005030:	0142      	lsls	r2, r0, #5
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	ebb0 0008 	subs.w	r0, r0, r8
 800503a:	eb61 0109 	sbc.w	r1, r1, r9
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	018b      	lsls	r3, r1, #6
 8005048:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800504c:	0182      	lsls	r2, r0, #6
 800504e:	1a12      	subs	r2, r2, r0
 8005050:	eb63 0301 	sbc.w	r3, r3, r1
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	00d9      	lsls	r1, r3, #3
 800505e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005062:	00d0      	lsls	r0, r2, #3
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	eb12 0208 	adds.w	r2, r2, r8
 800506c:	eb43 0309 	adc.w	r3, r3, r9
 8005070:	f04f 0000 	mov.w	r0, #0
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	0259      	lsls	r1, r3, #9
 800507a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800507e:	0250      	lsls	r0, r2, #9
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4610      	mov	r0, r2
 8005086:	4619      	mov	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	461a      	mov	r2, r3
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	f7fb fcb8 	bl	8000a04 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4613      	mov	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e04a      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509e:	4b31      	ldr	r3, [pc, #196]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	099b      	lsrs	r3, r3, #6
 80050a4:	461a      	mov	r2, r3
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050ae:	f04f 0100 	mov.w	r1, #0
 80050b2:	ea02 0400 	and.w	r4, r2, r0
 80050b6:	ea03 0501 	and.w	r5, r3, r1
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	014b      	lsls	r3, r1, #5
 80050c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050cc:	0142      	lsls	r2, r0, #5
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	1b00      	subs	r0, r0, r4
 80050d4:	eb61 0105 	sbc.w	r1, r1, r5
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	018b      	lsls	r3, r1, #6
 80050e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050e6:	0182      	lsls	r2, r0, #6
 80050e8:	1a12      	subs	r2, r2, r0
 80050ea:	eb63 0301 	sbc.w	r3, r3, r1
 80050ee:	f04f 0000 	mov.w	r0, #0
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	00d9      	lsls	r1, r3, #3
 80050f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050fc:	00d0      	lsls	r0, r2, #3
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	1912      	adds	r2, r2, r4
 8005104:	eb45 0303 	adc.w	r3, r5, r3
 8005108:	f04f 0000 	mov.w	r0, #0
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	0299      	lsls	r1, r3, #10
 8005112:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005116:	0290      	lsls	r0, r2, #10
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	461a      	mov	r2, r3
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f7fb fc6c 	bl	8000a04 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4613      	mov	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	60bb      	str	r3, [r7, #8]
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005152:	60bb      	str	r3, [r7, #8]
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	68bb      	ldr	r3, [r7, #8]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005162:	bf00      	nop
 8005164:	40023800 	.word	0x40023800
 8005168:	00f42400 	.word	0x00f42400
 800516c:	007a1200 	.word	0x007a1200

08005170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <HAL_RCC_GetHCLKFreq+0x14>)
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008

08005188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800518c:	f7ff fff0 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	4903      	ldr	r1, [pc, #12]	; (80051ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40023800 	.word	0x40023800
 80051ac:	0800afa0 	.word	0x0800afa0

080051b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051b4:	f7ff ffdc 	bl	8005170 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0b5b      	lsrs	r3, r3, #13
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	; (80051d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	0800afa0 	.word	0x0800afa0

080051d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e07b      	b.n	80052e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d108      	bne.n	8005204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d009      	beq.n	8005210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	61da      	str	r2, [r3, #28]
 8005202:	e005      	b.n	8005210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fd fad2 	bl	80027d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005246:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	ea42 0103 	orr.w	r1, r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	f003 0104 	and.w	r1, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0210 	and.w	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b088      	sub	sp, #32
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	603b      	str	r3, [r7, #0]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_SPI_Transmit+0x22>
 8005308:	2302      	movs	r3, #2
 800530a:	e126      	b.n	800555a <HAL_SPI_Transmit+0x270>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005314:	f7fd fcfc 	bl	8002d10 <HAL_GetTick>
 8005318:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d002      	beq.n	8005330 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800532a:	2302      	movs	r3, #2
 800532c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800532e:	e10b      	b.n	8005548 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_SPI_Transmit+0x52>
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005340:	e102      	b.n	8005548 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005388:	d10f      	bne.n	80053aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005398:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d007      	beq.n	80053c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d0:	d14b      	bne.n	800546a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Transmit+0xf6>
 80053da:	8afb      	ldrh	r3, [r7, #22]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d13e      	bne.n	800545e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	1c9a      	adds	r2, r3, #2
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005404:	e02b      	b.n	800545e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d112      	bne.n	800543a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	881a      	ldrh	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	86da      	strh	r2, [r3, #54]	; 0x36
 8005438:	e011      	b.n	800545e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543a:	f7fd fc69 	bl	8002d10 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d803      	bhi.n	8005452 <HAL_SPI_Transmit+0x168>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d102      	bne.n	8005458 <HAL_SPI_Transmit+0x16e>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800545c:	e074      	b.n	8005548 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1ce      	bne.n	8005406 <HAL_SPI_Transmit+0x11c>
 8005468:	e04c      	b.n	8005504 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_SPI_Transmit+0x18e>
 8005472:	8afb      	ldrh	r3, [r7, #22]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d140      	bne.n	80054fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800549e:	e02c      	b.n	80054fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d113      	bne.n	80054d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	7812      	ldrb	r2, [r2, #0]
 80054ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80054d4:	e011      	b.n	80054fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d6:	f7fd fc1b 	bl	8002d10 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d803      	bhi.n	80054ee <HAL_SPI_Transmit+0x204>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d102      	bne.n	80054f4 <HAL_SPI_Transmit+0x20a>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054f8:	e026      	b.n	8005548 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1cd      	bne.n	80054a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fbcb 	bl	8005ca4 <SPI_EndRxTxTransaction>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e000      	b.n	8005548 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005546:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005558:	7ffb      	ldrb	r3, [r7, #31]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b088      	sub	sp, #32
 8005566:	af02      	add	r7, sp, #8
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800557e:	d112      	bne.n	80055a6 <HAL_SPI_Receive+0x44>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10e      	bne.n	80055a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2204      	movs	r2, #4
 800558c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	4613      	mov	r3, r2
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f8f1 	bl	8005784 <HAL_SPI_TransmitReceive>
 80055a2:	4603      	mov	r3, r0
 80055a4:	e0ea      	b.n	800577c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_SPI_Receive+0x52>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e0e3      	b.n	800577c <HAL_SPI_Receive+0x21a>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055bc:	f7fd fba8 	bl	8002d10 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d002      	beq.n	80055d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
 80055d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055d2:	e0ca      	b.n	800576a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Receive+0x7e>
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055e4:	e0c1      	b.n	800576a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2204      	movs	r2, #4
 80055ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562c:	d10f      	bne.n	800564e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800564c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d007      	beq.n	800566c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d162      	bne.n	800573a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005674:	e02e      	b.n	80056d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d115      	bne.n	80056b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f103 020c 	add.w	r2, r3, #12
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ae:	e011      	b.n	80056d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b0:	f7fd fb2e 	bl	8002d10 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d803      	bhi.n	80056c8 <HAL_SPI_Receive+0x166>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d102      	bne.n	80056ce <HAL_SPI_Receive+0x16c>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056d2:	e04a      	b.n	800576a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1cb      	bne.n	8005676 <HAL_SPI_Receive+0x114>
 80056de:	e031      	b.n	8005744 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d113      	bne.n	8005716 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	b292      	uxth	r2, r2
 80056fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	1c9a      	adds	r2, r3, #2
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005714:	e011      	b.n	800573a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005716:	f7fd fafb 	bl	8002d10 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d803      	bhi.n	800572e <HAL_SPI_Receive+0x1cc>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d102      	bne.n	8005734 <HAL_SPI_Receive+0x1d2>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005738:	e017      	b.n	800576a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1cd      	bne.n	80056e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fa45 	bl	8005bd8 <SPI_EndRxTransaction>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
 8005766:	e000      	b.n	800576a <HAL_SPI_Receive+0x208>
  }

error :
 8005768:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	; 0x30
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005792:	2301      	movs	r3, #1
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x26>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e18a      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x33c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b2:	f7fd faad 	bl	8002d10 <HAL_GetTick>
 80057b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057c8:	887b      	ldrh	r3, [r7, #2]
 80057ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d00f      	beq.n	80057f4 <HAL_SPI_TransmitReceive+0x70>
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057da:	d107      	bne.n	80057ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <HAL_SPI_TransmitReceive+0x68>
 80057e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d003      	beq.n	80057f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057f2:	e15b      	b.n	8005aac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x82>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x82>
 8005800:	887b      	ldrh	r3, [r7, #2]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800580c:	e14e      	b.n	8005aac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b04      	cmp	r3, #4
 8005818:	d003      	beq.n	8005822 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2205      	movs	r2, #5
 800581e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	887a      	ldrh	r2, [r7, #2]
 8005832:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	887a      	ldrh	r2, [r7, #2]
 8005844:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	887a      	ldrh	r2, [r7, #2]
 800584a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d007      	beq.n	8005876 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800587e:	d178      	bne.n	8005972 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <HAL_SPI_TransmitReceive+0x10a>
 8005888:	8b7b      	ldrh	r3, [r7, #26]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d166      	bne.n	800595c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	881a      	ldrh	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	1c9a      	adds	r2, r3, #2
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058b2:	e053      	b.n	800595c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d11b      	bne.n	80058fa <HAL_SPI_TransmitReceive+0x176>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <HAL_SPI_TransmitReceive+0x176>
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d113      	bne.n	80058fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	881a      	ldrh	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	1c9a      	adds	r2, r3, #2
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d119      	bne.n	800593c <HAL_SPI_TransmitReceive+0x1b8>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d014      	beq.n	800593c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	b292      	uxth	r2, r2
 800591e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005938:	2301      	movs	r3, #1
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800593c:	f7fd f9e8 	bl	8002d10 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005948:	429a      	cmp	r2, r3
 800594a:	d807      	bhi.n	800595c <HAL_SPI_TransmitReceive+0x1d8>
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d003      	beq.n	800595c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800595a:	e0a7      	b.n	8005aac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1a6      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x130>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1a1      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x130>
 8005970:	e07c      	b.n	8005a6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x1fc>
 800597a:	8b7b      	ldrh	r3, [r7, #26]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d16b      	bne.n	8005a58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	7812      	ldrb	r2, [r2, #0]
 800598c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a6:	e057      	b.n	8005a58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d11c      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x26c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d017      	beq.n	80059f0 <HAL_SPI_TransmitReceive+0x26c>
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d114      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d119      	bne.n	8005a32 <HAL_SPI_TransmitReceive+0x2ae>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d014      	beq.n	8005a32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a32:	f7fd f96d 	bl	8002d10 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d803      	bhi.n	8005a4a <HAL_SPI_TransmitReceive+0x2c6>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d102      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x2cc>
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a56:	e029      	b.n	8005aac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1a2      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x224>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d19d      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f917 	bl	8005ca4 <SPI_EndRxTxTransaction>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a88:	e010      	b.n	8005aac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	e000      	b.n	8005aac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005aaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005abc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3730      	adds	r7, #48	; 0x30
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ad8:	f7fd f91a 	bl	8002d10 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ae8:	f7fd f912 	bl	8002d10 <HAL_GetTick>
 8005aec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aee:	4b39      	ldr	r3, [pc, #228]	; (8005bd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	015b      	lsls	r3, r3, #5
 8005af4:	0d1b      	lsrs	r3, r3, #20
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	fb02 f303 	mul.w	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005afe:	e054      	b.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d050      	beq.n	8005baa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b08:	f7fd f902 	bl	8002d10 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d13d      	bne.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b36:	d111      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b40:	d004      	beq.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4a:	d107      	bne.n	8005b5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b64:	d10f      	bne.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e017      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d19b      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000008 	.word	0x20000008

08005bd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bec:	d111      	bne.n	8005c12 <SPI_EndRxTransaction+0x3a>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf6:	d004      	beq.n	8005c02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c00:	d107      	bne.n	8005c12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1a:	d12a      	bne.n	8005c72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d012      	beq.n	8005c4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff ff49 	bl	8005ac8 <SPI_WaitFlagStateUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d02d      	beq.n	8005c98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e026      	b.n	8005c9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2200      	movs	r2, #0
 8005c54:	2101      	movs	r1, #1
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff ff36 	bl	8005ac8 <SPI_WaitFlagStateUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01a      	beq.n	8005c98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f043 0220 	orr.w	r2, r3, #32
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e013      	b.n	8005c9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff ff23 	bl	8005ac8 <SPI_WaitFlagStateUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	f043 0220 	orr.w	r2, r3, #32
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e000      	b.n	8005c9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <SPI_EndRxTxTransaction+0x7c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <SPI_EndRxTxTransaction+0x80>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	0d5b      	lsrs	r3, r3, #21
 8005cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cc0:	fb02 f303 	mul.w	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cce:	d112      	bne.n	8005cf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff fef4 	bl	8005ac8 <SPI_WaitFlagStateUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cea:	f043 0220 	orr.w	r2, r3, #32
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e00f      	b.n	8005d16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	2b80      	cmp	r3, #128	; 0x80
 8005d0e:	d0f2      	beq.n	8005cf6 <SPI_EndRxTxTransaction+0x52>
 8005d10:	e000      	b.n	8005d14 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d12:	bf00      	nop
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000008 	.word	0x20000008
 8005d24:	165e9f81 	.word	0x165e9f81

08005d28 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e034      	b.n	8005da8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7fc fe98 	bl	8002a88 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f002 f828 	bl	8007db8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	461a      	mov	r2, r3
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	f002 f872 	bl	8007e5c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6858      	ldr	r0, [r3, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	f002 f8a7 	bl	8007ed8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6892      	ldr	r2, [r2, #8]
 8005d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	6892      	ldr	r2, [r2, #8]
 8005d9e:	f041 0101 	orr.w	r1, r1, #1
 8005da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e041      	b.n	8005e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fc fd44 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f000 fc7a 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d001      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e04e      	b.n	8005f06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d022      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x80>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e92:	d01d      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x80>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d018      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x80>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x80>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x80>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x80>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_TIM_Base_Start_IT+0x80>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d111      	bne.n	8005ef4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b06      	cmp	r3, #6
 8005ee0:	d010      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef2:	e007      	b.n	8005f04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40001800 	.word	0x40001800

08005f30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e041      	b.n	8005fc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f839 	bl	8005fce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f000 fbba 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_TIM_PWM_Start+0x24>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	bf14      	ite	ne
 8006000:	2301      	movne	r3, #1
 8006002:	2300      	moveq	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e022      	b.n	800604e <HAL_TIM_PWM_Start+0x6a>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d109      	bne.n	8006022 <HAL_TIM_PWM_Start+0x3e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b01      	cmp	r3, #1
 8006018:	bf14      	ite	ne
 800601a:	2301      	movne	r3, #1
 800601c:	2300      	moveq	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	e015      	b.n	800604e <HAL_TIM_PWM_Start+0x6a>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b08      	cmp	r3, #8
 8006026:	d109      	bne.n	800603c <HAL_TIM_PWM_Start+0x58>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	bf14      	ite	ne
 8006034:	2301      	movne	r3, #1
 8006036:	2300      	moveq	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	e008      	b.n	800604e <HAL_TIM_PWM_Start+0x6a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	bf14      	ite	ne
 8006048:	2301      	movne	r3, #1
 800604a:	2300      	moveq	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e07c      	b.n	8006150 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0x82>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006064:	e013      	b.n	800608e <HAL_TIM_PWM_Start+0xaa>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b04      	cmp	r3, #4
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0x92>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006074:	e00b      	b.n	800608e <HAL_TIM_PWM_Start+0xaa>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xa2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	e003      	b.n	800608e <HAL_TIM_PWM_Start+0xaa>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2201      	movs	r2, #1
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fe10 	bl	8006cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2d      	ldr	r2, [pc, #180]	; (8006158 <HAL_TIM_PWM_Start+0x174>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_TIM_PWM_Start+0xcc>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2c      	ldr	r2, [pc, #176]	; (800615c <HAL_TIM_PWM_Start+0x178>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_PWM_Start+0xd0>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_TIM_PWM_Start+0xd2>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a22      	ldr	r2, [pc, #136]	; (8006158 <HAL_TIM_PWM_Start+0x174>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d022      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d01d      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <HAL_TIM_PWM_Start+0x17c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d018      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <HAL_TIM_PWM_Start+0x180>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <HAL_TIM_PWM_Start+0x184>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a16      	ldr	r2, [pc, #88]	; (800615c <HAL_TIM_PWM_Start+0x178>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_TIM_PWM_Start+0x188>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a16      	ldr	r2, [pc, #88]	; (8006170 <HAL_TIM_PWM_Start+0x18c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d111      	bne.n	800613e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d010      	beq.n	800614e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613c:	e007      	b.n	800614e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0201 	orr.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40014000 	.word	0x40014000
 8006170:	40001800 	.word	0x40001800

08006174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d122      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b02      	cmp	r3, #2
 8006196:	d11b      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0202 	mvn.w	r2, #2
 80061a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa77 	bl	80066aa <HAL_TIM_IC_CaptureCallback>
 80061bc:	e005      	b.n	80061ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa69 	bl	8006696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fa7a 	bl	80066be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d122      	bne.n	8006224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d11b      	bne.n	8006224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0204 	mvn.w	r2, #4
 80061f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fa4d 	bl	80066aa <HAL_TIM_IC_CaptureCallback>
 8006210:	e005      	b.n	800621e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa3f 	bl	8006696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa50 	bl	80066be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b08      	cmp	r3, #8
 8006230:	d122      	bne.n	8006278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b08      	cmp	r3, #8
 800623e:	d11b      	bne.n	8006278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0208 	mvn.w	r2, #8
 8006248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2204      	movs	r2, #4
 800624e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa23 	bl	80066aa <HAL_TIM_IC_CaptureCallback>
 8006264:	e005      	b.n	8006272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa15 	bl	8006696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fa26 	bl	80066be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b10      	cmp	r3, #16
 8006284:	d122      	bne.n	80062cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b10      	cmp	r3, #16
 8006292:	d11b      	bne.n	80062cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0210 	mvn.w	r2, #16
 800629c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2208      	movs	r2, #8
 80062a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9f9 	bl	80066aa <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9eb 	bl	8006696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9fc 	bl	80066be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d10e      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d107      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0201 	mvn.w	r2, #1
 80062f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc f940 	bl	8002578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d10e      	bne.n	8006324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006310:	2b80      	cmp	r3, #128	; 0x80
 8006312:	d107      	bne.n	8006324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800631c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fd78 	bl	8006e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d10e      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d107      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9c1 	bl	80066d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b20      	cmp	r3, #32
 800635c:	d10e      	bne.n	800637c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b20      	cmp	r3, #32
 800636a:	d107      	bne.n	800637c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0220 	mvn.w	r2, #32
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fd42 	bl	8006e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800639e:	2302      	movs	r3, #2
 80063a0:	e0ae      	b.n	8006500 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b0c      	cmp	r3, #12
 80063ae:	f200 809f 	bhi.w	80064f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063ed 	.word	0x080063ed
 80063bc:	080064f1 	.word	0x080064f1
 80063c0:	080064f1 	.word	0x080064f1
 80063c4:	080064f1 	.word	0x080064f1
 80063c8:	0800642d 	.word	0x0800642d
 80063cc:	080064f1 	.word	0x080064f1
 80063d0:	080064f1 	.word	0x080064f1
 80063d4:	080064f1 	.word	0x080064f1
 80063d8:	0800646f 	.word	0x0800646f
 80063dc:	080064f1 	.word	0x080064f1
 80063e0:	080064f1 	.word	0x080064f1
 80063e4:	080064f1 	.word	0x080064f1
 80063e8:	080064af 	.word	0x080064af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa18 	bl	8006828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0208 	orr.w	r2, r2, #8
 8006406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0204 	bic.w	r2, r2, #4
 8006416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	619a      	str	r2, [r3, #24]
      break;
 800642a:	e064      	b.n	80064f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fa68 	bl	8006908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6999      	ldr	r1, [r3, #24]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	021a      	lsls	r2, r3, #8
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	619a      	str	r2, [r3, #24]
      break;
 800646c:	e043      	b.n	80064f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fabd 	bl	80069f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0208 	orr.w	r2, r2, #8
 8006488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0204 	bic.w	r2, r2, #4
 8006498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69d9      	ldr	r1, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	61da      	str	r2, [r3, #28]
      break;
 80064ac:	e023      	b.n	80064f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fb11 	bl	8006adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69d9      	ldr	r1, [r3, #28]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	021a      	lsls	r2, r3, #8
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	61da      	str	r2, [r3, #28]
      break;
 80064ee:	e002      	b.n	80064f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
      break;
 80064f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_TIM_ConfigClockSource+0x1c>
 8006520:	2302      	movs	r3, #2
 8006522:	e0b4      	b.n	800668e <HAL_TIM_ConfigClockSource+0x186>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800654a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655c:	d03e      	beq.n	80065dc <HAL_TIM_ConfigClockSource+0xd4>
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006562:	f200 8087 	bhi.w	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	f000 8086 	beq.w	800667a <HAL_TIM_ConfigClockSource+0x172>
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	d87f      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 8006574:	2b70      	cmp	r3, #112	; 0x70
 8006576:	d01a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0xa6>
 8006578:	2b70      	cmp	r3, #112	; 0x70
 800657a:	d87b      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 800657c:	2b60      	cmp	r3, #96	; 0x60
 800657e:	d050      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0x11a>
 8006580:	2b60      	cmp	r3, #96	; 0x60
 8006582:	d877      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 8006584:	2b50      	cmp	r3, #80	; 0x50
 8006586:	d03c      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0xfa>
 8006588:	2b50      	cmp	r3, #80	; 0x50
 800658a:	d873      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d058      	beq.n	8006642 <HAL_TIM_ConfigClockSource+0x13a>
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d86f      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 8006594:	2b30      	cmp	r3, #48	; 0x30
 8006596:	d064      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15a>
 8006598:	2b30      	cmp	r3, #48	; 0x30
 800659a:	d86b      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d060      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15a>
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d867      	bhi.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d05c      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15a>
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d05a      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0x15a>
 80065ac:	e062      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6899      	ldr	r1, [r3, #8]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f000 fb5d 	bl	8006c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	609a      	str	r2, [r3, #8]
      break;
 80065da:	e04f      	b.n	800667c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	6899      	ldr	r1, [r3, #8]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f000 fb46 	bl	8006c7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065fe:	609a      	str	r2, [r3, #8]
      break;
 8006600:	e03c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	461a      	mov	r2, r3
 8006610:	f000 faba 	bl	8006b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2150      	movs	r1, #80	; 0x50
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fb13 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 8006620:	e02c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6859      	ldr	r1, [r3, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	461a      	mov	r2, r3
 8006630:	f000 fad9 	bl	8006be6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2160      	movs	r1, #96	; 0x60
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fb03 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 8006640:	e01c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6859      	ldr	r1, [r3, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	461a      	mov	r2, r3
 8006650:	f000 fa9a 	bl	8006b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2140      	movs	r1, #64	; 0x40
 800665a:	4618      	mov	r0, r3
 800665c:	f000 faf3 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 8006660:	e00c      	b.n	800667c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 faea 	bl	8006c46 <TIM_ITRx_SetConfig>
      break;
 8006672:	e003      	b.n	800667c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	73fb      	strb	r3, [r7, #15]
      break;
 8006678:	e000      	b.n	800667c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800667a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
	...

080066e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a40      	ldr	r2, [pc, #256]	; (80067fc <TIM_Base_SetConfig+0x114>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3d      	ldr	r2, [pc, #244]	; (8006800 <TIM_Base_SetConfig+0x118>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a3c      	ldr	r2, [pc, #240]	; (8006804 <TIM_Base_SetConfig+0x11c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a3b      	ldr	r2, [pc, #236]	; (8006808 <TIM_Base_SetConfig+0x120>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3a      	ldr	r2, [pc, #232]	; (800680c <TIM_Base_SetConfig+0x124>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2f      	ldr	r2, [pc, #188]	; (80067fc <TIM_Base_SetConfig+0x114>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d02b      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d027      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2c      	ldr	r2, [pc, #176]	; (8006800 <TIM_Base_SetConfig+0x118>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d023      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2b      	ldr	r2, [pc, #172]	; (8006804 <TIM_Base_SetConfig+0x11c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01f      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2a      	ldr	r2, [pc, #168]	; (8006808 <TIM_Base_SetConfig+0x120>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01b      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a29      	ldr	r2, [pc, #164]	; (800680c <TIM_Base_SetConfig+0x124>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d017      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a28      	ldr	r2, [pc, #160]	; (8006810 <TIM_Base_SetConfig+0x128>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a27      	ldr	r2, [pc, #156]	; (8006814 <TIM_Base_SetConfig+0x12c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a26      	ldr	r2, [pc, #152]	; (8006818 <TIM_Base_SetConfig+0x130>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a25      	ldr	r2, [pc, #148]	; (800681c <TIM_Base_SetConfig+0x134>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a24      	ldr	r2, [pc, #144]	; (8006820 <TIM_Base_SetConfig+0x138>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a23      	ldr	r2, [pc, #140]	; (8006824 <TIM_Base_SetConfig+0x13c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <TIM_Base_SetConfig+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_Base_SetConfig+0xf8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a0c      	ldr	r2, [pc, #48]	; (800680c <TIM_Base_SetConfig+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d103      	bne.n	80067e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	615a      	str	r2, [r3, #20]
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40010000 	.word	0x40010000
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00
 800680c:	40010400 	.word	0x40010400
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800
 800681c:	40001800 	.word	0x40001800
 8006820:	40001c00 	.word	0x40001c00
 8006824:	40002000 	.word	0x40002000

08006828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0201 	bic.w	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 0302 	bic.w	r3, r3, #2
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a20      	ldr	r2, [pc, #128]	; (8006900 <TIM_OC1_SetConfig+0xd8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <TIM_OC1_SetConfig+0x64>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1f      	ldr	r2, [pc, #124]	; (8006904 <TIM_OC1_SetConfig+0xdc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10c      	bne.n	80068a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0308 	bic.w	r3, r3, #8
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <TIM_OC1_SetConfig+0xd8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_OC1_SetConfig+0x8e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <TIM_OC1_SetConfig+0xdc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d111      	bne.n	80068da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400

08006908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0320 	bic.w	r3, r3, #32
 8006952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a22      	ldr	r2, [pc, #136]	; (80069ec <TIM_OC2_SetConfig+0xe4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_OC2_SetConfig+0x68>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <TIM_OC2_SetConfig+0xe8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10d      	bne.n	800698c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a17      	ldr	r2, [pc, #92]	; (80069ec <TIM_OC2_SetConfig+0xe4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC2_SetConfig+0x94>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <TIM_OC2_SetConfig+0xe8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d113      	bne.n	80069c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400

080069f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <TIM_OC3_SetConfig+0xe0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC3_SetConfig+0x66>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a20      	ldr	r2, [pc, #128]	; (8006ad8 <TIM_OC3_SetConfig+0xe4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d10d      	bne.n	8006a76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <TIM_OC3_SetConfig+0xe0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <TIM_OC3_SetConfig+0x92>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <TIM_OC3_SetConfig+0xe4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d113      	bne.n	8006aae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40010400 	.word	0x40010400

08006adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	031b      	lsls	r3, r3, #12
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <TIM_OC4_SetConfig+0xa4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_OC4_SetConfig+0x68>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a11      	ldr	r2, [pc, #68]	; (8006b84 <TIM_OC4_SetConfig+0xa8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40010400 	.word	0x40010400

08006b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	f023 0201 	bic.w	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f023 030a 	bic.w	r3, r3, #10
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b087      	sub	sp, #28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f023 0210 	bic.w	r2, r3, #16
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	031b      	lsls	r3, r3, #12
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f043 0307 	orr.w	r3, r3, #7
 8006c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	609a      	str	r2, [r3, #8]
}
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	021a      	lsls	r2, r3, #8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	609a      	str	r2, [r3, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	2201      	movs	r2, #1
 8006cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	401a      	ands	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1a      	ldr	r2, [r3, #32]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e05a      	b.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a21      	ldr	r2, [pc, #132]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d022      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6c:	d01d      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d018      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1a      	ldr	r2, [pc, #104]	; (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00e      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a18      	ldr	r2, [pc, #96]	; (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d009      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d004      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d10c      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40010400 	.word	0x40010400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40001800 	.word	0x40001800

08006e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e03f      	b.n	8006eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fb fd7e 	bl	8002950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2224      	movs	r2, #36	; 0x24
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fddb 	bl	8007a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b08a      	sub	sp, #40	; 0x28
 8006ec6:	af02      	add	r7, sp, #8
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d17c      	bne.n	8006fdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_UART_Transmit+0x2c>
 8006ee8:	88fb      	ldrh	r3, [r7, #6]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e075      	b.n	8006fde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_UART_Transmit+0x3e>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e06e      	b.n	8006fde <HAL_UART_Transmit+0x11c>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2221      	movs	r2, #33	; 0x21
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f16:	f7fb fefb 	bl	8002d10 <HAL_GetTick>
 8006f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f30:	d108      	bne.n	8006f44 <HAL_UART_Transmit+0x82>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	e003      	b.n	8006f4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f54:	e02a      	b.n	8006fac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fb1f 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e036      	b.n	8006fde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10b      	bne.n	8006f8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	3302      	adds	r3, #2
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	e007      	b.n	8006f9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1cf      	bne.n	8006f56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2140      	movs	r1, #64	; 0x40
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 faef 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e006      	b.n	8006fde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3720      	adds	r7, #32
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d11d      	bne.n	800703c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_UART_Receive_IT+0x26>
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e016      	b.n	800703e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_UART_Receive_IT+0x38>
 800701a:	2302      	movs	r3, #2
 800701c:	e00f      	b.n	800703e <HAL_UART_Receive_IT+0x58>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	461a      	mov	r2, r3
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fb24 	bl	8007680 <UART_Start_Receive_IT>
 8007038:	4603      	mov	r3, r0
 800703a:	e000      	b.n	800703e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800703c:	2302      	movs	r3, #2
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b0ba      	sub	sp, #232	; 0xe8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007074:	2300      	movs	r3, #0
 8007076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fc03 	bl	80078b2 <UART_Receive_IT>
      return;
 80070ac:	e256      	b.n	800755c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80de 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
 80070b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80d1 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
 80070de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f043 0201 	orr.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
 8007102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	f043 0202 	orr.w	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
 8007126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d011      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f043 0208 	orr.w	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 81ed 	beq.w	8007552 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fb8e 	bl	80078b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_UART_IRQHandler+0x17a>
 80071ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04f      	beq.n	8007262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa96 	bl	80076f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d141      	bne.n	800725a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800720e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800721a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d9      	bne.n	80071d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	2b00      	cmp	r3, #0
 8007228:	d013      	beq.n	8007252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	4a7d      	ldr	r2, [pc, #500]	; (8007424 <HAL_UART_IRQHandler+0x3dc>)
 8007230:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	4618      	mov	r0, r3
 8007238:	f7fc fc34 	bl	8003aa4 <HAL_DMA_Abort_IT>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d016      	beq.n	8007270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	e00e      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f990 	bl	8007578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	e00a      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f98c 	bl	8007578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007260:	e006      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f988 	bl	8007578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800726e:	e170      	b.n	8007552 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	bf00      	nop
    return;
 8007272:	e16e      	b.n	8007552 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 814a 	bne.w	8007512 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8143 	beq.w	8007512 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 813c 	beq.w	8007512 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800729a:	2300      	movs	r3, #0
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	f040 80b4 	bne.w	8007428 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8140 	beq.w	8007556 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072de:	429a      	cmp	r2, r3
 80072e0:	f080 8139 	bcs.w	8007556 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f6:	f000 8088 	beq.w	800740a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800732a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800733e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1d9      	bne.n	80072fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800736a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800736e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800737c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e1      	bne.n	8007346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3314      	adds	r3, #20
 80073a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e3      	bne.n	8007382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073da:	f023 0310 	bic.w	r3, r3, #16
 80073de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80073ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e3      	bne.n	80073c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	4618      	mov	r0, r3
 8007406:	f7fc fadd 	bl	80039c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007412:	b29b      	uxth	r3, r3
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8b6 	bl	800758c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007420:	e099      	b.n	8007556 <HAL_UART_IRQHandler+0x50e>
 8007422:	bf00      	nop
 8007424:	080077bb 	.word	0x080077bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007430:	b29b      	uxth	r3, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 808b 	beq.w	800755a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8086 	beq.w	800755a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007472:	647a      	str	r2, [r7, #68]	; 0x44
 8007474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	623b      	str	r3, [r7, #32]
   return(result);
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3314      	adds	r3, #20
 80074a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074aa:	633a      	str	r2, [r7, #48]	; 0x30
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e3      	bne.n	8007486 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	60fb      	str	r3, [r7, #12]
   return(result);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0310 	bic.w	r3, r3, #16
 80074e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074f0:	61fa      	str	r2, [r7, #28]
 80074f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	69b9      	ldr	r1, [r7, #24]
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	617b      	str	r3, [r7, #20]
   return(result);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e3      	bne.n	80074cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f83e 	bl	800758c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007510:	e023      	b.n	800755a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <HAL_UART_IRQHandler+0x4ea>
 800751e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f959 	bl	80077e2 <UART_Transmit_IT>
    return;
 8007530:	e014      	b.n	800755c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00e      	beq.n	800755c <HAL_UART_IRQHandler+0x514>
 800753e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f999 	bl	8007882 <UART_EndTransmit_IT>
    return;
 8007550:	e004      	b.n	800755c <HAL_UART_IRQHandler+0x514>
    return;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <HAL_UART_IRQHandler+0x514>
      return;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_UART_IRQHandler+0x514>
      return;
 800755a:	bf00      	nop
  }
}
 800755c:	37e8      	adds	r7, #232	; 0xe8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b090      	sub	sp, #64	; 0x40
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b4:	e050      	b.n	8007658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d04c      	beq.n	8007658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075c4:	f7fb fba4 	bl	8002d10 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d241      	bcs.n	8007658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075f4:	637a      	str	r2, [r7, #52]	; 0x34
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e5      	bne.n	80075d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	613b      	str	r3, [r7, #16]
   return(result);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3314      	adds	r3, #20
 8007626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007628:	623a      	str	r2, [r7, #32]
 800762a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	69f9      	ldr	r1, [r7, #28]
 800762e:	6a3a      	ldr	r2, [r7, #32]
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	61bb      	str	r3, [r7, #24]
   return(result);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e5      	bne.n	8007608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e00f      	b.n	8007678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4013      	ands	r3, r2
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	429a      	cmp	r2, r3
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	429a      	cmp	r2, r3
 8007674:	d09f      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3740      	adds	r7, #64	; 0x40
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	88fa      	ldrh	r2, [r7, #6]
 800769e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2222      	movs	r2, #34	; 0x22
 80076aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0220 	orr.w	r2, r2, #32
 80076e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b095      	sub	sp, #84	; 0x54
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800771c:	643a      	str	r2, [r7, #64]	; 0x40
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e5      	bne.n	80076fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f023 0301 	bic.w	r3, r3, #1
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	2b01      	cmp	r3, #1
 800776a:	d119      	bne.n	80077a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60bb      	str	r3, [r7, #8]
   return(result);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f023 0310 	bic.w	r3, r3, #16
 8007782:	647b      	str	r3, [r7, #68]	; 0x44
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	330c      	adds	r3, #12
 800778a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800778c:	61ba      	str	r2, [r7, #24]
 800778e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6979      	ldr	r1, [r7, #20]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e5      	bne.n	800776c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077ae:	bf00      	nop
 80077b0:	3754      	adds	r7, #84	; 0x54
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff fecf 	bl	8007578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b21      	cmp	r3, #33	; 0x21
 80077f4:	d13e      	bne.n	8007874 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fe:	d114      	bne.n	800782a <UART_Transmit_IT+0x48>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d110      	bne.n	800782a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800781c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	1c9a      	adds	r2, r3, #2
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	621a      	str	r2, [r3, #32]
 8007828:	e008      	b.n	800783c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6211      	str	r1, [r2, #32]
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	b29b      	uxth	r3, r3
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4619      	mov	r1, r3
 800784a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10f      	bne.n	8007870 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800785e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	e000      	b.n	8007876 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007898:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fe5e 	bl	8007564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b08c      	sub	sp, #48	; 0x30
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b22      	cmp	r3, #34	; 0x22
 80078c4:	f040 80ab 	bne.w	8007a1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d0:	d117      	bne.n	8007902 <UART_Receive_IT+0x50>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d113      	bne.n	8007902 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	1c9a      	adds	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007900:	e026      	b.n	8007950 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007908:	2300      	movs	r3, #0
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d007      	beq.n	8007926 <UART_Receive_IT+0x74>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <UART_Receive_IT+0x82>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	b2da      	uxtb	r2, r3
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	e008      	b.n	8007946 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	b2da      	uxtb	r2, r3
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29b      	uxth	r3, r3
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4619      	mov	r1, r3
 800795e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007960:	2b00      	cmp	r3, #0
 8007962:	d15a      	bne.n	8007a1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0220 	bic.w	r2, r2, #32
 8007972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0201 	bic.w	r2, r2, #1
 8007992:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d135      	bne.n	8007a10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f023 0310 	bic.w	r3, r3, #16
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ca:	623a      	str	r2, [r7, #32]
 80079cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	69f9      	ldr	r1, [r7, #28]
 80079d0:	6a3a      	ldr	r2, [r7, #32]
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e5      	bne.n	80079aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d10a      	bne.n	8007a02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fdbf 	bl	800758c <HAL_UARTEx_RxEventCallback>
 8007a0e:	e002      	b.n	8007a16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fb f8ab 	bl	8002b6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e002      	b.n	8007a20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e000      	b.n	8007a20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a1e:	2302      	movs	r3, #2
  }
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3730      	adds	r7, #48	; 0x30
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	b09f      	sub	sp, #124	; 0x7c
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3e:	68d9      	ldr	r1, [r3, #12]
 8007a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	ea40 0301 	orr.w	r3, r0, r1
 8007a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a6c:	f021 010c 	bic.w	r1, r1, #12
 8007a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a76:	430b      	orrs	r3, r1
 8007a78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a86:	6999      	ldr	r1, [r3, #24]
 8007a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	ea40 0301 	orr.w	r3, r0, r1
 8007a90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4bc5      	ldr	r3, [pc, #788]	; (8007dac <UART_SetConfig+0x384>)
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d004      	beq.n	8007aa6 <UART_SetConfig+0x7e>
 8007a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4bc3      	ldr	r3, [pc, #780]	; (8007db0 <UART_SetConfig+0x388>)
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d103      	bne.n	8007aae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007aa6:	f7fd fb83 	bl	80051b0 <HAL_RCC_GetPCLK2Freq>
 8007aaa:	6778      	str	r0, [r7, #116]	; 0x74
 8007aac:	e002      	b.n	8007ab4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aae:	f7fd fb6b 	bl	8005188 <HAL_RCC_GetPCLK1Freq>
 8007ab2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007abc:	f040 80b6 	bne.w	8007c2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	f04f 0500 	mov.w	r5, #0
 8007ac8:	4622      	mov	r2, r4
 8007aca:	462b      	mov	r3, r5
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	6439      	str	r1, [r7, #64]	; 0x40
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ad8:	1912      	adds	r2, r2, r4
 8007ada:	eb45 0303 	adc.w	r3, r5, r3
 8007ade:	f04f 0000 	mov.w	r0, #0
 8007ae2:	f04f 0100 	mov.w	r1, #0
 8007ae6:	00d9      	lsls	r1, r3, #3
 8007ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007aec:	00d0      	lsls	r0, r2, #3
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	1911      	adds	r1, r2, r4
 8007af4:	6639      	str	r1, [r7, #96]	; 0x60
 8007af6:	416b      	adcs	r3, r5
 8007af8:	667b      	str	r3, [r7, #100]	; 0x64
 8007afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	1891      	adds	r1, r2, r2
 8007b06:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b08:	415b      	adcs	r3, r3
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b14:	f7f8 ff76 	bl	8000a04 <__aeabi_uldivmod>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4ba5      	ldr	r3, [pc, #660]	; (8007db4 <UART_SetConfig+0x38c>)
 8007b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	011e      	lsls	r6, r3, #4
 8007b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b28:	461c      	mov	r4, r3
 8007b2a:	f04f 0500 	mov.w	r5, #0
 8007b2e:	4622      	mov	r2, r4
 8007b30:	462b      	mov	r3, r5
 8007b32:	1891      	adds	r1, r2, r2
 8007b34:	6339      	str	r1, [r7, #48]	; 0x30
 8007b36:	415b      	adcs	r3, r3
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b3e:	1912      	adds	r2, r2, r4
 8007b40:	eb45 0303 	adc.w	r3, r5, r3
 8007b44:	f04f 0000 	mov.w	r0, #0
 8007b48:	f04f 0100 	mov.w	r1, #0
 8007b4c:	00d9      	lsls	r1, r3, #3
 8007b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b52:	00d0      	lsls	r0, r2, #3
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	1911      	adds	r1, r2, r4
 8007b5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b5c:	416b      	adcs	r3, r5
 8007b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	461a      	mov	r2, r3
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	1891      	adds	r1, r2, r2
 8007b6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b6e:	415b      	adcs	r3, r3
 8007b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007b7a:	f7f8 ff43 	bl	8000a04 <__aeabi_uldivmod>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4b8c      	ldr	r3, [pc, #560]	; (8007db4 <UART_SetConfig+0x38c>)
 8007b84:	fba3 1302 	umull	r1, r3, r3, r2
 8007b88:	095b      	lsrs	r3, r3, #5
 8007b8a:	2164      	movs	r1, #100	; 0x64
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	3332      	adds	r3, #50	; 0x32
 8007b96:	4a87      	ldr	r2, [pc, #540]	; (8007db4 <UART_SetConfig+0x38c>)
 8007b98:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ba4:	441e      	add	r6, r3
 8007ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f04f 0100 	mov.w	r1, #0
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	1894      	adds	r4, r2, r2
 8007bb4:	623c      	str	r4, [r7, #32]
 8007bb6:	415b      	adcs	r3, r3
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bbe:	1812      	adds	r2, r2, r0
 8007bc0:	eb41 0303 	adc.w	r3, r1, r3
 8007bc4:	f04f 0400 	mov.w	r4, #0
 8007bc8:	f04f 0500 	mov.w	r5, #0
 8007bcc:	00dd      	lsls	r5, r3, #3
 8007bce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bd2:	00d4      	lsls	r4, r2, #3
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	1814      	adds	r4, r2, r0
 8007bda:	653c      	str	r4, [r7, #80]	; 0x50
 8007bdc:	414b      	adcs	r3, r1
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
 8007be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	461a      	mov	r2, r3
 8007be6:	f04f 0300 	mov.w	r3, #0
 8007bea:	1891      	adds	r1, r2, r2
 8007bec:	61b9      	str	r1, [r7, #24]
 8007bee:	415b      	adcs	r3, r3
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bf6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007bfa:	f7f8 ff03 	bl	8000a04 <__aeabi_uldivmod>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4b6c      	ldr	r3, [pc, #432]	; (8007db4 <UART_SetConfig+0x38c>)
 8007c04:	fba3 1302 	umull	r1, r3, r3, r2
 8007c08:	095b      	lsrs	r3, r3, #5
 8007c0a:	2164      	movs	r1, #100	; 0x64
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	3332      	adds	r3, #50	; 0x32
 8007c16:	4a67      	ldr	r2, [pc, #412]	; (8007db4 <UART_SetConfig+0x38c>)
 8007c18:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	f003 0207 	and.w	r2, r3, #7
 8007c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4432      	add	r2, r6
 8007c28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c2a:	e0b9      	b.n	8007da0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c2e:	461c      	mov	r4, r3
 8007c30:	f04f 0500 	mov.w	r5, #0
 8007c34:	4622      	mov	r2, r4
 8007c36:	462b      	mov	r3, r5
 8007c38:	1891      	adds	r1, r2, r2
 8007c3a:	6139      	str	r1, [r7, #16]
 8007c3c:	415b      	adcs	r3, r3
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c44:	1912      	adds	r2, r2, r4
 8007c46:	eb45 0303 	adc.w	r3, r5, r3
 8007c4a:	f04f 0000 	mov.w	r0, #0
 8007c4e:	f04f 0100 	mov.w	r1, #0
 8007c52:	00d9      	lsls	r1, r3, #3
 8007c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c58:	00d0      	lsls	r0, r2, #3
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	eb12 0804 	adds.w	r8, r2, r4
 8007c62:	eb43 0905 	adc.w	r9, r3, r5
 8007c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f04f 0100 	mov.w	r1, #0
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	008b      	lsls	r3, r1, #2
 8007c7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c7e:	0082      	lsls	r2, r0, #2
 8007c80:	4640      	mov	r0, r8
 8007c82:	4649      	mov	r1, r9
 8007c84:	f7f8 febe 	bl	8000a04 <__aeabi_uldivmod>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4b49      	ldr	r3, [pc, #292]	; (8007db4 <UART_SetConfig+0x38c>)
 8007c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	011e      	lsls	r6, r3, #4
 8007c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f04f 0100 	mov.w	r1, #0
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	1894      	adds	r4, r2, r2
 8007ca4:	60bc      	str	r4, [r7, #8]
 8007ca6:	415b      	adcs	r3, r3
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cae:	1812      	adds	r2, r2, r0
 8007cb0:	eb41 0303 	adc.w	r3, r1, r3
 8007cb4:	f04f 0400 	mov.w	r4, #0
 8007cb8:	f04f 0500 	mov.w	r5, #0
 8007cbc:	00dd      	lsls	r5, r3, #3
 8007cbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cc2:	00d4      	lsls	r4, r2, #3
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	1814      	adds	r4, r2, r0
 8007cca:	64bc      	str	r4, [r7, #72]	; 0x48
 8007ccc:	414b      	adcs	r3, r1
 8007cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f04f 0100 	mov.w	r1, #0
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	008b      	lsls	r3, r1, #2
 8007ce4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ce8:	0082      	lsls	r2, r0, #2
 8007cea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007cee:	f7f8 fe89 	bl	8000a04 <__aeabi_uldivmod>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <UART_SetConfig+0x38c>)
 8007cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	2164      	movs	r1, #100	; 0x64
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	3332      	adds	r3, #50	; 0x32
 8007d0a:	4a2a      	ldr	r2, [pc, #168]	; (8007db4 <UART_SetConfig+0x38c>)
 8007d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d16:	441e      	add	r6, r3
 8007d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f04f 0100 	mov.w	r1, #0
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	1894      	adds	r4, r2, r2
 8007d26:	603c      	str	r4, [r7, #0]
 8007d28:	415b      	adcs	r3, r3
 8007d2a:	607b      	str	r3, [r7, #4]
 8007d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d30:	1812      	adds	r2, r2, r0
 8007d32:	eb41 0303 	adc.w	r3, r1, r3
 8007d36:	f04f 0400 	mov.w	r4, #0
 8007d3a:	f04f 0500 	mov.w	r5, #0
 8007d3e:	00dd      	lsls	r5, r3, #3
 8007d40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d44:	00d4      	lsls	r4, r2, #3
 8007d46:	4622      	mov	r2, r4
 8007d48:	462b      	mov	r3, r5
 8007d4a:	eb12 0a00 	adds.w	sl, r2, r0
 8007d4e:	eb43 0b01 	adc.w	fp, r3, r1
 8007d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f04f 0100 	mov.w	r1, #0
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	008b      	lsls	r3, r1, #2
 8007d66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d6a:	0082      	lsls	r2, r0, #2
 8007d6c:	4650      	mov	r0, sl
 8007d6e:	4659      	mov	r1, fp
 8007d70:	f7f8 fe48 	bl	8000a04 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <UART_SetConfig+0x38c>)
 8007d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	2164      	movs	r1, #100	; 0x64
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	3332      	adds	r3, #50	; 0x32
 8007d8c:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <UART_SetConfig+0x38c>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4432      	add	r2, r6
 8007d9e:	609a      	str	r2, [r3, #8]
}
 8007da0:	bf00      	nop
 8007da2:	377c      	adds	r7, #124	; 0x7c
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007daa:	bf00      	nop
 8007dac:	40011000 	.word	0x40011000
 8007db0:	40011400 	.word	0x40011400
 8007db4:	51eb851f 	.word	0x51eb851f

08007db8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4b20      	ldr	r3, [pc, #128]	; (8007e58 <FSMC_NORSRAM_Init+0xa0>)
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007de2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007de8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007dee:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007df4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007dfa:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007e00:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007e06:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007e0c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007e12:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007e18:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007e1e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007e24:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d103      	bne.n	8007e3c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	fff00080 	.word	0xfff00080

08007e5c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e7e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007e8a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007e92:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007e9a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007ea4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	3b02      	subs	r3, #2
 8007eac:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007eae:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6979      	ldr	r1, [r7, #20]
 8007ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef0:	d122      	bne.n	8007f38 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f0e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007f16:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007f1e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007f24:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6979      	ldr	r1, [r7, #20]
 8007f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f36:	e005      	b.n	8007f44 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	cff00000 	.word	0xcff00000

08007f58 <__libc_init_array>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	4d0d      	ldr	r5, [pc, #52]	; (8007f90 <__libc_init_array+0x38>)
 8007f5c:	4c0d      	ldr	r4, [pc, #52]	; (8007f94 <__libc_init_array+0x3c>)
 8007f5e:	1b64      	subs	r4, r4, r5
 8007f60:	10a4      	asrs	r4, r4, #2
 8007f62:	2600      	movs	r6, #0
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	d109      	bne.n	8007f7c <__libc_init_array+0x24>
 8007f68:	4d0b      	ldr	r5, [pc, #44]	; (8007f98 <__libc_init_array+0x40>)
 8007f6a:	4c0c      	ldr	r4, [pc, #48]	; (8007f9c <__libc_init_array+0x44>)
 8007f6c:	f000 f820 	bl	8007fb0 <_init>
 8007f70:	1b64      	subs	r4, r4, r5
 8007f72:	10a4      	asrs	r4, r4, #2
 8007f74:	2600      	movs	r6, #0
 8007f76:	42a6      	cmp	r6, r4
 8007f78:	d105      	bne.n	8007f86 <__libc_init_array+0x2e>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f80:	4798      	blx	r3
 8007f82:	3601      	adds	r6, #1
 8007f84:	e7ee      	b.n	8007f64 <__libc_init_array+0xc>
 8007f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8a:	4798      	blx	r3
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	e7f2      	b.n	8007f76 <__libc_init_array+0x1e>
 8007f90:	0800afb8 	.word	0x0800afb8
 8007f94:	0800afb8 	.word	0x0800afb8
 8007f98:	0800afb8 	.word	0x0800afb8
 8007f9c:	0800afbc 	.word	0x0800afbc

08007fa0 <memset>:
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d100      	bne.n	8007faa <memset+0xa>
 8007fa8:	4770      	bx	lr
 8007faa:	f803 1b01 	strb.w	r1, [r3], #1
 8007fae:	e7f9      	b.n	8007fa4 <memset+0x4>

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
