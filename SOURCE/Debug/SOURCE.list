
SOURCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008088  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003070  08008218  08008218  00018218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b288  0800b288  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b288  0800b288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b290  0800b290  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b294  0800b294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000003d0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e0fc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b3c  00000000  00000000  0003e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00041ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  00043390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000540b  00000000  00000000  000448e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc4d  00000000  00000000  00049cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e01d6  00000000  00000000  00066940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146b16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062f8  00000000  00000000  00146b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008200 	.word	0x08008200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008200 	.word	0x08008200

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b96e 	b.w	80008ec <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468c      	mov	ip, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 8083 	bne.w	800073e <__udivmoddi4+0x116>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d947      	bls.n	80006ce <__udivmoddi4+0xa6>
 800063e:	fab2 f282 	clz	r2, r2
 8000642:	b142      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000644:	f1c2 0020 	rsb	r0, r2, #32
 8000648:	fa24 f000 	lsr.w	r0, r4, r0
 800064c:	4091      	lsls	r1, r2
 800064e:	4097      	lsls	r7, r2
 8000650:	ea40 0c01 	orr.w	ip, r0, r1
 8000654:	4094      	lsls	r4, r2
 8000656:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800065a:	0c23      	lsrs	r3, r4, #16
 800065c:	fbbc f6f8 	udiv	r6, ip, r8
 8000660:	fa1f fe87 	uxth.w	lr, r7
 8000664:	fb08 c116 	mls	r1, r8, r6, ip
 8000668:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800066c:	fb06 f10e 	mul.w	r1, r6, lr
 8000670:	4299      	cmp	r1, r3
 8000672:	d909      	bls.n	8000688 <__udivmoddi4+0x60>
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	f106 30ff 	add.w	r0, r6, #4294967295
 800067a:	f080 8119 	bcs.w	80008b0 <__udivmoddi4+0x288>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 8116 	bls.w	80008b0 <__udivmoddi4+0x288>
 8000684:	3e02      	subs	r6, #2
 8000686:	443b      	add	r3, r7
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000690:	fb08 3310 	mls	r3, r8, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 fe0e 	mul.w	lr, r0, lr
 800069c:	45a6      	cmp	lr, r4
 800069e:	d909      	bls.n	80006b4 <__udivmoddi4+0x8c>
 80006a0:	193c      	adds	r4, r7, r4
 80006a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a6:	f080 8105 	bcs.w	80008b4 <__udivmoddi4+0x28c>
 80006aa:	45a6      	cmp	lr, r4
 80006ac:	f240 8102 	bls.w	80008b4 <__udivmoddi4+0x28c>
 80006b0:	3802      	subs	r0, #2
 80006b2:	443c      	add	r4, r7
 80006b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006b8:	eba4 040e 	sub.w	r4, r4, lr
 80006bc:	2600      	movs	r6, #0
 80006be:	b11d      	cbz	r5, 80006c8 <__udivmoddi4+0xa0>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c5 4300 	strd	r4, r3, [r5]
 80006c8:	4631      	mov	r1, r6
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	b902      	cbnz	r2, 80006d2 <__udivmoddi4+0xaa>
 80006d0:	deff      	udf	#255	; 0xff
 80006d2:	fab2 f282 	clz	r2, r2
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d150      	bne.n	800077c <__udivmoddi4+0x154>
 80006da:	1bcb      	subs	r3, r1, r7
 80006dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006e0:	fa1f f887 	uxth.w	r8, r7
 80006e4:	2601      	movs	r6, #1
 80006e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80006ea:	0c21      	lsrs	r1, r4, #16
 80006ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80006f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f4:	fb08 f30c 	mul.w	r3, r8, ip
 80006f8:	428b      	cmp	r3, r1
 80006fa:	d907      	bls.n	800070c <__udivmoddi4+0xe4>
 80006fc:	1879      	adds	r1, r7, r1
 80006fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000702:	d202      	bcs.n	800070a <__udivmoddi4+0xe2>
 8000704:	428b      	cmp	r3, r1
 8000706:	f200 80e9 	bhi.w	80008dc <__udivmoddi4+0x2b4>
 800070a:	4684      	mov	ip, r0
 800070c:	1ac9      	subs	r1, r1, r3
 800070e:	b2a3      	uxth	r3, r4
 8000710:	fbb1 f0fe 	udiv	r0, r1, lr
 8000714:	fb0e 1110 	mls	r1, lr, r0, r1
 8000718:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800071c:	fb08 f800 	mul.w	r8, r8, r0
 8000720:	45a0      	cmp	r8, r4
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x10c>
 8000724:	193c      	adds	r4, r7, r4
 8000726:	f100 33ff 	add.w	r3, r0, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x10a>
 800072c:	45a0      	cmp	r8, r4
 800072e:	f200 80d9 	bhi.w	80008e4 <__udivmoddi4+0x2bc>
 8000732:	4618      	mov	r0, r3
 8000734:	eba4 0408 	sub.w	r4, r4, r8
 8000738:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800073c:	e7bf      	b.n	80006be <__udivmoddi4+0x96>
 800073e:	428b      	cmp	r3, r1
 8000740:	d909      	bls.n	8000756 <__udivmoddi4+0x12e>
 8000742:	2d00      	cmp	r5, #0
 8000744:	f000 80b1 	beq.w	80008aa <__udivmoddi4+0x282>
 8000748:	2600      	movs	r6, #0
 800074a:	e9c5 0100 	strd	r0, r1, [r5]
 800074e:	4630      	mov	r0, r6
 8000750:	4631      	mov	r1, r6
 8000752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000756:	fab3 f683 	clz	r6, r3
 800075a:	2e00      	cmp	r6, #0
 800075c:	d14a      	bne.n	80007f4 <__udivmoddi4+0x1cc>
 800075e:	428b      	cmp	r3, r1
 8000760:	d302      	bcc.n	8000768 <__udivmoddi4+0x140>
 8000762:	4282      	cmp	r2, r0
 8000764:	f200 80b8 	bhi.w	80008d8 <__udivmoddi4+0x2b0>
 8000768:	1a84      	subs	r4, r0, r2
 800076a:	eb61 0103 	sbc.w	r1, r1, r3
 800076e:	2001      	movs	r0, #1
 8000770:	468c      	mov	ip, r1
 8000772:	2d00      	cmp	r5, #0
 8000774:	d0a8      	beq.n	80006c8 <__udivmoddi4+0xa0>
 8000776:	e9c5 4c00 	strd	r4, ip, [r5]
 800077a:	e7a5      	b.n	80006c8 <__udivmoddi4+0xa0>
 800077c:	f1c2 0320 	rsb	r3, r2, #32
 8000780:	fa20 f603 	lsr.w	r6, r0, r3
 8000784:	4097      	lsls	r7, r2
 8000786:	fa01 f002 	lsl.w	r0, r1, r2
 800078a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800078e:	40d9      	lsrs	r1, r3
 8000790:	4330      	orrs	r0, r6
 8000792:	0c03      	lsrs	r3, r0, #16
 8000794:	fbb1 f6fe 	udiv	r6, r1, lr
 8000798:	fa1f f887 	uxth.w	r8, r7
 800079c:	fb0e 1116 	mls	r1, lr, r6, r1
 80007a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007a4:	fb06 f108 	mul.w	r1, r6, r8
 80007a8:	4299      	cmp	r1, r3
 80007aa:	fa04 f402 	lsl.w	r4, r4, r2
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x19c>
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007b6:	f080 808d 	bcs.w	80008d4 <__udivmoddi4+0x2ac>
 80007ba:	4299      	cmp	r1, r3
 80007bc:	f240 808a 	bls.w	80008d4 <__udivmoddi4+0x2ac>
 80007c0:	3e02      	subs	r6, #2
 80007c2:	443b      	add	r3, r7
 80007c4:	1a5b      	subs	r3, r3, r1
 80007c6:	b281      	uxth	r1, r0
 80007c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb00 f308 	mul.w	r3, r0, r8
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0x1c4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f100 3cff 	add.w	ip, r0, #4294967295
 80007e2:	d273      	bcs.n	80008cc <__udivmoddi4+0x2a4>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	d971      	bls.n	80008cc <__udivmoddi4+0x2a4>
 80007e8:	3802      	subs	r0, #2
 80007ea:	4439      	add	r1, r7
 80007ec:	1acb      	subs	r3, r1, r3
 80007ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80007f2:	e778      	b.n	80006e6 <__udivmoddi4+0xbe>
 80007f4:	f1c6 0c20 	rsb	ip, r6, #32
 80007f8:	fa03 f406 	lsl.w	r4, r3, r6
 80007fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000800:	431c      	orrs	r4, r3
 8000802:	fa20 f70c 	lsr.w	r7, r0, ip
 8000806:	fa01 f306 	lsl.w	r3, r1, r6
 800080a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800080e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000812:	431f      	orrs	r7, r3
 8000814:	0c3b      	lsrs	r3, r7, #16
 8000816:	fbb1 f9fe 	udiv	r9, r1, lr
 800081a:	fa1f f884 	uxth.w	r8, r4
 800081e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000822:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000826:	fb09 fa08 	mul.w	sl, r9, r8
 800082a:	458a      	cmp	sl, r1
 800082c:	fa02 f206 	lsl.w	r2, r2, r6
 8000830:	fa00 f306 	lsl.w	r3, r0, r6
 8000834:	d908      	bls.n	8000848 <__udivmoddi4+0x220>
 8000836:	1861      	adds	r1, r4, r1
 8000838:	f109 30ff 	add.w	r0, r9, #4294967295
 800083c:	d248      	bcs.n	80008d0 <__udivmoddi4+0x2a8>
 800083e:	458a      	cmp	sl, r1
 8000840:	d946      	bls.n	80008d0 <__udivmoddi4+0x2a8>
 8000842:	f1a9 0902 	sub.w	r9, r9, #2
 8000846:	4421      	add	r1, r4
 8000848:	eba1 010a 	sub.w	r1, r1, sl
 800084c:	b2bf      	uxth	r7, r7
 800084e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000852:	fb0e 1110 	mls	r1, lr, r0, r1
 8000856:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800085a:	fb00 f808 	mul.w	r8, r0, r8
 800085e:	45b8      	cmp	r8, r7
 8000860:	d907      	bls.n	8000872 <__udivmoddi4+0x24a>
 8000862:	19e7      	adds	r7, r4, r7
 8000864:	f100 31ff 	add.w	r1, r0, #4294967295
 8000868:	d22e      	bcs.n	80008c8 <__udivmoddi4+0x2a0>
 800086a:	45b8      	cmp	r8, r7
 800086c:	d92c      	bls.n	80008c8 <__udivmoddi4+0x2a0>
 800086e:	3802      	subs	r0, #2
 8000870:	4427      	add	r7, r4
 8000872:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000876:	eba7 0708 	sub.w	r7, r7, r8
 800087a:	fba0 8902 	umull	r8, r9, r0, r2
 800087e:	454f      	cmp	r7, r9
 8000880:	46c6      	mov	lr, r8
 8000882:	4649      	mov	r1, r9
 8000884:	d31a      	bcc.n	80008bc <__udivmoddi4+0x294>
 8000886:	d017      	beq.n	80008b8 <__udivmoddi4+0x290>
 8000888:	b15d      	cbz	r5, 80008a2 <__udivmoddi4+0x27a>
 800088a:	ebb3 020e 	subs.w	r2, r3, lr
 800088e:	eb67 0701 	sbc.w	r7, r7, r1
 8000892:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000896:	40f2      	lsrs	r2, r6
 8000898:	ea4c 0202 	orr.w	r2, ip, r2
 800089c:	40f7      	lsrs	r7, r6
 800089e:	e9c5 2700 	strd	r2, r7, [r5]
 80008a2:	2600      	movs	r6, #0
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	462e      	mov	r6, r5
 80008ac:	4628      	mov	r0, r5
 80008ae:	e70b      	b.n	80006c8 <__udivmoddi4+0xa0>
 80008b0:	4606      	mov	r6, r0
 80008b2:	e6e9      	b.n	8000688 <__udivmoddi4+0x60>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6fd      	b.n	80006b4 <__udivmoddi4+0x8c>
 80008b8:	4543      	cmp	r3, r8
 80008ba:	d2e5      	bcs.n	8000888 <__udivmoddi4+0x260>
 80008bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80008c0:	eb69 0104 	sbc.w	r1, r9, r4
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7df      	b.n	8000888 <__udivmoddi4+0x260>
 80008c8:	4608      	mov	r0, r1
 80008ca:	e7d2      	b.n	8000872 <__udivmoddi4+0x24a>
 80008cc:	4660      	mov	r0, ip
 80008ce:	e78d      	b.n	80007ec <__udivmoddi4+0x1c4>
 80008d0:	4681      	mov	r9, r0
 80008d2:	e7b9      	b.n	8000848 <__udivmoddi4+0x220>
 80008d4:	4666      	mov	r6, ip
 80008d6:	e775      	b.n	80007c4 <__udivmoddi4+0x19c>
 80008d8:	4630      	mov	r0, r6
 80008da:	e74a      	b.n	8000772 <__udivmoddi4+0x14a>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	4439      	add	r1, r7
 80008e2:	e713      	b.n	800070c <__udivmoddi4+0xe4>
 80008e4:	3802      	subs	r0, #2
 80008e6:	443c      	add	r4, r7
 80008e8:	e724      	b.n	8000734 <__udivmoddi4+0x10c>
 80008ea:	bf00      	nop

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2108      	movs	r1, #8
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <button_init+0x14>)
 80008fa:	f003 fa09 	bl	8003d10 <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020c00 	.word	0x40020c00

08000908 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	482f      	ldr	r0, [pc, #188]	; (80009d0 <button_Scan+0xc8>)
 8000914:	f003 f9fc 	bl	8003d10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000918:	2201      	movs	r2, #1
 800091a:	2108      	movs	r1, #8
 800091c:	482c      	ldr	r0, [pc, #176]	; (80009d0 <button_Scan+0xc8>)
 800091e:	f003 f9f7 	bl	8003d10 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000922:	230a      	movs	r3, #10
 8000924:	2202      	movs	r2, #2
 8000926:	492b      	ldr	r1, [pc, #172]	; (80009d4 <button_Scan+0xcc>)
 8000928:	482b      	ldr	r0, [pc, #172]	; (80009d8 <button_Scan+0xd0>)
 800092a:	f004 fb0e 	bl	8004f4a <HAL_SPI_Receive>
	  int button_index = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000936:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	e03f      	b.n	80009be <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db06      	blt.n	8000952 <button_Scan+0x4a>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b03      	cmp	r3, #3
 8000948:	dc03      	bgt.n	8000952 <button_Scan+0x4a>
			  button_index = i + 4;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e018      	b.n	8000984 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b03      	cmp	r3, #3
 8000956:	dd07      	ble.n	8000968 <button_Scan+0x60>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b07      	cmp	r3, #7
 800095c:	dc04      	bgt.n	8000968 <button_Scan+0x60>
			  button_index = 7 - i;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f1c3 0307 	rsb	r3, r3, #7
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e00d      	b.n	8000984 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b07      	cmp	r3, #7
 800096c:	dd06      	ble.n	800097c <button_Scan+0x74>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0b      	cmp	r3, #11
 8000972:	dc03      	bgt.n	800097c <button_Scan+0x74>
			  button_index = i + 4;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3304      	adds	r3, #4
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e003      	b.n	8000984 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f1c3 0317 	rsb	r3, r3, #23
 8000982:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <button_Scan+0xcc>)
 8000986:	881a      	ldrh	r2, [r3, #0]
 8000988:	897b      	ldrh	r3, [r7, #10]
 800098a:	4013      	ands	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <button_Scan+0x96>
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <button_Scan+0xd4>)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2100      	movs	r1, #0
 8000998:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800099c:	e009      	b.n	80009b2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <button_Scan+0xd4>)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b299      	uxth	r1, r3
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <button_Scan+0xd4>)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80009b2:	897b      	ldrh	r3, [r7, #10]
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	ddbc      	ble.n	800093e <button_Scan+0x36>
	  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	20000094 	.word	0x20000094
 80009d8:	20000344 	.word	0x20000344
 80009dc:	200000b8 	.word	0x200000b8

080009e0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80009e4:	2100      	movs	r1, #0
 80009e6:	4802      	ldr	r0, [pc, #8]	; (80009f0 <buzzer_init+0x10>)
 80009e8:	f004 fff0 	bl	80059cc <HAL_TIM_PWM_Start>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000210 	.word	0x20000210

080009f4 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80009f8:	201e      	movs	r0, #30
 80009fa:	f001 fde3 	bl	80025c4 <DEC2BCD>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <ds3231_init+0x80>)
 8000a04:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000a06:	2016      	movs	r0, #22
 8000a08:	f001 fddc 	bl	80025c4 <DEC2BCD>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <ds3231_init+0x80>)
 8000a12:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000a14:	2015      	movs	r0, #21
 8000a16:	f001 fdd5 	bl	80025c4 <DEC2BCD>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <ds3231_init+0x80>)
 8000a20:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000a22:	2006      	movs	r0, #6
 8000a24:	f001 fdce 	bl	80025c4 <DEC2BCD>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <ds3231_init+0x80>)
 8000a2e:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 fdc7 	bl	80025c4 <DEC2BCD>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <ds3231_init+0x80>)
 8000a3c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000a3e:	2009      	movs	r0, #9
 8000a40:	f001 fdc0 	bl	80025c4 <DEC2BCD>
 8000a44:	4603      	mov	r3, r0
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <ds3231_init+0x80>)
 8000a4a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000a4c:	2017      	movs	r0, #23
 8000a4e:	f001 fdb9 	bl	80025c4 <DEC2BCD>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <ds3231_init+0x80>)
 8000a58:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000a5a:	2332      	movs	r3, #50	; 0x32
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	21d0      	movs	r1, #208	; 0xd0
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <ds3231_init+0x84>)
 8000a62:	f003 fab3 	bl	8003fcc <HAL_I2C_IsDeviceReady>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d000      	beq.n	8000a6e <ds3231_init+0x7a>
		while(1);
 8000a6c:	e7fe      	b.n	8000a6c <ds3231_init+0x78>
	};
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000e0 	.word	0x200000e0
 8000a78:	20000124 	.word	0x20000124

08000a7c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <LCD_WR_REG+0x1c>)
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	8013      	strh	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	600ffffe 	.word	0x600ffffe

08000a9c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <LCD_WR_DATA+0x1c>)
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	8053      	strh	r3, [r2, #2]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	600ffffe 	.word	0x600ffffe

08000abc <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <LCD_RD_DATA+0x20>)
 8000ac4:	885b      	ldrh	r3, [r3, #2]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b29b      	uxth	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	600ffffe 	.word	0x600ffffe

08000ae0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4623      	mov	r3, r4
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	4603      	mov	r3, r0
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
 8000afa:	4613      	mov	r3, r2
 8000afc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000afe:	202a      	movs	r0, #42	; 0x2a
 8000b00:	f7ff ffbc 	bl	8000a7c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffc6 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffc0 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffba 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000b28:	887b      	ldrh	r3, [r7, #2]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffb4 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000b34:	202b      	movs	r0, #43	; 0x2b
 8000b36:	f7ff ffa1 	bl	8000a7c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000b3a:	88bb      	ldrh	r3, [r7, #4]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ffab 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffa5 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000b52:	883b      	ldrh	r3, [r7, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff9f 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000b5e:	883b      	ldrh	r3, [r7, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff99 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000b6a:	202c      	movs	r0, #44	; 0x2c
 8000b6c:	f7ff ff86 	bl	8000a7c <LCD_WR_REG>
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <lcd_Clear+0x60>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <lcd_Clear+0x60>)
 8000b8c:	885b      	ldrh	r3, [r3, #2]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ffa3 	bl	8000ae0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	81fb      	strh	r3, [r7, #14]
 8000b9e:	e011      	b.n	8000bc4 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81bb      	strh	r3, [r7, #12]
 8000ba4:	e006      	b.n	8000bb4 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff77 	bl	8000a9c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000bae:	89bb      	ldrh	r3, [r7, #12]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	81bb      	strh	r3, [r7, #12]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <lcd_Clear+0x60>)
 8000bb6:	885b      	ldrh	r3, [r3, #2]
 8000bb8:	89ba      	ldrh	r2, [r7, #12]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d3f3      	bcc.n	8000ba6 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	81fb      	strh	r3, [r7, #14]
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <lcd_Clear+0x60>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	89fa      	ldrh	r2, [r7, #14]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3e8      	bcc.n	8000ba0 <lcd_Clear+0x28>
		}
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000e8 	.word	0x200000e8

08000bdc <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
 8000be6:	460b      	mov	r3, r1
 8000be8:	80bb      	strh	r3, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	88fa      	ldrh	r2, [r7, #6]
 8000bf2:	88b9      	ldrh	r1, [r7, #4]
 8000bf4:	88f8      	ldrh	r0, [r7, #6]
 8000bf6:	f7ff ff73 	bl	8000ae0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff4d 	bl	8000a9c <LCD_WR_DATA>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	4608      	mov	r0, r1
 8000c16:	4611      	mov	r1, r2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4623      	mov	r3, r4
 8000c1c:	80fb      	strh	r3, [r7, #6]
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80bb      	strh	r3, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	70fb      	strb	r3, [r7, #3]
 8000c26:	4613      	mov	r3, r2
 8000c28:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000c32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf14      	ite	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	2300      	moveq	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	fb12 f303 	smulbb	r3, r2, r3
 8000c62:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	3b20      	subs	r3, #32
 8000c68:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b29c      	uxth	r4, r3
 8000c78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	88b9      	ldrh	r1, [r7, #4]
 8000c8a:	88f8      	ldrh	r0, [r7, #6]
 8000c8c:	4622      	mov	r2, r4
 8000c8e:	f7ff ff27 	bl	8000ae0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	827b      	strh	r3, [r7, #18]
 8000c96:	e07a      	b.n	8000d8e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000c98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c9c:	2b0c      	cmp	r3, #12
 8000c9e:	d028      	beq.n	8000cf2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ca4:	2b10      	cmp	r3, #16
 8000ca6:	d108      	bne.n	8000cba <lcd_ShowChar+0xae>
 8000ca8:	78fa      	ldrb	r2, [r7, #3]
 8000caa:	8a7b      	ldrh	r3, [r7, #18]
 8000cac:	493c      	ldr	r1, [pc, #240]	; (8000da0 <lcd_ShowChar+0x194>)
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	440a      	add	r2, r1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	75fb      	strb	r3, [r7, #23]
 8000cb8:	e01b      	b.n	8000cf2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000cba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cbe:	2b18      	cmp	r3, #24
 8000cc0:	d10b      	bne.n	8000cda <lcd_ShowChar+0xce>
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	8a79      	ldrh	r1, [r7, #18]
 8000cc6:	4837      	ldr	r0, [pc, #220]	; (8000da4 <lcd_ShowChar+0x198>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4403      	add	r3, r0
 8000cd2:	440b      	add	r3, r1
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	75fb      	strb	r3, [r7, #23]
 8000cd8:	e00b      	b.n	8000cf2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cde:	2b20      	cmp	r3, #32
 8000ce0:	d15a      	bne.n	8000d98 <lcd_ShowChar+0x18c>
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	8a7b      	ldrh	r3, [r7, #18]
 8000ce6:	4930      	ldr	r1, [pc, #192]	; (8000da8 <lcd_ShowChar+0x19c>)
 8000ce8:	0192      	lsls	r2, r2, #6
 8000cea:	440a      	add	r2, r1
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	75bb      	strb	r3, [r7, #22]
 8000cf6:	e044      	b.n	8000d82 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000cf8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d120      	bne.n	8000d42 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000d00:	7dfa      	ldrb	r2, [r7, #23]
 8000d02:	7dbb      	ldrb	r3, [r7, #22]
 8000d04:	fa42 f303 	asr.w	r3, r2, r3
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d004      	beq.n	8000d1a <lcd_ShowChar+0x10e>
 8000d10:	883b      	ldrh	r3, [r7, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fec2 	bl	8000a9c <LCD_WR_DATA>
 8000d18:	e003      	b.n	8000d22 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000d1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff febd 	bl	8000a9c <LCD_WR_DATA>
				m++;
 8000d22:	7d7b      	ldrb	r3, [r7, #21]
 8000d24:	3301      	adds	r3, #1
 8000d26:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000d28:	7d7b      	ldrb	r3, [r7, #21]
 8000d2a:	7bfa      	ldrb	r2, [r7, #15]
 8000d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d30:	fb02 f201 	mul.w	r2, r2, r1
 8000d34:	1a9b      	subs	r3, r3, r2
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d11f      	bne.n	8000d7c <lcd_ShowChar+0x170>
				{
					m=0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	757b      	strb	r3, [r7, #21]
					break;
 8000d40:	e022      	b.n	8000d88 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000d42:	7dfa      	ldrb	r2, [r7, #23]
 8000d44:	7dbb      	ldrb	r3, [r7, #22]
 8000d46:	fa42 f303 	asr.w	r3, r2, r3
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d005      	beq.n	8000d5e <lcd_ShowChar+0x152>
 8000d52:	883a      	ldrh	r2, [r7, #0]
 8000d54:	88b9      	ldrh	r1, [r7, #4]
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff3f 	bl	8000bdc <lcd_DrawPoint>
				x++;
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	3301      	adds	r3, #1
 8000d62:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000d64:	88fa      	ldrh	r2, [r7, #6]
 8000d66:	8a3b      	ldrh	r3, [r7, #16]
 8000d68:	1ad2      	subs	r2, r2, r3
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d105      	bne.n	8000d7c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000d70:	8a3b      	ldrh	r3, [r7, #16]
 8000d72:	80fb      	strh	r3, [r7, #6]
					y++;
 8000d74:	88bb      	ldrh	r3, [r7, #4]
 8000d76:	3301      	adds	r3, #1
 8000d78:	80bb      	strh	r3, [r7, #4]
					break;
 8000d7a:	e005      	b.n	8000d88 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000d7c:	7dbb      	ldrb	r3, [r7, #22]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75bb      	strb	r3, [r7, #22]
 8000d82:	7dbb      	ldrb	r3, [r7, #22]
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	d9b7      	bls.n	8000cf8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000d88:	8a7b      	ldrh	r3, [r7, #18]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	827b      	strh	r3, [r7, #18]
 8000d8e:	8a7a      	ldrh	r2, [r7, #18]
 8000d90:	89bb      	ldrh	r3, [r7, #12]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d380      	bcc.n	8000c98 <lcd_ShowChar+0x8c>
 8000d96:	e000      	b.n	8000d9a <lcd_ShowChar+0x18e>
		else return;
 8000d98:	bf00      	nop
				}
			}
		}
	}
}
 8000d9a:	371c      	adds	r7, #28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	080082b4 	.word	0x080082b4
 8000da4:	080088a4 	.word	0x080088a4
 8000da8:	08009a74 	.word	0x08009a74

08000dac <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <lcd_SetDir+0x44>)
 8000dc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dcc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <lcd_SetDir+0x44>)
 8000dd0:	22f0      	movs	r2, #240	; 0xf0
 8000dd2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000dd4:	e006      	b.n	8000de4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <lcd_SetDir+0x44>)
 8000dd8:	22f0      	movs	r2, #240	; 0xf0
 8000dda:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <lcd_SetDir+0x44>)
 8000dde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000de2:	805a      	strh	r2, [r3, #2]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	200000e8 	.word	0x200000e8

08000df4 <lcd_init>:


void lcd_init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	48aa      	ldr	r0, [pc, #680]	; (80010a8 <lcd_init+0x2b4>)
 8000e00:	f002 ff86 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e08:	f001 fc9c 	bl	8002744 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e12:	48a5      	ldr	r0, [pc, #660]	; (80010a8 <lcd_init+0x2b4>)
 8000e14:	f002 ff7c 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1c:	f001 fc92 	bl	8002744 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff ffc3 	bl	8000dac <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000e26:	20d3      	movs	r0, #211	; 0xd3
 8000e28:	f7ff fe28 	bl	8000a7c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000e2c:	f7ff fe46 	bl	8000abc <LCD_RD_DATA>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b9d      	ldr	r3, [pc, #628]	; (80010ac <lcd_init+0x2b8>)
 8000e36:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e38:	f7ff fe40 	bl	8000abc <LCD_RD_DATA>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b9a      	ldr	r3, [pc, #616]	; (80010ac <lcd_init+0x2b8>)
 8000e42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e44:	f7ff fe3a 	bl	8000abc <LCD_RD_DATA>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b97      	ldr	r3, [pc, #604]	; (80010ac <lcd_init+0x2b8>)
 8000e4e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000e50:	4b96      	ldr	r3, [pc, #600]	; (80010ac <lcd_init+0x2b8>)
 8000e52:	889b      	ldrh	r3, [r3, #4]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b94      	ldr	r3, [pc, #592]	; (80010ac <lcd_init+0x2b8>)
 8000e5a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000e5c:	f7ff fe2e 	bl	8000abc <LCD_RD_DATA>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b91      	ldr	r3, [pc, #580]	; (80010ac <lcd_init+0x2b8>)
 8000e66:	889b      	ldrh	r3, [r3, #4]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b8f      	ldr	r3, [pc, #572]	; (80010ac <lcd_init+0x2b8>)
 8000e6e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000e70:	20cf      	movs	r0, #207	; 0xcf
 8000e72:	f7ff fe03 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fe10 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000e7c:	20c1      	movs	r0, #193	; 0xc1
 8000e7e:	f7ff fe0d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000e82:	2030      	movs	r0, #48	; 0x30
 8000e84:	f7ff fe0a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000e88:	20ed      	movs	r0, #237	; 0xed
 8000e8a:	f7ff fdf7 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000e8e:	2064      	movs	r0, #100	; 0x64
 8000e90:	f7ff fe04 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f7ff fe01 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000e9a:	2012      	movs	r0, #18
 8000e9c:	f7ff fdfe 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000ea0:	2081      	movs	r0, #129	; 0x81
 8000ea2:	f7ff fdfb 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000ea6:	20e8      	movs	r0, #232	; 0xe8
 8000ea8:	f7ff fde8 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000eac:	2085      	movs	r0, #133	; 0x85
 8000eae:	f7ff fdf5 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000eb2:	2010      	movs	r0, #16
 8000eb4:	f7ff fdf2 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000eb8:	207a      	movs	r0, #122	; 0x7a
 8000eba:	f7ff fdef 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000ebe:	20cb      	movs	r0, #203	; 0xcb
 8000ec0:	f7ff fddc 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000ec4:	2039      	movs	r0, #57	; 0x39
 8000ec6:	f7ff fde9 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000eca:	202c      	movs	r0, #44	; 0x2c
 8000ecc:	f7ff fde6 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fde3 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000ed6:	2034      	movs	r0, #52	; 0x34
 8000ed8:	f7ff fde0 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000edc:	2002      	movs	r0, #2
 8000ede:	f7ff fddd 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ee2:	20f7      	movs	r0, #247	; 0xf7
 8000ee4:	f7ff fdca 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000ee8:	2020      	movs	r0, #32
 8000eea:	f7ff fdd7 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000eee:	20ea      	movs	r0, #234	; 0xea
 8000ef0:	f7ff fdc4 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fdd1 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff fdce 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000f00:	20c0      	movs	r0, #192	; 0xc0
 8000f02:	f7ff fdbb 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000f06:	201b      	movs	r0, #27
 8000f08:	f7ff fdc8 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000f0c:	20c1      	movs	r0, #193	; 0xc1
 8000f0e:	f7ff fdb5 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fdc2 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000f18:	20c5      	movs	r0, #197	; 0xc5
 8000f1a:	f7ff fdaf 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000f1e:	2030      	movs	r0, #48	; 0x30
 8000f20:	f7ff fdbc 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000f24:	2030      	movs	r0, #48	; 0x30
 8000f26:	f7ff fdb9 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000f2a:	20c7      	movs	r0, #199	; 0xc7
 8000f2c:	f7ff fda6 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000f30:	20b7      	movs	r0, #183	; 0xb7
 8000f32:	f7ff fdb3 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000f36:	2036      	movs	r0, #54	; 0x36
 8000f38:	f7ff fda0 	bl	8000a7c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000f3c:	2008      	movs	r0, #8
 8000f3e:	f7ff fdad 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000f42:	203a      	movs	r0, #58	; 0x3a
 8000f44:	f7ff fd9a 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000f48:	2055      	movs	r0, #85	; 0x55
 8000f4a:	f7ff fda7 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000f4e:	20b1      	movs	r0, #177	; 0xb1
 8000f50:	f7ff fd94 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fda1 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000f5a:	201a      	movs	r0, #26
 8000f5c:	f7ff fd9e 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000f60:	20b6      	movs	r0, #182	; 0xb6
 8000f62:	f7ff fd8b 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f7ff fd98 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000f6c:	20a2      	movs	r0, #162	; 0xa2
 8000f6e:	f7ff fd95 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000f72:	20f2      	movs	r0, #242	; 0xf2
 8000f74:	f7ff fd82 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fd8f 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000f7e:	2026      	movs	r0, #38	; 0x26
 8000f80:	f7ff fd7c 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff fd89 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000f8a:	20e0      	movs	r0, #224	; 0xe0
 8000f8c:	f7ff fd76 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000f90:	200f      	movs	r0, #15
 8000f92:	f7ff fd83 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000f96:	202a      	movs	r0, #42	; 0x2a
 8000f98:	f7ff fd80 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000f9c:	2028      	movs	r0, #40	; 0x28
 8000f9e:	f7ff fd7d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000fa2:	2008      	movs	r0, #8
 8000fa4:	f7ff fd7a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000fa8:	200e      	movs	r0, #14
 8000faa:	f7ff fd77 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000fae:	2008      	movs	r0, #8
 8000fb0:	f7ff fd74 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000fb4:	2054      	movs	r0, #84	; 0x54
 8000fb6:	f7ff fd71 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000fba:	20a9      	movs	r0, #169	; 0xa9
 8000fbc:	f7ff fd6e 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000fc0:	2043      	movs	r0, #67	; 0x43
 8000fc2:	f7ff fd6b 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f7ff fd68 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000fcc:	200f      	movs	r0, #15
 8000fce:	f7ff fd65 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff fd62 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fd5f 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fd5c 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fd59 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000fea:	20e1      	movs	r0, #225	; 0xe1
 8000fec:	f7ff fd46 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fd53 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000ff6:	2015      	movs	r0, #21
 8000ff8:	f7ff fd50 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000ffc:	2017      	movs	r0, #23
 8000ffe:	f7ff fd4d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001002:	2007      	movs	r0, #7
 8001004:	f7ff fd4a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001008:	2011      	movs	r0, #17
 800100a:	f7ff fd47 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800100e:	2006      	movs	r0, #6
 8001010:	f7ff fd44 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001014:	202b      	movs	r0, #43	; 0x2b
 8001016:	f7ff fd41 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800101a:	2056      	movs	r0, #86	; 0x56
 800101c:	f7ff fd3e 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001020:	203c      	movs	r0, #60	; 0x3c
 8001022:	f7ff fd3b 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001026:	2005      	movs	r0, #5
 8001028:	f7ff fd38 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800102c:	2010      	movs	r0, #16
 800102e:	f7ff fd35 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff fd32 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001038:	203f      	movs	r0, #63	; 0x3f
 800103a:	f7ff fd2f 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800103e:	203f      	movs	r0, #63	; 0x3f
 8001040:	f7ff fd2c 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001044:	200f      	movs	r0, #15
 8001046:	f7ff fd29 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800104a:	202b      	movs	r0, #43	; 0x2b
 800104c:	f7ff fd16 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fd23 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff fd20 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fd1d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001062:	203f      	movs	r0, #63	; 0x3f
 8001064:	f7ff fd1a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001068:	202a      	movs	r0, #42	; 0x2a
 800106a:	f7ff fd07 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fd14 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fd11 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fd0e 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001080:	20ef      	movs	r0, #239	; 0xef
 8001082:	f7ff fd0b 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001086:	2011      	movs	r0, #17
 8001088:	f7ff fcf8 	bl	8000a7c <LCD_WR_REG>
	HAL_Delay(120);
 800108c:	2078      	movs	r0, #120	; 0x78
 800108e:	f001 fb59 	bl	8002744 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001092:	2029      	movs	r0, #41	; 0x29
 8001094:	f7ff fcf2 	bl	8000a7c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <lcd_init+0x2bc>)
 80010a0:	f002 fe36 	bl	8003d10 <HAL_GPIO_WritePin>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020800 	.word	0x40020800
 80010ac:	200000e8 	.word	0x200000e8
 80010b0:	40020000 	.word	0x40020000

080010b4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	461a      	mov	r2, r3
 80010be:	4603      	mov	r3, r0
 80010c0:	81fb      	strh	r3, [r7, #14]
 80010c2:	460b      	mov	r3, r1
 80010c4:	81bb      	strh	r3, [r7, #12]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80010d2:	e048      	b.n	8001166 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d145      	bne.n	8001166 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80010da:	89fa      	ldrh	r2, [r7, #14]
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <lcd_ShowStr+0xc4>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	1acb      	subs	r3, r1, r3
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dc3f      	bgt.n	8001170 <lcd_ShowStr+0xbc>
 80010f0:	89ba      	ldrh	r2, [r7, #12]
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <lcd_ShowStr+0xc4>)
 80010f4:	885b      	ldrh	r3, [r3, #2]
 80010f6:	4619      	mov	r1, r3
 80010f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010fc:	1acb      	subs	r3, r1, r3
 80010fe:	429a      	cmp	r2, r3
 8001100:	dc36      	bgt.n	8001170 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b80      	cmp	r3, #128	; 0x80
 8001108:	d902      	bls.n	8001110 <lcd_ShowStr+0x5c>
 800110a:	2301      	movs	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	e02a      	b.n	8001166 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b0d      	cmp	r3, #13
 8001116:	d10b      	bne.n	8001130 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001118:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800111c:	b29a      	uxth	r2, r3
 800111e:	89bb      	ldrh	r3, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001124:	8abb      	ldrh	r3, [r7, #20]
 8001126:	81fb      	strh	r3, [r7, #14]
					str++;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	e017      	b.n	8001160 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	88fc      	ldrh	r4, [r7, #6]
 8001136:	89b9      	ldrh	r1, [r7, #12]
 8001138:	89f8      	ldrh	r0, [r7, #14]
 800113a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4623      	mov	r3, r4
 800114c:	f7ff fd5e 	bl	8000c0c <lcd_ShowChar>
					x+=sizey/2;
 8001150:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001154:	085b      	lsrs	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b29a      	uxth	r2, r3
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	4413      	add	r3, r2
 800115e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3301      	adds	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1b2      	bne.n	80010d4 <lcd_ShowStr+0x20>
 800116e:	e000      	b.n	8001172 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001170:	bf00      	nop
			}
		}
	}
}
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	200000e8 	.word	0x200000e8

0800117c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <led7_init+0x14>)
 8001186:	f002 fdc3 	bl	8003d10 <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021800 	.word	0x40021800

08001194 <led7_Scan>:

void led7_Scan(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001198:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <led7_Scan+0x104>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <led7_Scan+0x104>)
 80011a2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80011a4:	4b3d      	ldr	r3, [pc, #244]	; (800129c <led7_Scan+0x108>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a3d      	ldr	r2, [pc, #244]	; (80012a0 <led7_Scan+0x10c>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <led7_Scan+0x104>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <led7_Scan+0x104>)
 80011be:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80011c0:	4b36      	ldr	r3, [pc, #216]	; (800129c <led7_Scan+0x108>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d847      	bhi.n	8001258 <led7_Scan+0xc4>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <led7_Scan+0x3c>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011ff 	.word	0x080011ff
 80011d8:	0800121d 	.word	0x0800121d
 80011dc:	0800123b 	.word	0x0800123b
	case 0:
		spi_buffer |= 0x00b0;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <led7_Scan+0x104>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <led7_Scan+0x104>)
 80011ec:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <led7_Scan+0x104>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <led7_Scan+0x104>)
 80011fa:	801a      	strh	r2, [r3, #0]
		break;
 80011fc:	e02d      	b.n	800125a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <led7_Scan+0x104>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <led7_Scan+0x104>)
 800120a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <led7_Scan+0x104>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	f023 0320 	bic.w	r3, r3, #32
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <led7_Scan+0x104>)
 8001218:	801a      	strh	r2, [r3, #0]
		break;
 800121a:	e01e      	b.n	800125a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <led7_Scan+0x104>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <led7_Scan+0x104>)
 8001228:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <led7_Scan+0x104>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	f023 0310 	bic.w	r3, r3, #16
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <led7_Scan+0x104>)
 8001236:	801a      	strh	r2, [r3, #0]
		break;
 8001238:	e00f      	b.n	800125a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <led7_Scan+0x104>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <led7_Scan+0x104>)
 8001246:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <led7_Scan+0x104>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <led7_Scan+0x104>)
 8001254:	801a      	strh	r2, [r3, #0]
		break;
 8001256:	e000      	b.n	800125a <led7_Scan+0xc6>
	default:
		break;
 8001258:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <led7_Scan+0x108>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	425a      	negs	r2, r3
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	bf58      	it	pl
 800126c:	4253      	negpl	r3, r2
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <led7_Scan+0x108>)
 8001270:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <led7_Scan+0x110>)
 8001278:	f002 fd4a 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800127c:	2301      	movs	r3, #1
 800127e:	2202      	movs	r2, #2
 8001280:	4905      	ldr	r1, [pc, #20]	; (8001298 <led7_Scan+0x104>)
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <led7_Scan+0x114>)
 8001284:	f003 fd25 	bl	8004cd2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <led7_Scan+0x110>)
 800128e:	f002 fd3f 	bl	8003d10 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000004 	.word	0x20000004
 800129c:	20000098 	.word	0x20000098
 80012a0:	20000000 	.word	0x20000000
 80012a4:	40021800 	.word	0x40021800
 80012a8:	20000344 	.word	0x20000344

080012ac <lightProcess>:

#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <lightProcess+0x58>)
 80012b2:	8b5b      	ldrh	r3, [r3, #26]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d113      	bne.n	80012e0 <lightProcess+0x34>
		light_status = 1 - light_status;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <lightProcess+0x5c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f1c3 0301 	rsb	r3, r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <lightProcess+0x5c>)
 80012c4:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <lightProcess+0x5c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d104      	bne.n	80012d8 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 80012ce:	2101      	movs	r1, #1
 80012d0:	480e      	ldr	r0, [pc, #56]	; (800130c <lightProcess+0x60>)
 80012d2:	f001 f901 	bl	80024d8 <uart_EspSendBytes>
 80012d6:	e003      	b.n	80012e0 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 80012d8:	2101      	movs	r1, #1
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <lightProcess+0x64>)
 80012dc:	f001 f8fc 	bl	80024d8 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <lightProcess+0x5c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2120      	movs	r1, #32
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <lightProcess+0x68>)
 80012ee:	f002 fd0f 	bl	8003d10 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 80012f2:	e004      	b.n	80012fe <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2120      	movs	r1, #32
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <lightProcess+0x68>)
 80012fa:	f002 fd09 	bl	8003d10 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000b8 	.word	0x200000b8
 8001308:	2000009c 	.word	0x2000009c
 800130c:	08008218 	.word	0x08008218
 8001310:	0800821c 	.word	0x0800821c
 8001314:	40021000 	.word	0x40021000

08001318 <test_Esp>:

void test_Esp(){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 800131e:	f001 f937 	bl	8002590 <uart_EspCheck>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <test_Esp+0x1a>
 8001328:	2101      	movs	r1, #1
 800132a:	480a      	ldr	r0, [pc, #40]	; (8001354 <test_Esp+0x3c>)
 800132c:	f001 f8d4 	bl	80024d8 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 8001330:	e00c      	b.n	800134c <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 8001332:	2300      	movs	r3, #0
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2318      	movs	r3, #24
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <test_Esp+0x40>)
 8001344:	2132      	movs	r1, #50	; 0x32
 8001346:	200a      	movs	r0, #10
 8001348:	f7ff feb4 	bl	80010b4 <lcd_ShowStr>
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	08008220 	.word	0x08008220
 8001358:	08008224 	.word	0x08008224

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b090      	sub	sp, #64	; 0x40
 8001360:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001362:	f001 f97d 	bl	8002660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001366:	f000 f849 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f000 fafd 	bl	8001968 <MX_GPIO_Init>
  MX_TIM2_Init();
 800136e:	f000 f9ed 	bl	800174c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001372:	f000 f965 	bl	8001640 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001376:	f000 fc19 	bl	8001bac <MX_FSMC_Init>
  MX_USART1_UART_Init();
 800137a:	f000 fa81 	bl	8001880 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800137e:	f000 fad3 	bl	8001928 <MX_DMA_Init>
  MX_ADC1_Init();
 8001382:	f000 f8a5 	bl	80014d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001386:	f000 f92d 	bl	80015e4 <MX_I2C1_Init>
  MX_TIM13_Init();
 800138a:	f000 fa2b 	bl	80017e4 <MX_TIM13_Init>
  MX_TIM1_Init();
 800138e:	f000 f98d 	bl	80016ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001392:	f000 fa9f 	bl	80018d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001396:	f000 fc83 	bl	8001ca0 <system_init>
  lcd_Clear(BLACK);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fbec 	bl	8000b78 <lcd_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!flag_timer2);
 80013a0:	bf00      	nop
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <main+0x98>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0fb      	beq.n	80013a2 <main+0x46>
	  flag_timer2 = 0;
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <main+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80013b0:	f7ff faaa 	bl	8000908 <button_Scan>
	  test_Esp();
 80013b4:	f7ff ffb0 	bl	8001318 <test_Esp>
	  lightProcess();
 80013b8:	f7ff ff78 	bl	80012ac <lightProcess>

//	  temperature = sensor_GetTemperature();
	  sprintf(buffer, sizeof(buffer), "!TEMP:%f#", sensor_GetTemperature());
 80013bc:	f000 fcae 	bl	8001d1c <sensor_GetTemperature>
 80013c0:	ee10 3a10 	vmov	r3, s0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8bf 	bl	8000548 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	1d38      	adds	r0, r7, #4
 80013d0:	e9cd 2300 	strd	r2, r3, [sp]
 80013d4:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <main+0x9c>)
 80013d6:	2132      	movs	r1, #50	; 0x32
 80013d8:	f006 fae4 	bl	80079a4 <siprintf>
	  uart_EspSendBytes((uint8_t*)buffer, strlen(buffer));
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f7fe fef6 	bl	80001d0 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 f873 	bl	80024d8 <uart_EspSendBytes>
	  while (!flag_timer2);
 80013f2:	e7d5      	b.n	80013a0 <main+0x44>
 80013f4:	2000009e 	.word	0x2000009e
 80013f8:	08008230 	.word	0x08008230

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b094      	sub	sp, #80	; 0x50
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2230      	movs	r2, #48	; 0x30
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f006 fac2 	bl	8007994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <SystemClock_Config+0xcc>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a27      	ldr	r2, [pc, #156]	; (80014c8 <SystemClock_Config+0xcc>)
 800142a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <SystemClock_Config+0xcc>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <SystemClock_Config+0xd0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <SystemClock_Config+0xd0>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <SystemClock_Config+0xd0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800146c:	2308      	movs	r3, #8
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001470:	23a8      	movs	r3, #168	; 0xa8
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001474:	2302      	movs	r3, #2
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001478:	2304      	movs	r3, #4
 800147a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4618      	mov	r0, r3
 8001482:	f002 ff29 	bl	80042d8 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800148c:	f000 fc32 	bl	8001cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2302      	movs	r3, #2
 8001496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800149c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2105      	movs	r1, #5
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f98a 	bl	80047c8 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ba:	f000 fc1b 	bl	8001cf4 <Error_Handler>
  }
}
 80014be:	bf00      	nop
 80014c0:	3750      	adds	r7, #80	; 0x50
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000

080014d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <MX_ADC1_Init+0x108>)
 80014e4:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <MX_ADC1_Init+0x10c>)
 80014e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014e8:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <MX_ADC1_Init+0x108>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ee:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <MX_ADC1_Init+0x108>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <MX_ADC1_Init+0x108>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <MX_ADC1_Init+0x108>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <MX_ADC1_Init+0x108>)
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <MX_ADC1_Init+0x108>)
 800150a:	2200      	movs	r2, #0
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <MX_ADC1_Init+0x108>)
 8001510:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <MX_ADC1_Init+0x110>)
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <MX_ADC1_Init+0x108>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <MX_ADC1_Init+0x108>)
 800151c:	2205      	movs	r2, #5
 800151e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_ADC1_Init+0x108>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_ADC1_Init+0x108>)
 800152a:	2201      	movs	r2, #1
 800152c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152e:	482a      	ldr	r0, [pc, #168]	; (80015d8 <MX_ADC1_Init+0x108>)
 8001530:	f001 f92c 	bl	800278c <HAL_ADC_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 fbdb 	bl	8001cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800153e:	2308      	movs	r3, #8
 8001540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	4822      	ldr	r0, [pc, #136]	; (80015d8 <MX_ADC1_Init+0x108>)
 8001550:	f001 fa8e 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800155a:	f000 fbcb 	bl	8001cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800155e:	2309      	movs	r3, #9
 8001560:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001562:	2302      	movs	r3, #2
 8001564:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	481b      	ldr	r0, [pc, #108]	; (80015d8 <MX_ADC1_Init+0x108>)
 800156c:	f001 fa80 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001576:	f000 fbbd 	bl	8001cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800157a:	230a      	movs	r3, #10
 800157c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800157e:	2303      	movs	r3, #3
 8001580:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001582:	463b      	mov	r3, r7
 8001584:	4619      	mov	r1, r3
 8001586:	4814      	ldr	r0, [pc, #80]	; (80015d8 <MX_ADC1_Init+0x108>)
 8001588:	f001 fa72 	bl	8002a70 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001592:	f000 fbaf 	bl	8001cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001596:	230b      	movs	r3, #11
 8001598:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800159a:	2304      	movs	r3, #4
 800159c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	4619      	mov	r1, r3
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_ADC1_Init+0x108>)
 80015a4:	f001 fa64 	bl	8002a70 <HAL_ADC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80015ae:	f000 fba1 	bl	8001cf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015b2:	230c      	movs	r3, #12
 80015b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80015b6:	2305      	movs	r3, #5
 80015b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_ADC1_Init+0x108>)
 80015c0:	f001 fa56 	bl	8002a70 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80015ca:	f000 fb93 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200001c8 	.word	0x200001c8
 80015dc:	40012000 	.word	0x40012000
 80015e0:	0f000001 	.word	0x0f000001

080015e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_I2C1_Init+0x50>)
 80015ea:	4a13      	ldr	r2, [pc, #76]	; (8001638 <MX_I2C1_Init+0x54>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_I2C1_Init+0x50>)
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_I2C1_Init+0x58>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_I2C1_Init+0x50>)
 8001602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_I2C1_Init+0x50>)
 8001622:	f002 fb8f 	bl	8003d44 <HAL_I2C_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 fb62 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000124 	.word	0x20000124
 8001638:	40005400 	.word	0x40005400
 800163c:	000186a0 	.word	0x000186a0

08001640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <MX_SPI1_Init+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_SPI1_Init+0x64>)
 800164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_SPI1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_SPI1_Init+0x64>)
 800166c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI1_Init+0x64>)
 800168c:	220a      	movs	r2, #10
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_SPI1_Init+0x64>)
 8001692:	f003 fa95 	bl	8004bc0 <HAL_SPI_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800169c:	f000 fb2a 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000344 	.word	0x20000344
 80016a8:	40013000 	.word	0x40013000

080016ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_TIM1_Init+0x98>)
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <MX_TIM1_Init+0x9c>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM1_Init+0x98>)
 80016d0:	2253      	movs	r2, #83	; 0x53
 80016d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_TIM1_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM1_Init+0x98>)
 80016dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_TIM1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_TIM1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_TIM1_Init+0x98>)
 80016f6:	f004 f84f 	bl	8005798 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001700:	f000 faf8 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM1_Init+0x98>)
 8001712:	f004 fbed 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800171c:	f000 faea 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM1_Init+0x98>)
 800172e:	f004 ffdf 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001738:	f000 fadc 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002fc 	.word	0x200002fc
 8001748:	40010000 	.word	0x40010000

0800174c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_TIM2_Init+0x94>)
 800176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001772:	f240 3247 	movw	r2, #839	; 0x347
 8001776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_TIM2_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001780:	2263      	movs	r2, #99	; 0x63
 8001782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_TIM2_Init+0x94>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <MX_TIM2_Init+0x94>)
 8001792:	f004 f801 	bl	8005798 <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800179c:	f000 faaa 	bl	8001cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_TIM2_Init+0x94>)
 80017ae:	f004 fb9f 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017b8:	f000 fa9c 	bl	8001cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_TIM2_Init+0x94>)
 80017ca:	f004 ff91 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017d4:	f000 fa8e 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000039c 	.word	0x2000039c

080017e4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_TIM13_Init+0x94>)
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <MX_TIM13_Init+0x98>)
 8001800:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_TIM13_Init+0x94>)
 8001804:	f240 3247 	movw	r2, #839	; 0x347
 8001808:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_TIM13_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_TIM13_Init+0x94>)
 8001812:	2263      	movs	r2, #99	; 0x63
 8001814:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_TIM13_Init+0x94>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_TIM13_Init+0x94>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001822:	4815      	ldr	r0, [pc, #84]	; (8001878 <MX_TIM13_Init+0x94>)
 8001824:	f003 ffb8 	bl	8005798 <HAL_TIM_Base_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800182e:	f000 fa61 	bl	8001cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001832:	4811      	ldr	r0, [pc, #68]	; (8001878 <MX_TIM13_Init+0x94>)
 8001834:	f004 f870 	bl	8005918 <HAL_TIM_PWM_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800183e:	f000 fa59 	bl	8001cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001842:	2360      	movs	r3, #96	; 0x60
 8001844:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	4807      	ldr	r0, [pc, #28]	; (8001878 <MX_TIM13_Init+0x94>)
 800185a:	f004 fa87 	bl	8005d6c <HAL_TIM_PWM_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001864:	f000 fa46 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <MX_TIM13_Init+0x94>)
 800186a:	f000 fc63 	bl	8002134 <HAL_TIM_MspPostInit>

}
 800186e:	bf00      	nop
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000210 	.word	0x20000210
 800187c:	40001c00 	.word	0x40001c00

08001880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART1_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART1_UART_Init+0x4c>)
 80018b8:	f004 ffaa 	bl	8006810 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f000 fa17 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000258 	.word	0x20000258
 80018d0:	40011000 	.word	0x40011000

080018d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART2_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 800190c:	f004 ff80 	bl	8006810 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f000 f9ed 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200003e4 	.word	0x200003e4
 8001924:	40004400 	.word	0x40004400

08001928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_DMA_Init+0x3c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <MX_DMA_Init+0x3c>)
 8001938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_DMA_Init+0x3c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2038      	movs	r0, #56	; 0x38
 8001950:	f001 fc09 	bl	8003166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001954:	2038      	movs	r0, #56	; 0x38
 8001956:	f001 fc22 	bl	800319e <HAL_NVIC_EnableIRQ>

}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
 8001982:	4b83      	ldr	r3, [pc, #524]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a82      	ldr	r2, [pc, #520]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a7b      	ldr	r2, [pc, #492]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a74      	ldr	r2, [pc, #464]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019c0:	f043 0320 	orr.w	r3, r3, #32
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	4b6e      	ldr	r3, [pc, #440]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a6d      	ldr	r2, [pc, #436]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b6b      	ldr	r3, [pc, #428]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <MX_GPIO_Init+0x228>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b64      	ldr	r3, [pc, #400]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b60      	ldr	r3, [pc, #384]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a5f      	ldr	r2, [pc, #380]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b52      	ldr	r3, [pc, #328]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a51      	ldr	r2, [pc, #324]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <MX_GPIO_Init+0x228>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2170      	movs	r1, #112	; 0x70
 8001a62:	484c      	ldr	r0, [pc, #304]	; (8001b94 <MX_GPIO_Init+0x22c>)
 8001a64:	f002 f954 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001a6e:	484a      	ldr	r0, [pc, #296]	; (8001b98 <MX_GPIO_Init+0x230>)
 8001a70:	f002 f94e 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7a:	4848      	ldr	r0, [pc, #288]	; (8001b9c <MX_GPIO_Init+0x234>)
 8001a7c:	f002 f948 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001a86:	4846      	ldr	r0, [pc, #280]	; (8001ba0 <MX_GPIO_Init+0x238>)
 8001a88:	f002 f942 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a92:	4844      	ldr	r0, [pc, #272]	; (8001ba4 <MX_GPIO_Init+0x23c>)
 8001a94:	f002 f93c 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	4842      	ldr	r0, [pc, #264]	; (8001ba8 <MX_GPIO_Init+0x240>)
 8001a9e:	f002 f937 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001aa2:	2370      	movs	r3, #112	; 0x70
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4836      	ldr	r0, [pc, #216]	; (8001b94 <MX_GPIO_Init+0x22c>)
 8001aba:	f001 ff8d 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001abe:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4830      	ldr	r0, [pc, #192]	; (8001b98 <MX_GPIO_Init+0x230>)
 8001ad8:	f001 ff7e 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8001adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	4619      	mov	r1, r3
 8001af0:	482a      	ldr	r0, [pc, #168]	; (8001b9c <MX_GPIO_Init+0x234>)
 8001af2:	f001 ff71 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 8001af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4823      	ldr	r0, [pc, #140]	; (8001b9c <MX_GPIO_Init+0x234>)
 8001b10:	f001 ff62 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001b14:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <MX_GPIO_Init+0x238>)
 8001b2e:	f001 ff53 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_PEN_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001b32:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	4814      	ldr	r0, [pc, #80]	; (8001b98 <MX_GPIO_Init+0x230>)
 8001b48:	f001 ff46 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <MX_GPIO_Init+0x23c>)
 8001b66:	f001 ff37 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <MX_GPIO_Init+0x240>)
 8001b82:	f001 ff29 	bl	80039d8 <HAL_GPIO_Init>

}
 8001b86:	bf00      	nop
 8001b88:	3738      	adds	r7, #56	; 0x38
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020c00 	.word	0x40020c00

08001bac <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001bda:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001bde:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001be2:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <MX_FSMC_Init+0xf0>)
 8001be4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001c3e:	230f      	movs	r3, #15
 8001c40:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001c42:	230f      	movs	r3, #15
 8001c44:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001c46:	233c      	movs	r3, #60	; 0x3c
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001c4e:	2310      	movs	r3, #16
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001c52:	2311      	movs	r3, #17
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001c5e:	230f      	movs	r3, #15
 8001c60:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001c62:	2309      	movs	r3, #9
 8001c64:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001c6e:	2311      	movs	r3, #17
 8001c70:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001c76:	463a      	mov	r2, r7
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <MX_FSMC_Init+0xec>)
 8001c80:	f003 fd46 	bl	8005710 <HAL_SRAM_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001c8a:	f000 f833 	bl	8001cf4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001c8e:	bf00      	nop
 8001c90:	3738      	adds	r7, #56	; 0x38
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000178 	.word	0x20000178
 8001c9c:	a0000104 	.word	0xa0000104

08001ca0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <system_init+0x50>)
 8001caa:	f002 f831 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2140      	movs	r1, #64	; 0x40
 8001cb2:	480f      	ldr	r0, [pc, #60]	; (8001cf0 <system_init+0x50>)
 8001cb4:	f002 f82c 	bl	8003d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2110      	movs	r1, #16
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <system_init+0x50>)
 8001cbe:	f002 f827 	bl	8003d10 <HAL_GPIO_WritePin>

	timer_init();
 8001cc2:	f000 f849 	bl	8001d58 <timer_init>
	led7_init();
 8001cc6:	f7ff fa59 	bl	800117c <led7_init>
	button_init();
 8001cca:	f7fe fe11 	bl	80008f0 <button_init>
	lcd_init();
 8001cce:	f7ff f891 	bl	8000df4 <lcd_init>
	ds3231_init();
 8001cd2:	f7fe fe8f 	bl	80009f4 <ds3231_init>
	uart_init_rs232();
 8001cd6:	f000 fbe3 	bl	80024a0 <uart_init_rs232>
	sensor_init();
 8001cda:	f000 f811 	bl	8001d00 <sensor_init>
	buzzer_init();
 8001cde:	f7fe fe7f 	bl	80009e0 <buzzer_init>
	uart_init_esp();
 8001ce2:	f000 fbeb 	bl	80024bc <uart_init_esp>
	setTimer2(50);
 8001ce6:	2032      	movs	r0, #50	; 0x32
 8001ce8:	f000 f840 	bl	8001d6c <setTimer2>
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <Error_Handler+0x8>
	...

08001d00 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001d04:	2205      	movs	r2, #5
 8001d06:	4903      	ldr	r1, [pc, #12]	; (8001d14 <sensor_init+0x14>)
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <sensor_init+0x18>)
 8001d0a:	f000 fd83 	bl	8002814 <HAL_ADC_Start_DMA>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000428 	.word	0x20000428
 8001d18:	200001c8 	.word	0x200001c8

08001d1c <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <sensor_GetTemperature+0x30>)
 8001d22:	891b      	ldrh	r3, [r3, #8]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001d50 <sensor_GetTemperature+0x34>
 8001d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d34:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001d54 <sensor_GetTemperature+0x38>
 8001d38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d3c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001d40:	eeb0 0a67 	vmov.f32	s0, s15
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20000428 	.word	0x20000428
 8001d50:	43a50000 	.word	0x43a50000
 8001d54:	457ff000 	.word	0x457ff000

08001d58 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <timer_init+0x10>)
 8001d5e:	f003 fd6b 	bl	8005838 <HAL_TIM_Base_Start_IT>
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000039c 	.word	0x2000039c

08001d6c <setTimer2>:

void setTimer2(uint16_t duration){
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <setTimer2+0x2c>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <setTimer2+0x2c>)
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <setTimer2+0x30>)
 8001d82:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <setTimer2+0x34>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	801a      	strh	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200000a2 	.word	0x200000a2
 8001d9c:	200000a0 	.word	0x200000a0
 8001da0:	2000009e 	.word	0x2000009e

08001da4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d116      	bne.n	8001de4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dc8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d108      	bne.n	8001de4 <HAL_TIM_PeriodElapsedCallback+0x40>
				flag_timer2 = 1;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001dda:	881a      	ldrh	r2, [r3, #0]
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dde:	801a      	strh	r2, [r3, #0]
				led7_Scan();
 8001de0:	f7ff f9d8 	bl	8001194 <led7_Scan>
			}
		}

	}
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200000a0 	.word	0x200000a0
 8001df0:	2000009e 	.word	0x2000009e
 8001df4:	200000a2 	.word	0x200000a2

08001df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a3c      	ldr	r2, [pc, #240]	; (8001f58 <HAL_ADC_MspInit+0x110>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d171      	bne.n	8001f4e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a33      	ldr	r2, [pc, #204]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a2c      	ldr	r2, [pc, #176]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_ADC_MspInit+0x114>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4823      	ldr	r0, [pc, #140]	; (8001f60 <HAL_ADC_MspInit+0x118>)
 8001ed2:	f001 fd81 	bl	80039d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eda:	2303      	movs	r3, #3
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	481e      	ldr	r0, [pc, #120]	; (8001f64 <HAL_ADC_MspInit+0x11c>)
 8001eea:	f001 fd75 	bl	80039d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_ADC_MspInit+0x124>)
 8001ef2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f34:	f001 f94e 	bl	80031d4 <HAL_DMA_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001f3e:	f7ff fed9 	bl	8001cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_ADC_MspInit+0x120>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020400 	.word	0x40020400
 8001f68:	2000029c 	.word	0x2000029c
 8001f6c:	40026410 	.word	0x40026410

08001f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_I2C_MspInit+0x84>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d12b      	bne.n	8001fea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_I2C_MspInit+0x88>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_I2C_MspInit+0x88>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_I2C_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb2:	2312      	movs	r3, #18
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <HAL_I2C_MspInit+0x8c>)
 8001fca:	f001 fd05 	bl	80039d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_I2C_MspInit+0x88>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <HAL_I2C_MspInit+0x88>)
 8001fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_I2C_MspInit+0x88>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40005400 	.word	0x40005400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020400 	.word	0x40020400

08002000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_SPI_MspInit+0x84>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d12b      	bne.n	800207a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_SPI_MspInit+0x88>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_SPI_MspInit+0x88>)
 800202c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_SPI_MspInit+0x88>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_SPI_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_SPI_MspInit+0x88>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_SPI_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800205a:	2338      	movs	r3, #56	; 0x38
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800206a:	2305      	movs	r3, #5
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_SPI_MspInit+0x8c>)
 8002076:	f001 fcaf 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40013000 	.word	0x40013000
 8002088:	40023800 	.word	0x40023800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_TIM_Base_MspInit+0x98>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10e      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80020be:	e02e      	b.n	800211e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d116      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a16      	ldr	r2, [pc, #88]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	201c      	movs	r0, #28
 80020ec:	f001 f83b 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f0:	201c      	movs	r0, #28
 80020f2:	f001 f854 	bl	800319e <HAL_NVIC_EnableIRQ>
}
 80020f6:	e012      	b.n	800211e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <HAL_TIM_Base_MspInit+0xa0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10d      	bne.n	800211e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_TIM_Base_MspInit+0x9c>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40023800 	.word	0x40023800
 8002130:	40001c00 	.word	0x40001c00

08002134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a12      	ldr	r2, [pc, #72]	; (800219c <HAL_TIM_MspPostInit+0x68>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d11e      	bne.n	8002194 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_TIM_MspPostInit+0x6c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_TIM_MspPostInit+0x6c>)
 8002160:	f043 0320 	orr.w	r3, r3, #32
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_TIM_MspPostInit+0x6c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002176:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002184:	2309      	movs	r3, #9
 8002186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	4619      	mov	r1, r3
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <HAL_TIM_MspPostInit+0x70>)
 8002190:	f001 fc22 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40001c00 	.word	0x40001c00
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40021400 	.word	0x40021400

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_UART_MspInit+0x108>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d135      	bne.n	8002236 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a38      	ldr	r2, [pc, #224]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002202:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002214:	2307      	movs	r3, #7
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	4619      	mov	r1, r3
 800221e:	4826      	ldr	r0, [pc, #152]	; (80022b8 <HAL_UART_MspInit+0x110>)
 8002220:	f001 fbda 	bl	80039d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2025      	movs	r0, #37	; 0x25
 800222a:	f000 ff9c 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800222e:	2025      	movs	r0, #37	; 0x25
 8002230:	f000 ffb5 	bl	800319e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002234:	e038      	b.n	80022a8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a20      	ldr	r2, [pc, #128]	; (80022bc <HAL_UART_MspInit+0x114>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d133      	bne.n	80022a8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 800224a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_UART_MspInit+0x10c>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002278:	230c      	movs	r3, #12
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002288:	2307      	movs	r3, #7
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <HAL_UART_MspInit+0x110>)
 8002294:	f001 fba0 	bl	80039d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	2026      	movs	r0, #38	; 0x26
 800229e:	f000 ff62 	bl	8003166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022a2:	2026      	movs	r0, #38	; 0x26
 80022a4:	f000 ff7b 	bl	800319e <HAL_NVIC_EnableIRQ>
}
 80022a8:	bf00      	nop
 80022aa:	3730      	adds	r7, #48	; 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40004400 	.word	0x40004400

080022c0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_FSMC_MspInit+0x88>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d131      	bne.n	8002340 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_FSMC_MspInit+0x88>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_FSMC_MspInit+0x8c>)
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_FSMC_MspInit+0x8c>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6393      	str	r3, [r2, #56]	; 0x38
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_FSMC_MspInit+0x8c>)
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80022fe:	f64f 7388 	movw	r3, #65416	; 0xff88
 8002302:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002310:	230c      	movs	r3, #12
 8002312:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	4619      	mov	r1, r3
 8002318:	480d      	ldr	r0, [pc, #52]	; (8002350 <HAL_FSMC_MspInit+0x90>)
 800231a:	f001 fb5d 	bl	80039d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800231e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002322:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002330:	230c      	movs	r3, #12
 8002332:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	4619      	mov	r1, r3
 8002338:	4806      	ldr	r0, [pc, #24]	; (8002354 <HAL_FSMC_MspInit+0x94>)
 800233a:	f001 fb4d 	bl	80039d8 <HAL_GPIO_Init>
 800233e:	e000      	b.n	8002342 <HAL_FSMC_MspInit+0x82>
    return;
 8002340:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200000a4 	.word	0x200000a4
 800234c:	40023800 	.word	0x40023800
 8002350:	40021000 	.word	0x40021000
 8002354:	40020c00 	.word	0x40020c00

08002358 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002360:	f7ff ffae 	bl	80022c0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <NMI_Handler+0x4>

08002372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b8:	f000 f9a4 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <TIM2_IRQHandler+0x10>)
 80023c6:	f003 fbc9 	bl	8005b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000039c 	.word	0x2000039c

080023d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <USART1_IRQHandler+0x10>)
 80023da:	f004 fb29 	bl	8006a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000258 	.word	0x20000258

080023e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <USART2_IRQHandler+0x10>)
 80023ee:	f004 fb1f 	bl	8006a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003e4 	.word	0x200003e4

080023fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <DMA2_Stream0_IRQHandler+0x10>)
 8002402:	f001 f87f 	bl	8003504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000029c 	.word	0x2000029c

08002410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <_sbrk+0x5c>)
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <_sbrk+0x60>)
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <_sbrk+0x64>)
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <_sbrk+0x68>)
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	429a      	cmp	r2, r3
 800243e:	d207      	bcs.n	8002450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002440:	f005 fa7e 	bl	8007940 <__errno>
 8002444:	4603      	mov	r3, r0
 8002446:	220c      	movs	r2, #12
 8002448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e009      	b.n	8002464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <_sbrk+0x64>)
 8002460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20020000 	.word	0x20020000
 8002470:	00000400 	.word	0x00000400
 8002474:	200000a8 	.word	0x200000a8
 8002478:	20000448 	.word	0x20000448

0800247c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x20>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <SystemInit+0x20>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <uart_init_rs232>:
uint8_t msg[100];

uint8_t receive_buffer1 = 0, receive_buffer2 = 0;
uint8_t check_esp = 0;

void uart_init_rs232(){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80024a4:	2201      	movs	r2, #1
 80024a6:	4903      	ldr	r1, [pc, #12]	; (80024b4 <uart_init_rs232+0x14>)
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <uart_init_rs232+0x18>)
 80024aa:	f004 fa90 	bl	80069ce <HAL_UART_Receive_IT>
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200000ac 	.word	0x200000ac
 80024b8:	20000258 	.word	0x20000258

080024bc <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	4903      	ldr	r1, [pc, #12]	; (80024d0 <uart_init_esp+0x14>)
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <uart_init_esp+0x18>)
 80024c6:	f004 fa82 	bl	80069ce <HAL_UART_Receive_IT>
//	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200000ad 	.word	0x200000ad
 80024d4:	200003e4 	.word	0x200003e4

080024d8 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 80024e4:	887a      	ldrh	r2, [r7, #2]
 80024e6:	230a      	movs	r3, #10
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <uart_EspSendBytes+0x20>)
 80024ec:	f004 f9dd 	bl	80068aa <HAL_UART_Transmit>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200003e4 	.word	0x200003e4

080024fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_UART_RxCpltCallback+0x74>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10a      	bne.n	8002524 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800250e:	230a      	movs	r3, #10
 8002510:	2201      	movs	r2, #1
 8002512:	4918      	ldr	r1, [pc, #96]	; (8002574 <HAL_UART_RxCpltCallback+0x78>)
 8002514:	4818      	ldr	r0, [pc, #96]	; (8002578 <HAL_UART_RxCpltCallback+0x7c>)
 8002516:	f004 f9c8 	bl	80068aa <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800251a:	2201      	movs	r2, #1
 800251c:	4915      	ldr	r1, [pc, #84]	; (8002574 <HAL_UART_RxCpltCallback+0x78>)
 800251e:	4816      	ldr	r0, [pc, #88]	; (8002578 <HAL_UART_RxCpltCallback+0x7c>)
 8002520:	f004 fa55 	bl	80069ce <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a14      	ldr	r2, [pc, #80]	; (800257c <HAL_UART_RxCpltCallback+0x80>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d11b      	bne.n	8002566 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_UART_RxCpltCallback+0x84>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b4f      	cmp	r3, #79	; 0x4f
 8002534:	d103      	bne.n	800253e <HAL_UART_RxCpltCallback+0x42>
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_UART_RxCpltCallback+0x88>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e00e      	b.n	800255c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_UART_RxCpltCallback+0x84>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b61      	cmp	r3, #97	; 0x61
 8002544:	d103      	bne.n	800254e <HAL_UART_RxCpltCallback+0x52>
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_UART_RxCpltCallback+0x8c>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e006      	b.n	800255c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_UART_RxCpltCallback+0x84>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b41      	cmp	r3, #65	; 0x41
 8002554:	d102      	bne.n	800255c <HAL_UART_RxCpltCallback+0x60>
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_UART_RxCpltCallback+0x8c>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800255c:	2201      	movs	r2, #1
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <HAL_UART_RxCpltCallback+0x84>)
 8002560:	480a      	ldr	r0, [pc, #40]	; (800258c <HAL_UART_RxCpltCallback+0x90>)
 8002562:	f004 fa34 	bl	80069ce <HAL_UART_Receive_IT>
	}
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40011000 	.word	0x40011000
 8002574:	200000ac 	.word	0x200000ac
 8002578:	20000258 	.word	0x20000258
 800257c:	40004400 	.word	0x40004400
 8002580:	200000ad 	.word	0x200000ad
 8002584:	200000ae 	.word	0x200000ae
 8002588:	2000009c 	.word	0x2000009c
 800258c:	200003e4 	.word	0x200003e4

08002590 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	if(check_esp == 1) {
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <uart_EspCheck+0x2c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <uart_EspCheck+0x1a>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 800259c:	2201      	movs	r2, #1
 800259e:	2110      	movs	r1, #16
 80025a0:	4807      	ldr	r0, [pc, #28]	; (80025c0 <uart_EspCheck+0x30>)
 80025a2:	f001 fbb5 	bl	8003d10 <HAL_GPIO_WritePin>
		return 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e005      	b.n	80025b6 <uart_EspCheck+0x26>
	}
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2110      	movs	r1, #16
 80025ae:	4804      	ldr	r0, [pc, #16]	; (80025c0 <uart_EspCheck+0x30>)
 80025b0:	f001 fbae 	bl	8003d10 <HAL_GPIO_WritePin>
	return 0;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200000ae 	.word	0x200000ae
 80025c0:	40021000 	.word	0x40021000

080025c4 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <DEC2BCD+0x44>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	b258      	sxtb	r0, r3
 80025de:	79fa      	ldrb	r2, [r7, #7]
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <DEC2BCD+0x44>)
 80025e2:	fba3 1302 	umull	r1, r3, r3, r2
 80025e6:	08d9      	lsrs	r1, r3, #3
 80025e8:	460b      	mov	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	4303      	orrs	r3, r0
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	cccccccd 	.word	0xcccccccd

0800260c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800260c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002612:	490e      	ldr	r1, [pc, #56]	; (800264c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002628:	4c0b      	ldr	r4, [pc, #44]	; (8002658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002636:	f7ff ff21 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263a:	f005 f987 	bl	800794c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263e:	f7fe fe8d 	bl	800135c <main>
  bx  lr    
 8002642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002650:	0800b298 	.word	0x0800b298
  ldr r2, =_sbss
 8002654:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002658:	20000448 	.word	0x20000448

0800265c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC_IRQHandler>
	...

08002660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_Init+0x40>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_Init+0x40>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_Init+0x40>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002688:	2003      	movs	r0, #3
 800268a:	f000 fd61 	bl	8003150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268e:	200f      	movs	r0, #15
 8002690:	f000 f808 	bl	80026a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002694:	f7ff fbb0 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_InitTick+0x54>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x58>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fd79 	bl	80031ba <HAL_SYSTICK_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00e      	b.n	80026f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d80a      	bhi.n	80026ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f000 fd41 	bl	8003166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e4:	4a06      	ldr	r2, [pc, #24]	; (8002700 <HAL_InitTick+0x5c>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000008 	.word	0x20000008
 80026fc:	20000010 	.word	0x20000010
 8002700:	2000000c 	.word	0x2000000c

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000010 	.word	0x20000010
 8002728:	20000434 	.word	0x20000434

0800272c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_GetTick+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000434 	.word	0x20000434

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff ffee 	bl	800272c <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800276a:	bf00      	nop
 800276c:	f7ff ffde 	bl	800272c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000010 	.word	0x20000010

0800278c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e033      	b.n	800280a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fb4c 	bl	8001e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d118      	bne.n	80027fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027d2:	f023 0302 	bic.w	r3, r3, #2
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fa68 	bl	8002cb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
 80027fa:	e001      	b.n	8002800 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADC_Start_DMA+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e0e9      	b.n	8002a06 <HAL_ADC_Start_DMA+0x1f2>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d018      	beq.n	800287a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002858:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_ADC_Start_DMA+0x1fc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a6d      	ldr	r2, [pc, #436]	; (8002a14 <HAL_ADC_Start_DMA+0x200>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9a      	lsrs	r2, r3, #18
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800286c:	e002      	b.n	8002874 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3b01      	subs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f9      	bne.n	800286e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002888:	d107      	bne.n	800289a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002898:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 80a1 	bne.w	80029ec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f023 0206 	bic.w	r2, r3, #6
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
 80028f6:	e002      	b.n	80028fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <HAL_ADC_Start_DMA+0x204>)
 8002908:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	4a43      	ldr	r2, [pc, #268]	; (8002a1c <HAL_ADC_Start_DMA+0x208>)
 8002910:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	4a42      	ldr	r2, [pc, #264]	; (8002a20 <HAL_ADC_Start_DMA+0x20c>)
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	4a41      	ldr	r2, [pc, #260]	; (8002a24 <HAL_ADC_Start_DMA+0x210>)
 8002920:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800292a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800293a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	334c      	adds	r3, #76	; 0x4c
 8002956:	4619      	mov	r1, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f000 fce8 	bl	8003330 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2b00      	cmp	r3, #0
 800296a:	d12a      	bne.n	80029c2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_ADC_Start_DMA+0x214>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d015      	beq.n	80029a2 <HAL_ADC_Start_DMA+0x18e>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <HAL_ADC_Start_DMA+0x218>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d105      	bne.n	800298c <HAL_ADC_Start_DMA+0x178>
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_ADC_Start_DMA+0x204>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_ADC_Start_DMA+0x21c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d136      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1f0>
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_ADC_Start_DMA+0x204>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d130      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d129      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e020      	b.n	8002a04 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_ADC_Start_DMA+0x214>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d11b      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1f0>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d114      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e00b      	b.n	8002a04 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0210 	orr.w	r2, r3, #16
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	08002ead 	.word	0x08002ead
 8002a20:	08002f67 	.word	0x08002f67
 8002a24:	08002f83 	.word	0x08002f83
 8002a28:	40012000 	.word	0x40012000
 8002a2c:	40012100 	.word	0x40012100
 8002a30:	40012200 	.word	0x40012200

08002a34 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1c>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e105      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x228>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d925      	bls.n	8002ae8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68d9      	ldr	r1, [r3, #12]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	400a      	ands	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68d9      	ldr	r1, [r3, #12]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4403      	add	r3, r0
 8002ada:	3b1e      	subs	r3, #30
 8002adc:	409a      	lsls	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	e022      	b.n	8002b2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	2207      	movs	r2, #7
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	400a      	ands	r2, r1
 8002b0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4403      	add	r3, r0
 8002b24:	409a      	lsls	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d824      	bhi.n	8002b80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	3b05      	subs	r3, #5
 8002b48:	221f      	movs	r2, #31
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	400a      	ands	r2, r1
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4618      	mov	r0, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b05      	subs	r3, #5
 8002b72:	fa00 f203 	lsl.w	r2, r0, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b7e:	e04c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d824      	bhi.n	8002bd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3b23      	subs	r3, #35	; 0x23
 8002b9a:	221f      	movs	r2, #31
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	400a      	ands	r2, r1
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b23      	subs	r3, #35	; 0x23
 8002bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd0:	e023      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b41      	subs	r3, #65	; 0x41
 8002be4:	221f      	movs	r2, #31
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4618      	mov	r0, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b41      	subs	r3, #65	; 0x41
 8002c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_ADC_ConfigChannel+0x234>)
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <HAL_ADC_ConfigChannel+0x238>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d109      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x1cc>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b12      	cmp	r3, #18
 8002c2e:	d105      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_ADC_ConfigChannel+0x238>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d123      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x21e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d003      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x1e6>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b11      	cmp	r3, #17
 8002c54:	d11b      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d111      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_ADC_ConfigChannel+0x23c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_ADC_ConfigChannel+0x240>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	0c9a      	lsrs	r2, r3, #18
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c80:	e002      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f9      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	40012000 	.word	0x40012000
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	431bde83 	.word	0x431bde83

08002cb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cbc:	4b79      	ldr	r3, [pc, #484]	; (8002ea4 <ADC_Init+0x1f0>)
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	021a      	lsls	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <ADC_Init+0x1f4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d022      	beq.n	8002d92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6899      	ldr	r1, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	e00f      	b.n	8002db2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002da0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002db0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0202 	bic.w	r2, r2, #2
 8002dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7e1b      	ldrb	r3, [r3, #24]
 8002dcc:	005a      	lsls	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01b      	beq.n	8002e18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	035a      	lsls	r2, r3, #13
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e007      	b.n	8002e28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	051a      	lsls	r2, r3, #20
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6a:	025a      	lsls	r2, r3, #9
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	029a      	lsls	r2, r3, #10
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40012300 	.word	0x40012300
 8002ea8:	0f000001 	.word	0x0f000001

08002eac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d13c      	bne.n	8002f40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d12b      	bne.n	8002f38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d127      	bne.n	8002f38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d119      	bne.n	8002f38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0220 	bic.w	r2, r2, #32
 8002f12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fd7b 	bl	8002a34 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f3e:	e00e      	b.n	8002f5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff fd85 	bl	8002a5c <HAL_ADC_ErrorCallback>
}
 8002f52:	e004      	b.n	8002f5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff fd67 	bl	8002a48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f043 0204 	orr.w	r2, r3, #4
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff fd5a 	bl	8002a5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <__NVIC_EnableIRQ+0x38>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db0a      	blt.n	800307a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	490c      	ldr	r1, [pc, #48]	; (800309c <__NVIC_SetPriority+0x4c>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	440b      	add	r3, r1
 8003074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003078:	e00a      	b.n	8003090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <__NVIC_SetPriority+0x50>)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3b04      	subs	r3, #4
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	440b      	add	r3, r1
 800308e:	761a      	strb	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	2b04      	cmp	r3, #4
 80030c0:	bf28      	it	cs
 80030c2:	2304      	movcs	r3, #4
 80030c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d902      	bls.n	80030d4 <NVIC_EncodePriority+0x30>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3b03      	subs	r3, #3
 80030d2:	e000      	b.n	80030d6 <NVIC_EncodePriority+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	401a      	ands	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	4313      	orrs	r3, r2
         );
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800311c:	d301      	bcc.n	8003122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311e:	2301      	movs	r3, #1
 8003120:	e00f      	b.n	8003142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <SysTick_Config+0x40>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312a:	210f      	movs	r1, #15
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f7ff ff8e 	bl	8003050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <SysTick_Config+0x40>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313a:	4b04      	ldr	r3, [pc, #16]	; (800314c <SysTick_Config+0x40>)
 800313c:	2207      	movs	r2, #7
 800313e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	e000e010 	.word	0xe000e010

08003150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff29 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003178:	f7ff ff3e 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 800317c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7ff ff8e 	bl	80030a4 <NVIC_EncodePriority>
 8003188:	4602      	mov	r2, r0
 800318a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff5d 	bl	8003050 <__NVIC_SetPriority>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff31 	bl	8003014 <__NVIC_EnableIRQ>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ffa2 	bl	800310c <SysTick_Config>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff faa4 	bl	800272c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e099      	b.n	8003324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003210:	e00f      	b.n	8003232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003212:	f7ff fa8b 	bl	800272c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b05      	cmp	r3, #5
 800321e:	d908      	bls.n	8003232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e078      	b.n	8003324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e8      	bne.n	8003212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_DMA_Init+0x158>)
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2b04      	cmp	r3, #4
 800328a:	d107      	bne.n	800329c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	4313      	orrs	r3, r2
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f023 0307 	bic.w	r3, r3, #7
 80032b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d117      	bne.n	80032f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fb01 	bl	80038e0 <DMA_CheckFifoParam>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2240      	movs	r2, #64	; 0x40
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032f2:	2301      	movs	r3, #1
 80032f4:	e016      	b.n	8003324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fab8 	bl	8003874 <DMA_CalcBaseAndBitshift>
 8003304:	4603      	mov	r3, r0
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	223f      	movs	r2, #63	; 0x3f
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	f010803f 	.word	0xf010803f

08003330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_DMA_Start_IT+0x26>
 8003352:	2302      	movs	r3, #2
 8003354:	e040      	b.n	80033d8 <HAL_DMA_Start_IT+0xa8>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d12f      	bne.n	80033ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa4a 	bl	8003818 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	223f      	movs	r2, #63	; 0x3f
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0216 	orr.w	r2, r2, #22
 800339e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0208 	orr.w	r2, r2, #8
 80033b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e005      	b.n	80033d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ee:	f7ff f99d 	bl	800272c <HAL_GetTick>
 80033f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d008      	beq.n	8003412 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e052      	b.n	80034b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0216 	bic.w	r2, r2, #22
 8003420:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003430:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <HAL_DMA_Abort+0x62>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0208 	bic.w	r2, r2, #8
 8003450:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003462:	e013      	b.n	800348c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003464:	f7ff f962 	bl	800272c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b05      	cmp	r3, #5
 8003470:	d90c      	bls.n	800348c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2203      	movs	r2, #3
 800347c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e015      	b.n	80034b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e4      	bne.n	8003464 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	223f      	movs	r2, #63	; 0x3f
 80034a0:	409a      	lsls	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e00c      	b.n	80034f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2205      	movs	r2, #5
 80034e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003510:	4b92      	ldr	r3, [pc, #584]	; (800375c <HAL_DMA_IRQHandler+0x258>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a92      	ldr	r2, [pc, #584]	; (8003760 <HAL_DMA_IRQHandler+0x25c>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0a9b      	lsrs	r3, r3, #10
 800351c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2208      	movs	r2, #8
 8003530:	409a      	lsls	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d01a      	beq.n	8003570 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	2208      	movs	r2, #8
 800355e:	409a      	lsls	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	2201      	movs	r2, #1
 8003576:	409a      	lsls	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d012      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2201      	movs	r2, #1
 8003594:	409a      	lsls	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f043 0202 	orr.w	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2204      	movs	r2, #4
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	2204      	movs	r2, #4
 80035ca:	409a      	lsls	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f043 0204 	orr.w	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	2210      	movs	r2, #16
 80035e2:	409a      	lsls	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d043      	beq.n	8003674 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d03c      	beq.n	8003674 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	2210      	movs	r2, #16
 8003600:	409a      	lsls	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d018      	beq.n	8003646 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d024      	beq.n	8003674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
 8003632:	e01f      	b.n	8003674 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
 8003644:	e016      	b.n	8003674 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d107      	bne.n	8003664 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0208 	bic.w	r2, r2, #8
 8003662:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	2220      	movs	r2, #32
 800367a:	409a      	lsls	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 808e 	beq.w	80037a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8086 	beq.w	80037a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2220      	movs	r2, #32
 800369c:	409a      	lsls	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d136      	bne.n	800371c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0216 	bic.w	r2, r2, #22
 80036bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <HAL_DMA_IRQHandler+0x1da>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0208 	bic.w	r2, r2, #8
 80036ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	223f      	movs	r2, #63	; 0x3f
 80036f4:	409a      	lsls	r2, r3
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370e:	2b00      	cmp	r3, #0
 8003710:	d07d      	beq.n	800380e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
        }
        return;
 800371a:	e078      	b.n	800380e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01c      	beq.n	8003764 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d108      	bne.n	800374a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	2b00      	cmp	r3, #0
 800373e:	d030      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
 8003748:	e02b      	b.n	80037a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d027      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
 800375a:	e022      	b.n	80037a2 <HAL_DMA_IRQHandler+0x29e>
 800375c:	20000008 	.word	0x20000008
 8003760:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0210 	bic.w	r2, r2, #16
 8003780:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d032      	beq.n	8003810 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d022      	beq.n	80037fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2205      	movs	r2, #5
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d307      	bcc.n	80037ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f2      	bne.n	80037ce <HAL_DMA_IRQHandler+0x2ca>
 80037e8:	e000      	b.n	80037ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
 800380c:	e000      	b.n	8003810 <HAL_DMA_IRQHandler+0x30c>
        return;
 800380e:	bf00      	nop
    }
  }
}
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop

08003818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003834:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d108      	bne.n	8003858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003856:	e007      	b.n	8003868 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	3b10      	subs	r3, #16
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <DMA_CalcBaseAndBitshift+0x68>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d909      	bls.n	80038b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	1d1a      	adds	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58
 80038b4:	e007      	b.n	80038c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	aaaaaaab 	.word	0xaaaaaaab
 80038dc:	0800b24c 	.word	0x0800b24c

080038e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11f      	bne.n	800393a <DMA_CheckFifoParam+0x5a>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d856      	bhi.n	80039ae <DMA_CheckFifoParam+0xce>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <DMA_CheckFifoParam+0x28>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	08003919 	.word	0x08003919
 800390c:	0800392b 	.word	0x0800392b
 8003910:	08003919 	.word	0x08003919
 8003914:	080039af 	.word	0x080039af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d046      	beq.n	80039b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e043      	b.n	80039b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003932:	d140      	bne.n	80039b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003938:	e03d      	b.n	80039b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	d121      	bne.n	8003988 <DMA_CheckFifoParam+0xa8>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d837      	bhi.n	80039ba <DMA_CheckFifoParam+0xda>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <DMA_CheckFifoParam+0x70>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003961 	.word	0x08003961
 8003954:	08003967 	.word	0x08003967
 8003958:	08003961 	.word	0x08003961
 800395c:	08003979 	.word	0x08003979
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e030      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d025      	beq.n	80039be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003976:	e022      	b.n	80039be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003980:	d11f      	bne.n	80039c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003986:	e01c      	b.n	80039c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d903      	bls.n	8003996 <DMA_CheckFifoParam+0xb6>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d003      	beq.n	800399c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003994:	e018      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      break;
 800399a:	e015      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e00b      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;
 80039ae:	bf00      	nop
 80039b0:	e00a      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
 80039b4:	e008      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b6:	bf00      	nop
 80039b8:	e006      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ba:	bf00      	nop
 80039bc:	e004      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039be:	bf00      	nop
 80039c0:	e002      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
    }
  } 
  
  return status; 
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e16b      	b.n	8003ccc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f4:	2201      	movs	r2, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	f040 815a 	bne.w	8003cc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d005      	beq.n	8003a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d130      	bne.n	8003a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 0201 	and.w	r2, r3, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d017      	beq.n	8003ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d123      	bne.n	8003b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	220f      	movs	r2, #15
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0203 	and.w	r2, r3, #3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80b4 	beq.w	8003cc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	4b60      	ldr	r3, [pc, #384]	; (8003ce4 <HAL_GPIO_Init+0x30c>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	4a5f      	ldr	r2, [pc, #380]	; (8003ce4 <HAL_GPIO_Init+0x30c>)
 8003b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <HAL_GPIO_Init+0x30c>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ce8 <HAL_GPIO_Init+0x310>)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	220f      	movs	r2, #15
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a52      	ldr	r2, [pc, #328]	; (8003cec <HAL_GPIO_Init+0x314>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02b      	beq.n	8003bfe <HAL_GPIO_Init+0x226>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <HAL_GPIO_Init+0x318>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d025      	beq.n	8003bfa <HAL_GPIO_Init+0x222>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a50      	ldr	r2, [pc, #320]	; (8003cf4 <HAL_GPIO_Init+0x31c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01f      	beq.n	8003bf6 <HAL_GPIO_Init+0x21e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a4f      	ldr	r2, [pc, #316]	; (8003cf8 <HAL_GPIO_Init+0x320>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d019      	beq.n	8003bf2 <HAL_GPIO_Init+0x21a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4e      	ldr	r2, [pc, #312]	; (8003cfc <HAL_GPIO_Init+0x324>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_GPIO_Init+0x216>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_GPIO_Init+0x328>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00d      	beq.n	8003bea <HAL_GPIO_Init+0x212>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4c      	ldr	r2, [pc, #304]	; (8003d04 <HAL_GPIO_Init+0x32c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <HAL_GPIO_Init+0x20e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4b      	ldr	r2, [pc, #300]	; (8003d08 <HAL_GPIO_Init+0x330>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_GPIO_Init+0x20a>
 8003bde:	2307      	movs	r3, #7
 8003be0:	e00e      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003be2:	2308      	movs	r3, #8
 8003be4:	e00c      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003be6:	2306      	movs	r3, #6
 8003be8:	e00a      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003bea:	2305      	movs	r3, #5
 8003bec:	e008      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e004      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e002      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_GPIO_Init+0x228>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f002 0203 	and.w	r2, r2, #3
 8003c06:	0092      	lsls	r2, r2, #2
 8003c08:	4093      	lsls	r3, r2
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c10:	4935      	ldr	r1, [pc, #212]	; (8003ce8 <HAL_GPIO_Init+0x310>)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	3302      	adds	r3, #2
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c42:	4a32      	ldr	r2, [pc, #200]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c48:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c6c:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c72:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c96:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc0:	4a12      	ldr	r2, [pc, #72]	; (8003d0c <HAL_GPIO_Init+0x334>)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b0f      	cmp	r3, #15
 8003cd0:	f67f ae90 	bls.w	80039f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40013800 	.word	0x40013800
 8003cec:	40020000 	.word	0x40020000
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40020c00 	.word	0x40020c00
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40021400 	.word	0x40021400
 8003d04:	40021800 	.word	0x40021800
 8003d08:	40021c00 	.word	0x40021c00
 8003d0c:	40013c00 	.word	0x40013c00

08003d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d20:	787b      	ldrb	r3, [r7, #1]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d2c:	e003      	b.n	8003d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2e:	887b      	ldrh	r3, [r7, #2]
 8003d30:	041a      	lsls	r2, r3, #16
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	619a      	str	r2, [r3, #24]
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e12b      	b.n	8003fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fe f900 	bl	8001f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003da8:	f000 fee2 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 8003dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4a81      	ldr	r2, [pc, #516]	; (8003fb8 <HAL_I2C_Init+0x274>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d807      	bhi.n	8003dc8 <HAL_I2C_Init+0x84>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a80      	ldr	r2, [pc, #512]	; (8003fbc <HAL_I2C_Init+0x278>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bf94      	ite	ls
 8003dc0:	2301      	movls	r3, #1
 8003dc2:	2300      	movhi	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e006      	b.n	8003dd6 <HAL_I2C_Init+0x92>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a7d      	ldr	r2, [pc, #500]	; (8003fc0 <HAL_I2C_Init+0x27c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	bf94      	ite	ls
 8003dd0:	2301      	movls	r3, #1
 8003dd2:	2300      	movhi	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0e7      	b.n	8003fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a78      	ldr	r2, [pc, #480]	; (8003fc4 <HAL_I2C_Init+0x280>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0c9b      	lsrs	r3, r3, #18
 8003de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a6a      	ldr	r2, [pc, #424]	; (8003fb8 <HAL_I2C_Init+0x274>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d802      	bhi.n	8003e18 <HAL_I2C_Init+0xd4>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	e009      	b.n	8003e2c <HAL_I2C_Init+0xe8>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	4a69      	ldr	r2, [pc, #420]	; (8003fc8 <HAL_I2C_Init+0x284>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	495c      	ldr	r1, [pc, #368]	; (8003fb8 <HAL_I2C_Init+0x274>)
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	d819      	bhi.n	8003e80 <HAL_I2C_Init+0x13c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1e59      	subs	r1, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e60:	400b      	ands	r3, r1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_I2C_Init+0x138>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1e59      	subs	r1, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7a:	e051      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	e04f      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d111      	bne.n	8003eac <HAL_I2C_Init+0x168>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e58      	subs	r0, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e012      	b.n	8003ed2 <HAL_I2C_Init+0x18e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1e58      	subs	r0, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	0099      	lsls	r1, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Init+0x196>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e022      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10e      	bne.n	8003f00 <HAL_I2C_Init+0x1bc>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1e58      	subs	r0, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	440b      	add	r3, r1
 8003ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efe:	e00f      	b.n	8003f20 <HAL_I2C_Init+0x1dc>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e58      	subs	r0, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	0099      	lsls	r1, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	6809      	ldr	r1, [r1, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6911      	ldr	r1, [r2, #16]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68d2      	ldr	r2, [r2, #12]
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	000186a0 	.word	0x000186a0
 8003fbc:	001e847f 	.word	0x001e847f
 8003fc0:	003d08ff 	.word	0x003d08ff
 8003fc4:	431bde83 	.word	0x431bde83
 8003fc8:	10624dd3 	.word	0x10624dd3

08003fcc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7fe fba6 	bl	800272c <HAL_GetTick>
 8003fe0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	f040 8111 	bne.w	8004216 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2319      	movs	r3, #25
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	4988      	ldr	r1, [pc, #544]	; (8004220 <HAL_I2C_IsDeviceReady+0x254>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f912 	bl	8004228 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
 800400c:	e104      	b.n	8004218 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_I2C_IsDeviceReady+0x50>
 8004018:	2302      	movs	r3, #2
 800401a:	e0fd      	b.n	8004218 <HAL_I2C_IsDeviceReady+0x24c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d007      	beq.n	8004042 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004050:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2224      	movs	r2, #36	; 0x24
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a70      	ldr	r2, [pc, #448]	; (8004224 <HAL_I2C_IsDeviceReady+0x258>)
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2200      	movs	r2, #0
 800407e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f8d0 	bl	8004228 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409c:	d103      	bne.n	80040a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0b6      	b.n	8004218 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fe fb37 	bl	800272c <HAL_GetTick>
 80040be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	bf0c      	ite	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	2300      	movne	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040ee:	e025      	b.n	800413c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040f0:	f7fe fb1c 	bl	800272c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <HAL_I2C_IsDeviceReady+0x13a>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	22a0      	movs	r2, #160	; 0xa0
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2ba0      	cmp	r3, #160	; 0xa0
 8004146:	d005      	beq.n	8004154 <HAL_I2C_IsDeviceReady+0x188>
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <HAL_I2C_IsDeviceReady+0x188>
 800414e:	7dbb      	ldrb	r3, [r7, #22]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0cd      	beq.n	80040f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d129      	bne.n	80041be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2319      	movs	r3, #25
 8004196:	2201      	movs	r2, #1
 8004198:	4921      	ldr	r1, [pc, #132]	; (8004220 <HAL_I2C_IsDeviceReady+0x254>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f844 	bl	8004228 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e036      	b.n	8004218 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e02c      	b.n	8004218 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2319      	movs	r3, #25
 80041de:	2201      	movs	r2, #1
 80041e0:	490f      	ldr	r1, [pc, #60]	; (8004220 <HAL_I2C_IsDeviceReady+0x254>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f820 	bl	8004228 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e012      	b.n	8004218 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	3301      	adds	r3, #1
 80041f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	f4ff af32 	bcc.w	8004066 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	00100002 	.word	0x00100002
 8004224:	ffff0000 	.word	0xffff0000

08004228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004238:	e025      	b.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d021      	beq.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fe fa73 	bl	800272c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d116      	bne.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e023      	b.n	80042ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10d      	bne.n	80042ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	e00c      	b.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d0b6      	beq.n	800423a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e264      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d075      	beq.n	80043e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	4ba3      	ldr	r3, [pc, #652]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d00c      	beq.n	800431c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004302:	4ba0      	ldr	r3, [pc, #640]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800430a:	2b08      	cmp	r3, #8
 800430c:	d112      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430e:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	4b99      	ldr	r3, [pc, #612]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d05b      	beq.n	80043e0 <HAL_RCC_OscConfig+0x108>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d157      	bne.n	80043e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e23f      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x74>
 800433e:	4b91      	ldr	r3, [pc, #580]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a90      	ldr	r2, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x98>
 8004356:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a8a      	ldr	r2, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a87      	ldr	r2, [pc, #540]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 8004370:	4b84      	ldr	r3, [pc, #528]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a83      	ldr	r2, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a80      	ldr	r2, [pc, #512]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe f9cc 	bl	800272c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe f9c8 	bl	800272c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e204      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xc0>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe f9b8 	bl	800272c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fe f9b4 	bl	800272c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1f0      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0xe8>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fa:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1c4      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4952      	ldr	r1, [pc, #328]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	e03a      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b4f      	ldr	r3, [pc, #316]	; (8004588 <HAL_RCC_OscConfig+0x2b0>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fe f96d 	bl	800272c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004456:	f7fe f969 	bl	800272c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1a5      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004468:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4940      	ldr	r1, [pc, #256]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448a:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <HAL_RCC_OscConfig+0x2b0>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe f94c 	bl	800272c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004498:	f7fe f948 	bl	800272c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e184      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	4b36      	ldr	r3, [pc, #216]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d030      	beq.n	8004524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x2b4>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fe f92c 	bl	800272c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fe f928 	bl	800272c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e164      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x200>
 80044f6:	e015      	b.n	8004524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_OscConfig+0x2b4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fe:	f7fe f915 	bl	800272c <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004506:	f7fe f911 	bl	800272c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e14d      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a0 	beq.w	8004672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d121      	bne.n	80045b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7fe f8d7 	bl	800272c <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e011      	b.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	42470000 	.word	0x42470000
 800458c:	42470e80 	.word	0x42470e80
 8004590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004594:	f7fe f8ca 	bl	800272c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e106      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a6:	4b85      	ldr	r3, [pc, #532]	; (80047bc <HAL_RCC_OscConfig+0x4e4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2f0>
 80045ba:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a80      	ldr	r2, [pc, #512]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e01c      	b.n	8004602 <HAL_RCC_OscConfig+0x32a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d10c      	bne.n	80045ea <HAL_RCC_OscConfig+0x312>
 80045d0:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a77      	ldr	r2, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e00b      	b.n	8004602 <HAL_RCC_OscConfig+0x32a>
 80045ea:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a74      	ldr	r2, [pc, #464]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	4b72      	ldr	r3, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a71      	ldr	r2, [pc, #452]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fe f88f 	bl	800272c <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fe f88b 	bl	800272c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e0c5      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ee      	beq.n	8004612 <HAL_RCC_OscConfig+0x33a>
 8004634:	e014      	b.n	8004660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fe f879 	bl	800272c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463c:	e00a      	b.n	8004654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fe f875 	bl	800272c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0af      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ee      	bne.n	800463e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b56      	ldr	r3, [pc, #344]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 809b 	beq.w	80047b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d05c      	beq.n	8004742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d141      	bne.n	8004714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004690:	4b4c      	ldr	r3, [pc, #304]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fe f849 	bl	800272c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469e:	f7fe f845 	bl	800272c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e081      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	019b      	lsls	r3, r3, #6
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	3b01      	subs	r3, #1
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	4937      	ldr	r1, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fe f81e 	bl	800272c <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fe f81a 	bl	800272c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e056      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x41c>
 8004712:	e04e      	b.n	80047b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fe f807 	bl	800272c <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004722:	f7fe f803 	bl	800272c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e03f      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004734:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x44a>
 8004740:	e037      	b.n	80047b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e032      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d028      	beq.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d121      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d11a      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800477e:	4013      	ands	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004784:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004786:	4293      	cmp	r3, r2
 8004788:	d111      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40007000 	.word	0x40007000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470060 	.word	0x42470060

080047c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0cc      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047dc:	4b68      	ldr	r3, [pc, #416]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d90c      	bls.n	8004804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0b8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a52      	ldr	r2, [pc, #328]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800483e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d044      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d119      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d003      	beq.n	8004886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004882:	2b03      	cmp	r3, #3
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004886:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e06f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004896:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e067      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 0203 	bic.w	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4934      	ldr	r1, [pc, #208]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b8:	f7fd ff38 	bl	800272c <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c0:	f7fd ff34 	bl	800272c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e04f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 020c 	and.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1eb      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d20c      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e032      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800494e:	f000 f821 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004952:	4602      	mov	r2, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	490a      	ldr	r1, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	5ccb      	ldrb	r3, [r1, r3]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_ClockConfig+0x1c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fe98 	bl	80026a4 <HAL_InitTick>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023c00 	.word	0x40023c00
 8004984:	40023800 	.word	0x40023800
 8004988:	0800b234 	.word	0x0800b234
 800498c:	20000008 	.word	0x20000008
 8004990:	2000000c 	.word	0x2000000c

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ac:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d00d      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x40>
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	f200 80bd 	bhi.w	8004b38 <HAL_RCC_GetSysClockFreq+0x1a4>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x34>
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x3a>
 80049c6:	e0b7      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b61      	ldr	r3, [pc, #388]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049ca:	60bb      	str	r3, [r7, #8]
       break;
 80049cc:	e0b7      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ce:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049d0:	60bb      	str	r3, [r7, #8]
      break;
 80049d2:	e0b4      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d4:	4b5d      	ldr	r3, [pc, #372]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04d      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ea:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	461a      	mov	r2, r3
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	ea02 0800 	and.w	r8, r2, r0
 8004a02:	ea03 0901 	and.w	r9, r3, r1
 8004a06:	4640      	mov	r0, r8
 8004a08:	4649      	mov	r1, r9
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	014b      	lsls	r3, r1, #5
 8004a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a18:	0142      	lsls	r2, r0, #5
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	ebb0 0008 	subs.w	r0, r0, r8
 8004a22:	eb61 0109 	sbc.w	r1, r1, r9
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	018b      	lsls	r3, r1, #6
 8004a30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a34:	0182      	lsls	r2, r0, #6
 8004a36:	1a12      	subs	r2, r2, r0
 8004a38:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3c:	f04f 0000 	mov.w	r0, #0
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	00d9      	lsls	r1, r3, #3
 8004a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a4a:	00d0      	lsls	r0, r2, #3
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	eb12 0208 	adds.w	r2, r2, r8
 8004a54:	eb43 0309 	adc.w	r3, r3, r9
 8004a58:	f04f 0000 	mov.w	r0, #0
 8004a5c:	f04f 0100 	mov.w	r1, #0
 8004a60:	0259      	lsls	r1, r3, #9
 8004a62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a66:	0250      	lsls	r0, r2, #9
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	f7fb fdbe 	bl	80005f8 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e04a      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a86:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	ea02 0400 	and.w	r4, r2, r0
 8004a9e:	ea03 0501 	and.w	r5, r3, r1
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	014b      	lsls	r3, r1, #5
 8004ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ab4:	0142      	lsls	r2, r0, #5
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	1b00      	subs	r0, r0, r4
 8004abc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	018b      	lsls	r3, r1, #6
 8004aca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ace:	0182      	lsls	r2, r0, #6
 8004ad0:	1a12      	subs	r2, r2, r0
 8004ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	00d9      	lsls	r1, r3, #3
 8004ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ae4:	00d0      	lsls	r0, r2, #3
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	1912      	adds	r2, r2, r4
 8004aec:	eb45 0303 	adc.w	r3, r5, r3
 8004af0:	f04f 0000 	mov.w	r0, #0
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	0299      	lsls	r1, r3, #10
 8004afa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004afe:	0290      	lsls	r0, r2, #10
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	f7fb fd72 	bl	80005f8 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	3301      	adds	r3, #1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b3a:	60bb      	str	r3, [r7, #8]
      break;
 8004b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	007a1200 	.word	0x007a1200

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000008 	.word	0x20000008

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b74:	f7ff fff0 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4903      	ldr	r1, [pc, #12]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	0800b244 	.word	0x0800b244

08004b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b9c:	f7ff ffdc 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0b5b      	lsrs	r3, r3, #13
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4903      	ldr	r1, [pc, #12]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0800b244 	.word	0x0800b244

08004bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e07b      	b.n	8004cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be2:	d009      	beq.n	8004bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
 8004bea:	e005      	b.n	8004bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fd f9f4 	bl	8002000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	ea42 0103 	orr.w	r1, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f003 0104 	and.w	r1, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0210 	and.w	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b088      	sub	sp, #32
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_SPI_Transmit+0x22>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e126      	b.n	8004f42 <HAL_SPI_Transmit+0x270>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfc:	f7fd fd16 	bl	800272c <HAL_GetTick>
 8004d00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d002      	beq.n	8004d18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
 8004d14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d16:	e10b      	b.n	8004f30 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_SPI_Transmit+0x52>
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d28:	e102      	b.n	8004f30 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d70:	d10f      	bne.n	8004d92 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d007      	beq.n	8004db0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db8:	d14b      	bne.n	8004e52 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_Transmit+0xf6>
 8004dc2:	8afb      	ldrh	r3, [r7, #22]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d13e      	bne.n	8004e46 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	881a      	ldrh	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	1c9a      	adds	r2, r3, #2
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dec:	e02b      	b.n	8004e46 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d112      	bne.n	8004e22 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	881a      	ldrh	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e20:	e011      	b.n	8004e46 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e22:	f7fd fc83 	bl	800272c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d803      	bhi.n	8004e3a <HAL_SPI_Transmit+0x168>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d102      	bne.n	8004e40 <HAL_SPI_Transmit+0x16e>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e44:	e074      	b.n	8004f30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ce      	bne.n	8004dee <HAL_SPI_Transmit+0x11c>
 8004e50:	e04c      	b.n	8004eec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_SPI_Transmit+0x18e>
 8004e5a:	8afb      	ldrh	r3, [r7, #22]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d140      	bne.n	8004ee2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	7812      	ldrb	r2, [r2, #0]
 8004e6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e86:	e02c      	b.n	8004ee2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d113      	bne.n	8004ebe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	7812      	ldrb	r2, [r2, #0]
 8004ea2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ebc:	e011      	b.n	8004ee2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ebe:	f7fd fc35 	bl	800272c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d803      	bhi.n	8004ed6 <HAL_SPI_Transmit+0x204>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d102      	bne.n	8004edc <HAL_SPI_Transmit+0x20a>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d102      	bne.n	8004ee2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ee0:	e026      	b.n	8004f30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1cd      	bne.n	8004e88 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 fbcb 	bl	800568c <SPI_EndRxTxTransaction>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e000      	b.n	8004f30 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b088      	sub	sp, #32
 8004f4e:	af02      	add	r7, sp, #8
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f66:	d112      	bne.n	8004f8e <HAL_SPI_Receive+0x44>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10e      	bne.n	8004f8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2204      	movs	r2, #4
 8004f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f8f1 	bl	800516c <HAL_SPI_TransmitReceive>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	e0ea      	b.n	8005164 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_SPI_Receive+0x52>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0e3      	b.n	8005164 <HAL_SPI_Receive+0x21a>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa4:	f7fd fbc2 	bl	800272c <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d002      	beq.n	8004fbc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fba:	e0ca      	b.n	8005152 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Receive+0x7e>
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fcc:	e0c1      	b.n	8005152 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005014:	d10f      	bne.n	8005036 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005034:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d007      	beq.n	8005054 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005052:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d162      	bne.n	8005122 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800505c:	e02e      	b.n	80050bc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b01      	cmp	r3, #1
 800506a:	d115      	bne.n	8005098 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f103 020c 	add.w	r2, r3, #12
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005096:	e011      	b.n	80050bc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005098:	f7fd fb48 	bl	800272c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d803      	bhi.n	80050b0 <HAL_SPI_Receive+0x166>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d102      	bne.n	80050b6 <HAL_SPI_Receive+0x16c>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050ba:	e04a      	b.n	8005152 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1cb      	bne.n	800505e <HAL_SPI_Receive+0x114>
 80050c6:	e031      	b.n	800512c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d113      	bne.n	80050fe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	b292      	uxth	r2, r2
 80050e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050fc:	e011      	b.n	8005122 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050fe:	f7fd fb15 	bl	800272c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d803      	bhi.n	8005116 <HAL_SPI_Receive+0x1cc>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d102      	bne.n	800511c <HAL_SPI_Receive+0x1d2>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d102      	bne.n	8005122 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005120:	e017      	b.n	8005152 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1cd      	bne.n	80050c8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fa45 	bl	80055c0 <SPI_EndRxTransaction>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
 800514e:	e000      	b.n	8005152 <HAL_SPI_Receive+0x208>
  }

error :
 8005150:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005162:	7dfb      	ldrb	r3, [r7, #23]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	; 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800517a:	2301      	movs	r3, #1
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x26>
 800518e:	2302      	movs	r3, #2
 8005190:	e18a      	b.n	80054a8 <HAL_SPI_TransmitReceive+0x33c>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800519a:	f7fd fac7 	bl	800272c <HAL_GetTick>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051b0:	887b      	ldrh	r3, [r7, #2]
 80051b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d00f      	beq.n	80051dc <HAL_SPI_TransmitReceive+0x70>
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c2:	d107      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x68>
 80051cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d003      	beq.n	80051dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051da:	e15b      	b.n	8005494 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x82>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x82>
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d103      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051f4:	e14e      	b.n	8005494 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d003      	beq.n	800520a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2205      	movs	r2, #5
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	887a      	ldrh	r2, [r7, #2]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	887a      	ldrh	r2, [r7, #2]
 800522c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	887a      	ldrh	r2, [r7, #2]
 8005232:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d007      	beq.n	800525e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800525c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005266:	d178      	bne.n	800535a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_SPI_TransmitReceive+0x10a>
 8005270:	8b7b      	ldrh	r3, [r7, #26]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d166      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	881a      	ldrh	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529a:	e053      	b.n	8005344 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d11b      	bne.n	80052e2 <HAL_SPI_TransmitReceive+0x176>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d016      	beq.n	80052e2 <HAL_SPI_TransmitReceive+0x176>
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d113      	bne.n	80052e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	881a      	ldrh	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	1c9a      	adds	r2, r3, #2
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d119      	bne.n	8005324 <HAL_SPI_TransmitReceive+0x1b8>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d014      	beq.n	8005324 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	b292      	uxth	r2, r2
 8005306:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	1c9a      	adds	r2, r3, #2
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005320:	2301      	movs	r3, #1
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005324:	f7fd fa02 	bl	800272c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005330:	429a      	cmp	r2, r3
 8005332:	d807      	bhi.n	8005344 <HAL_SPI_TransmitReceive+0x1d8>
 8005334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d003      	beq.n	8005344 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005342:	e0a7      	b.n	8005494 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1a6      	bne.n	800529c <HAL_SPI_TransmitReceive+0x130>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1a1      	bne.n	800529c <HAL_SPI_TransmitReceive+0x130>
 8005358:	e07c      	b.n	8005454 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x1fc>
 8005362:	8b7b      	ldrh	r3, [r7, #26]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d16b      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538e:	e057      	b.n	8005440 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b02      	cmp	r3, #2
 800539c:	d11c      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x26c>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d017      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x26c>
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d114      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d119      	bne.n	800541a <HAL_SPI_TransmitReceive+0x2ae>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d014      	beq.n	800541a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005416:	2301      	movs	r3, #1
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800541a:	f7fd f987 	bl	800272c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005426:	429a      	cmp	r2, r3
 8005428:	d803      	bhi.n	8005432 <HAL_SPI_TransmitReceive+0x2c6>
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d102      	bne.n	8005438 <HAL_SPI_TransmitReceive+0x2cc>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b00      	cmp	r3, #0
 8005436:	d103      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800543e:	e029      	b.n	8005494 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1a2      	bne.n	8005390 <HAL_SPI_TransmitReceive+0x224>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d19d      	bne.n	8005390 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f917 	bl	800568c <SPI_EndRxTxTransaction>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005470:	e010      	b.n	8005494 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	e000      	b.n	8005494 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3730      	adds	r7, #48	; 0x30
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054c0:	f7fd f934 	bl	800272c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	4413      	add	r3, r2
 80054ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054d0:	f7fd f92c 	bl	800272c <HAL_GetTick>
 80054d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054d6:	4b39      	ldr	r3, [pc, #228]	; (80055bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	015b      	lsls	r3, r3, #5
 80054dc:	0d1b      	lsrs	r3, r3, #20
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	fb02 f303 	mul.w	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054e6:	e054      	b.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d050      	beq.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054f0:	f7fd f91c 	bl	800272c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d902      	bls.n	8005506 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d13d      	bne.n	8005582 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005514:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551e:	d111      	bne.n	8005544 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	d004      	beq.n	8005534 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005532:	d107      	bne.n	8005544 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005542:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d10f      	bne.n	800556e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800556c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e017      	b.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3b01      	subs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4013      	ands	r3, r2
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	429a      	cmp	r2, r3
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d19b      	bne.n	80054e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000008 	.word	0x20000008

080055c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055d4:	d111      	bne.n	80055fa <SPI_EndRxTransaction+0x3a>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055de:	d004      	beq.n	80055ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e8:	d107      	bne.n	80055fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005602:	d12a      	bne.n	800565a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560c:	d012      	beq.n	8005634 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2200      	movs	r2, #0
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff ff49 	bl	80054b0 <SPI_WaitFlagStateUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02d      	beq.n	8005680 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e026      	b.n	8005682 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2200      	movs	r2, #0
 800563c:	2101      	movs	r1, #1
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff ff36 	bl	80054b0 <SPI_WaitFlagStateUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01a      	beq.n	8005680 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e013      	b.n	8005682 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2200      	movs	r2, #0
 8005662:	2101      	movs	r1, #1
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7ff ff23 	bl	80054b0 <SPI_WaitFlagStateUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e000      	b.n	8005682 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <SPI_EndRxTxTransaction+0x7c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1b      	ldr	r2, [pc, #108]	; (800570c <SPI_EndRxTxTransaction+0x80>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	0d5b      	lsrs	r3, r3, #21
 80056a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d112      	bne.n	80056de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fef4 	bl	80054b0 <SPI_WaitFlagStateUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d016      	beq.n	80056fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e00f      	b.n	80056fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b80      	cmp	r3, #128	; 0x80
 80056f6:	d0f2      	beq.n	80056de <SPI_EndRxTxTransaction+0x52>
 80056f8:	e000      	b.n	80056fc <SPI_EndRxTxTransaction+0x70>
        break;
 80056fa:	bf00      	nop
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000008 	.word	0x20000008
 800570c:	165e9f81 	.word	0x165e9f81

08005710 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e034      	b.n	8005790 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7fc fe0c 	bl	8002358 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3308      	adds	r3, #8
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f002 f828 	bl	80077a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	461a      	mov	r2, r3
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	f002 f872 	bl	8007844 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6858      	ldr	r0, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	f002 f8a7 	bl	80078c0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	6892      	ldr	r2, [r2, #8]
 800577a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	6892      	ldr	r2, [r2, #8]
 8005786:	f041 0101 	orr.w	r1, r1, #1
 800578a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e041      	b.n	800582e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fc fc66 	bl	8002090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f000 fc7a 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d001      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e04e      	b.n	80058ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a23      	ldr	r2, [pc, #140]	; (80058fc <HAL_TIM_Base_Start_IT+0xc4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d022      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x80>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d01d      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x80>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <HAL_TIM_Base_Start_IT+0xc8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d018      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x80>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <HAL_TIM_Base_Start_IT+0xcc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x80>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1c      	ldr	r2, [pc, #112]	; (8005908 <HAL_TIM_Base_Start_IT+0xd0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00e      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x80>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1b      	ldr	r2, [pc, #108]	; (800590c <HAL_TIM_Base_Start_IT+0xd4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d009      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x80>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <HAL_TIM_Base_Start_IT+0xd8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x80>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a18      	ldr	r2, [pc, #96]	; (8005914 <HAL_TIM_Base_Start_IT+0xdc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d111      	bne.n	80058dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b06      	cmp	r3, #6
 80058c8:	d010      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058da:	e007      	b.n	80058ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40010000 	.word	0x40010000
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40010400 	.word	0x40010400
 8005910:	40014000 	.word	0x40014000
 8005914:	40001800 	.word	0x40001800

08005918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e041      	b.n	80059ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f839 	bl	80059b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f000 fbba 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <HAL_TIM_PWM_Start+0x24>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	e022      	b.n	8005a36 <HAL_TIM_PWM_Start+0x6a>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d109      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x3e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e015      	b.n	8005a36 <HAL_TIM_PWM_Start+0x6a>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d109      	bne.n	8005a24 <HAL_TIM_PWM_Start+0x58>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	bf14      	ite	ne
 8005a1c:	2301      	movne	r3, #1
 8005a1e:	2300      	moveq	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e008      	b.n	8005a36 <HAL_TIM_PWM_Start+0x6a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e07c      	b.n	8005b38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_PWM_Start+0x82>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a4c:	e013      	b.n	8005a76 <HAL_TIM_PWM_Start+0xaa>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d104      	bne.n	8005a5e <HAL_TIM_PWM_Start+0x92>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5c:	e00b      	b.n	8005a76 <HAL_TIM_PWM_Start+0xaa>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start+0xa2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	e003      	b.n	8005a76 <HAL_TIM_PWM_Start+0xaa>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fe10 	bl	80066a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2d      	ldr	r2, [pc, #180]	; (8005b40 <HAL_TIM_PWM_Start+0x174>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_TIM_PWM_Start+0xcc>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2c      	ldr	r2, [pc, #176]	; (8005b44 <HAL_TIM_PWM_Start+0x178>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d101      	bne.n	8005a9c <HAL_TIM_PWM_Start+0xd0>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <HAL_TIM_PWM_Start+0xd2>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <HAL_TIM_PWM_Start+0x174>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d022      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x136>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac4:	d01d      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x136>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <HAL_TIM_PWM_Start+0x17c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x136>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_TIM_PWM_Start+0x180>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x136>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <HAL_TIM_PWM_Start+0x184>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x136>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <HAL_TIM_PWM_Start+0x178>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x136>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <HAL_TIM_PWM_Start+0x188>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x136>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <HAL_TIM_PWM_Start+0x18c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d111      	bne.n	8005b26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d010      	beq.n	8005b36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	e007      	b.n	8005b36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40010000 	.word	0x40010000
 8005b44:	40010400 	.word	0x40010400
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40000c00 	.word	0x40000c00
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40001800 	.word	0x40001800

08005b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d122      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0202 	mvn.w	r2, #2
 8005b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fa77 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa69 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fa7a 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0204 	mvn.w	r2, #4
 8005bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa4d 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa3f 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fa50 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0208 	mvn.w	r2, #8
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2204      	movs	r2, #4
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fa23 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa15 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fa26 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0210 	mvn.w	r2, #16
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f9f9 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9eb 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f9fc 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d107      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0201 	mvn.w	r2, #1
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc f862 	bl	8001da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d10e      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d107      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fd78 	bl	80067fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d10e      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d107      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f9c1 	bl	80060ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d10e      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d107      	bne.n	8005d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0220 	mvn.w	r2, #32
 8005d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fd42 	bl	80067e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e0ae      	b.n	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	f200 809f 	bhi.w	8005ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005ed9 	.word	0x08005ed9
 8005da8:	08005ed9 	.word	0x08005ed9
 8005dac:	08005ed9 	.word	0x08005ed9
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08005ed9 	.word	0x08005ed9
 8005db8:	08005ed9 	.word	0x08005ed9
 8005dbc:	08005ed9 	.word	0x08005ed9
 8005dc0:	08005e57 	.word	0x08005e57
 8005dc4:	08005ed9 	.word	0x08005ed9
 8005dc8:	08005ed9 	.word	0x08005ed9
 8005dcc:	08005ed9 	.word	0x08005ed9
 8005dd0:	08005e97 	.word	0x08005e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fa18 	bl	8006210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0204 	bic.w	r2, r2, #4
 8005dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	619a      	str	r2, [r3, #24]
      break;
 8005e12:	e064      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fa68 	bl	80062f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	619a      	str	r2, [r3, #24]
      break;
 8005e54:	e043      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fabd 	bl	80063dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0208 	orr.w	r2, r2, #8
 8005e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0204 	bic.w	r2, r2, #4
 8005e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	61da      	str	r2, [r3, #28]
      break;
 8005e94:	e023      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fb11 	bl	80064c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	021a      	lsls	r2, r3, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	61da      	str	r2, [r3, #28]
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
      break;
 8005edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e0b4      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x186>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f44:	d03e      	beq.n	8005fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4a:	f200 8087 	bhi.w	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f52:	f000 8086 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x172>
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5a:	d87f      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b70      	cmp	r3, #112	; 0x70
 8005f5e:	d01a      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0xa6>
 8005f60:	2b70      	cmp	r3, #112	; 0x70
 8005f62:	d87b      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b60      	cmp	r3, #96	; 0x60
 8005f66:	d050      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x11a>
 8005f68:	2b60      	cmp	r3, #96	; 0x60
 8005f6a:	d877      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b50      	cmp	r3, #80	; 0x50
 8005f6e:	d03c      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0xfa>
 8005f70:	2b50      	cmp	r3, #80	; 0x50
 8005f72:	d873      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d058      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x13a>
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	d86f      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b30      	cmp	r3, #48	; 0x30
 8005f7e:	d064      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	2b30      	cmp	r3, #48	; 0x30
 8005f82:	d86b      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d060      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d867      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05c      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d05a      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	e062      	b.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f000 fb5d 	bl	8006664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	609a      	str	r2, [r3, #8]
      break;
 8005fc2:	e04f      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f000 fb46 	bl	8006664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe6:	609a      	str	r2, [r3, #8]
      break;
 8005fe8:	e03c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 faba 	bl	8006570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2150      	movs	r1, #80	; 0x50
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fb13 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 8006008:	e02c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	461a      	mov	r2, r3
 8006018:	f000 fad9 	bl	80065ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2160      	movs	r1, #96	; 0x60
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb03 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 8006028:	e01c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	461a      	mov	r2, r3
 8006038:	f000 fa9a 	bl	8006570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2140      	movs	r1, #64	; 0x40
 8006042:	4618      	mov	r0, r3
 8006044:	f000 faf3 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 8006048:	e00c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 faea 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 800605a:	e003      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
      break;
 8006060:	e000      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a40      	ldr	r2, [pc, #256]	; (80061e4 <TIM_Base_SetConfig+0x114>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d00f      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3d      	ldr	r2, [pc, #244]	; (80061e8 <TIM_Base_SetConfig+0x118>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3c      	ldr	r2, [pc, #240]	; (80061ec <TIM_Base_SetConfig+0x11c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a3b      	ldr	r2, [pc, #236]	; (80061f0 <TIM_Base_SetConfig+0x120>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a3a      	ldr	r2, [pc, #232]	; (80061f4 <TIM_Base_SetConfig+0x124>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d108      	bne.n	8006122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2f      	ldr	r2, [pc, #188]	; (80061e4 <TIM_Base_SetConfig+0x114>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006130:	d027      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <TIM_Base_SetConfig+0x118>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d023      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2b      	ldr	r2, [pc, #172]	; (80061ec <TIM_Base_SetConfig+0x11c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2a      	ldr	r2, [pc, #168]	; (80061f0 <TIM_Base_SetConfig+0x120>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a29      	ldr	r2, [pc, #164]	; (80061f4 <TIM_Base_SetConfig+0x124>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d017      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <TIM_Base_SetConfig+0x128>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a27      	ldr	r2, [pc, #156]	; (80061fc <TIM_Base_SetConfig+0x12c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a26      	ldr	r2, [pc, #152]	; (8006200 <TIM_Base_SetConfig+0x130>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a25      	ldr	r2, [pc, #148]	; (8006204 <TIM_Base_SetConfig+0x134>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d007      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a24      	ldr	r2, [pc, #144]	; (8006208 <TIM_Base_SetConfig+0x138>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a23      	ldr	r2, [pc, #140]	; (800620c <TIM_Base_SetConfig+0x13c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d108      	bne.n	8006194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <TIM_Base_SetConfig+0x114>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0xf8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <TIM_Base_SetConfig+0x124>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800
 8006204:	40001800 	.word	0x40001800
 8006208:	40001c00 	.word	0x40001c00
 800620c:	40002000 	.word	0x40002000

08006210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f023 0302 	bic.w	r3, r3, #2
 8006258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <TIM_OC1_SetConfig+0xd8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC1_SetConfig+0x64>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1f      	ldr	r2, [pc, #124]	; (80062ec <TIM_OC1_SetConfig+0xdc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10c      	bne.n	800628e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0308 	bic.w	r3, r3, #8
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a15      	ldr	r2, [pc, #84]	; (80062e8 <TIM_OC1_SetConfig+0xd8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC1_SetConfig+0x8e>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a14      	ldr	r2, [pc, #80]	; (80062ec <TIM_OC1_SetConfig+0xdc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d111      	bne.n	80062c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	621a      	str	r2, [r3, #32]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40010400 	.word	0x40010400

080062f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0210 	bic.w	r2, r3, #16
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f023 0320 	bic.w	r3, r3, #32
 800633a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a22      	ldr	r2, [pc, #136]	; (80063d4 <TIM_OC2_SetConfig+0xe4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC2_SetConfig+0x68>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <TIM_OC2_SetConfig+0xe8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10d      	bne.n	8006374 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	011b      	lsls	r3, r3, #4
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <TIM_OC2_SetConfig+0xe4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_OC2_SetConfig+0x94>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <TIM_OC2_SetConfig+0xe8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d113      	bne.n	80063ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800638a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400

080063dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <TIM_OC3_SetConfig+0xe0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC3_SetConfig+0x66>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a20      	ldr	r2, [pc, #128]	; (80064c0 <TIM_OC3_SetConfig+0xe4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a16      	ldr	r2, [pc, #88]	; (80064bc <TIM_OC3_SetConfig+0xe0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC3_SetConfig+0x92>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <TIM_OC3_SetConfig+0xe4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d113      	bne.n	8006496 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	621a      	str	r2, [r3, #32]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40010400 	.word	0x40010400

080064c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800650e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	031b      	lsls	r3, r3, #12
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <TIM_OC4_SetConfig+0xa4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC4_SetConfig+0x68>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a11      	ldr	r2, [pc, #68]	; (800656c <TIM_OC4_SetConfig+0xa8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d109      	bne.n	8006540 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	019b      	lsls	r3, r3, #6
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40010400 	.word	0x40010400

08006570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f023 0201 	bic.w	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800659a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f023 030a 	bic.w	r3, r3, #10
 80065ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b087      	sub	sp, #28
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0210 	bic.w	r2, r3, #16
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	031b      	lsls	r3, r3, #12
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800660a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	f043 0307 	orr.w	r3, r3, #7
 8006650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	609a      	str	r2, [r3, #8]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800667e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	431a      	orrs	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2201      	movs	r2, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	401a      	ands	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	fa01 f303 	lsl.w	r3, r1, r3
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006704:	2302      	movs	r3, #2
 8006706:	e05a      	b.n	80067be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a21      	ldr	r2, [pc, #132]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d022      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006754:	d01d      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d018      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1a      	ldr	r2, [pc, #104]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00e      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a18      	ldr	r2, [pc, #96]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d009      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d004      	beq.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d10c      	bne.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40000800 	.word	0x40000800
 80067d8:	40000c00 	.word	0x40000c00
 80067dc:	40010400 	.word	0x40010400
 80067e0:	40014000 	.word	0x40014000
 80067e4:	40001800 	.word	0x40001800

080067e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e03f      	b.n	80068a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fb fcb6 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	; 0x24
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fddb 	bl	8007410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b08a      	sub	sp, #40	; 0x28
 80068ae:	af02      	add	r7, sp, #8
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d17c      	bne.n	80069c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_UART_Transmit+0x2c>
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e075      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Transmit+0x3e>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e06e      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2221      	movs	r2, #33	; 0x21
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068fe:	f7fb ff15 	bl	800272c <HAL_GetTick>
 8006902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	88fa      	ldrh	r2, [r7, #6]
 8006908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006918:	d108      	bne.n	800692c <HAL_UART_Transmit+0x82>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	e003      	b.n	8006934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800693c:	e02a      	b.n	8006994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fb1f 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e036      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800696c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	3302      	adds	r3, #2
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	e007      	b.n	8006986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1cf      	bne.n	800693e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2140      	movs	r1, #64	; 0x40
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 faef 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e006      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	4613      	mov	r3, r2
 80069da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d11d      	bne.n	8006a24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Receive_IT+0x26>
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e016      	b.n	8006a26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Receive_IT+0x38>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e00f      	b.n	8006a26 <HAL_UART_Receive_IT+0x58>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a14:	88fb      	ldrh	r3, [r7, #6]
 8006a16:	461a      	mov	r2, r3
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fb24 	bl	8007068 <UART_Start_Receive_IT>
 8006a20:	4603      	mov	r3, r0
 8006a22:	e000      	b.n	8006a26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a24:	2302      	movs	r3, #2
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b0ba      	sub	sp, #232	; 0xe8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10f      	bne.n	8006a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_UART_IRQHandler+0x66>
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fc03 	bl	800729a <UART_Receive_IT>
      return;
 8006a94:	e256      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80de 	beq.w	8006c5c <HAL_UART_IRQHandler+0x22c>
 8006aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80d1 	beq.w	8006c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <HAL_UART_IRQHandler+0xae>
 8006ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f043 0201 	orr.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <HAL_UART_IRQHandler+0xd2>
 8006aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f043 0202 	orr.w	r2, r3, #2
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_UART_IRQHandler+0xf6>
 8006b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <HAL_UART_IRQHandler+0x126>
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f043 0208 	orr.w	r2, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 81ed 	beq.w	8006f3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_UART_IRQHandler+0x14e>
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb8e 	bl	800729a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	bf0c      	ite	eq
 8006b8c:	2301      	moveq	r3, #1
 8006b8e:	2300      	movne	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <HAL_UART_IRQHandler+0x17a>
 8006ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d04f      	beq.n	8006c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa96 	bl	80070dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b40      	cmp	r3, #64	; 0x40
 8006bbc:	d141      	bne.n	8006c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3314      	adds	r3, #20
 8006be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1d9      	bne.n	8006bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d013      	beq.n	8006c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	4a7d      	ldr	r2, [pc, #500]	; (8006e0c <HAL_UART_IRQHandler+0x3dc>)
 8006c18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fc fc4e 	bl	80034c0 <HAL_DMA_Abort_IT>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	e00e      	b.n	8006c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f990 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c40:	e00a      	b.n	8006c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f98c 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c48:	e006      	b.n	8006c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f988 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c56:	e170      	b.n	8006f3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c58:	bf00      	nop
    return;
 8006c5a:	e16e      	b.n	8006f3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f040 814a 	bne.w	8006efa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 8143 	beq.w	8006efa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 813c 	beq.w	8006efa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	f040 80b4 	bne.w	8006e10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8140 	beq.w	8006f3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	f080 8139 	bcs.w	8006f3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cde:	f000 8088 	beq.w	8006df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1d9      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3314      	adds	r3, #20
 8006d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e1      	bne.n	8006d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3314      	adds	r3, #20
 8006d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e3      	bne.n	8006d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e3      	bne.n	8006db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fc faf7 	bl	80033e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f8b6 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e08:	e099      	b.n	8006f3e <HAL_UART_IRQHandler+0x50e>
 8006e0a:	bf00      	nop
 8006e0c:	080071a3 	.word	0x080071a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 808b 	beq.w	8006f42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8086 	beq.w	8006f42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e3      	bne.n	8006e36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3314      	adds	r3, #20
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3314      	adds	r3, #20
 8006e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e92:	633a      	str	r2, [r7, #48]	; 0x30
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e3      	bne.n	8006e6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0310 	bic.w	r3, r3, #16
 8006eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ed8:	61fa      	str	r2, [r7, #28]
 8006eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	69b9      	ldr	r1, [r7, #24]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e3      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f83e 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ef8:	e023      	b.n	8006f42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <HAL_UART_IRQHandler+0x4ea>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f959 	bl	80071ca <UART_Transmit_IT>
    return;
 8006f18:	e014      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00e      	beq.n	8006f44 <HAL_UART_IRQHandler+0x514>
 8006f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d008      	beq.n	8006f44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f999 	bl	800726a <UART_EndTransmit_IT>
    return;
 8006f38:	e004      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
    return;
 8006f3a:	bf00      	nop
 8006f3c:	e002      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
      return;
 8006f3e:	bf00      	nop
 8006f40:	e000      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
      return;
 8006f42:	bf00      	nop
  }
}
 8006f44:	37e8      	adds	r7, #232	; 0xe8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop

08006f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b090      	sub	sp, #64	; 0x40
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	e050      	b.n	8007040 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d04c      	beq.n	8007040 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fac:	f7fb fbbe 	bl	800272c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d241      	bcs.n	8007040 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f023 0301 	bic.w	r3, r3, #1
 8007006:	63bb      	str	r3, [r7, #56]	; 0x38
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007010:	623a      	str	r2, [r7, #32]
 8007012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	6a3a      	ldr	r2, [r7, #32]
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	61bb      	str	r3, [r7, #24]
   return(result);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e5      	bne.n	8006ff0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e00f      	b.n	8007060 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4013      	ands	r3, r2
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	bf0c      	ite	eq
 8007050:	2301      	moveq	r3, #1
 8007052:	2300      	movne	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	429a      	cmp	r2, r3
 800705c:	d09f      	beq.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3740      	adds	r7, #64	; 0x40
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	88fa      	ldrh	r2, [r7, #6]
 8007086:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2222      	movs	r2, #34	; 0x22
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695a      	ldr	r2, [r3, #20]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0220 	orr.w	r2, r2, #32
 80070cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b095      	sub	sp, #84	; 0x54
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007104:	643a      	str	r2, [r7, #64]	; 0x40
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800710a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3314      	adds	r3, #20
 800711e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	61fb      	str	r3, [r7, #28]
   return(result);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3314      	adds	r3, #20
 8007136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800713e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007150:	2b01      	cmp	r3, #1
 8007152:	d119      	bne.n	8007188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	60bb      	str	r3, [r7, #8]
   return(result);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f023 0310 	bic.w	r3, r3, #16
 800716a:	647b      	str	r3, [r7, #68]	; 0x44
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007174:	61ba      	str	r2, [r7, #24]
 8007176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6979      	ldr	r1, [r7, #20]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	613b      	str	r3, [r7, #16]
   return(result);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007196:	bf00      	nop
 8007198:	3754      	adds	r7, #84	; 0x54
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7ff fecf 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b21      	cmp	r3, #33	; 0x21
 80071dc:	d13e      	bne.n	800725c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e6:	d114      	bne.n	8007212 <UART_Transmit_IT+0x48>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d110      	bne.n	8007212 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	1c9a      	adds	r2, r3, #2
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	621a      	str	r2, [r3, #32]
 8007210:	e008      	b.n	8007224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	1c59      	adds	r1, r3, #1
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6211      	str	r1, [r2, #32]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	4619      	mov	r1, r3
 8007232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10f      	bne.n	8007258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800725c:	2302      	movs	r3, #2
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fe5e 	bl	8006f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b08c      	sub	sp, #48	; 0x30
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b22      	cmp	r3, #34	; 0x22
 80072ac:	f040 80ab 	bne.w	8007406 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b8:	d117      	bne.n	80072ea <UART_Receive_IT+0x50>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d113      	bne.n	80072ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d8:	b29a      	uxth	r2, r3
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e2:	1c9a      	adds	r2, r3, #2
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	629a      	str	r2, [r3, #40]	; 0x28
 80072e8:	e026      	b.n	8007338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	d007      	beq.n	800730e <UART_Receive_IT+0x74>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10a      	bne.n	800731c <UART_Receive_IT+0x82>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e008      	b.n	800732e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007328:	b2da      	uxtb	r2, r3
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4619      	mov	r1, r3
 8007346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007348:	2b00      	cmp	r3, #0
 800734a:	d15a      	bne.n	8007402 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0220 	bic.w	r2, r2, #32
 800735a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800736a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	2b01      	cmp	r3, #1
 800738a:	d135      	bne.n	80073f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	330c      	adds	r3, #12
 8007398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	613b      	str	r3, [r7, #16]
   return(result);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b2:	623a      	str	r2, [r7, #32]
 80073b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	69f9      	ldr	r1, [r7, #28]
 80073b8:	6a3a      	ldr	r2, [r7, #32]
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b10      	cmp	r3, #16
 80073d2:	d10a      	bne.n	80073ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fdbf 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
 80073f6:	e002      	b.n	80073fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fb f87f 	bl	80024fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e002      	b.n	8007408 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	e000      	b.n	8007408 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007406:	2302      	movs	r3, #2
  }
}
 8007408:	4618      	mov	r0, r3
 800740a:	3730      	adds	r7, #48	; 0x30
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	b09f      	sub	sp, #124	; 0x7c
 8007416:	af00      	add	r7, sp, #0
 8007418:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800741a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007426:	68d9      	ldr	r1, [r3, #12]
 8007428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	ea40 0301 	orr.w	r3, r0, r1
 8007430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	431a      	orrs	r2, r3
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	431a      	orrs	r2, r3
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	4313      	orrs	r3, r2
 8007448:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800744a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007454:	f021 010c 	bic.w	r1, r1, #12
 8007458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800745e:	430b      	orrs	r3, r1
 8007460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800746c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746e:	6999      	ldr	r1, [r3, #24]
 8007470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	ea40 0301 	orr.w	r3, r0, r1
 8007478:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800747a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4bc5      	ldr	r3, [pc, #788]	; (8007794 <UART_SetConfig+0x384>)
 8007480:	429a      	cmp	r2, r3
 8007482:	d004      	beq.n	800748e <UART_SetConfig+0x7e>
 8007484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4bc3      	ldr	r3, [pc, #780]	; (8007798 <UART_SetConfig+0x388>)
 800748a:	429a      	cmp	r2, r3
 800748c:	d103      	bne.n	8007496 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800748e:	f7fd fb83 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 8007492:	6778      	str	r0, [r7, #116]	; 0x74
 8007494:	e002      	b.n	800749c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007496:	f7fd fb6b 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 800749a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800749c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a4:	f040 80b6 	bne.w	8007614 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074aa:	461c      	mov	r4, r3
 80074ac:	f04f 0500 	mov.w	r5, #0
 80074b0:	4622      	mov	r2, r4
 80074b2:	462b      	mov	r3, r5
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	6439      	str	r1, [r7, #64]	; 0x40
 80074b8:	415b      	adcs	r3, r3
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44
 80074bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074c0:	1912      	adds	r2, r2, r4
 80074c2:	eb45 0303 	adc.w	r3, r5, r3
 80074c6:	f04f 0000 	mov.w	r0, #0
 80074ca:	f04f 0100 	mov.w	r1, #0
 80074ce:	00d9      	lsls	r1, r3, #3
 80074d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d4:	00d0      	lsls	r0, r2, #3
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	1911      	adds	r1, r2, r4
 80074dc:	6639      	str	r1, [r7, #96]	; 0x60
 80074de:	416b      	adcs	r3, r5
 80074e0:	667b      	str	r3, [r7, #100]	; 0x64
 80074e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80074f0:	415b      	adcs	r3, r3
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80074fc:	f7f9 f87c 	bl	80005f8 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4ba5      	ldr	r3, [pc, #660]	; (800779c <UART_SetConfig+0x38c>)
 8007506:	fba3 2302 	umull	r2, r3, r3, r2
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	011e      	lsls	r6, r3, #4
 800750e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007510:	461c      	mov	r4, r3
 8007512:	f04f 0500 	mov.w	r5, #0
 8007516:	4622      	mov	r2, r4
 8007518:	462b      	mov	r3, r5
 800751a:	1891      	adds	r1, r2, r2
 800751c:	6339      	str	r1, [r7, #48]	; 0x30
 800751e:	415b      	adcs	r3, r3
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
 8007522:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007526:	1912      	adds	r2, r2, r4
 8007528:	eb45 0303 	adc.w	r3, r5, r3
 800752c:	f04f 0000 	mov.w	r0, #0
 8007530:	f04f 0100 	mov.w	r1, #0
 8007534:	00d9      	lsls	r1, r3, #3
 8007536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800753a:	00d0      	lsls	r0, r2, #3
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	1911      	adds	r1, r2, r4
 8007542:	65b9      	str	r1, [r7, #88]	; 0x58
 8007544:	416b      	adcs	r3, r5
 8007546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	461a      	mov	r2, r3
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	1891      	adds	r1, r2, r2
 8007554:	62b9      	str	r1, [r7, #40]	; 0x28
 8007556:	415b      	adcs	r3, r3
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800755e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007562:	f7f9 f849 	bl	80005f8 <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4b8c      	ldr	r3, [pc, #560]	; (800779c <UART_SetConfig+0x38c>)
 800756c:	fba3 1302 	umull	r1, r3, r3, r2
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	2164      	movs	r1, #100	; 0x64
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	3332      	adds	r3, #50	; 0x32
 800757e:	4a87      	ldr	r2, [pc, #540]	; (800779c <UART_SetConfig+0x38c>)
 8007580:	fba2 2303 	umull	r2, r3, r2, r3
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800758c:	441e      	add	r6, r3
 800758e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007590:	4618      	mov	r0, r3
 8007592:	f04f 0100 	mov.w	r1, #0
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	1894      	adds	r4, r2, r2
 800759c:	623c      	str	r4, [r7, #32]
 800759e:	415b      	adcs	r3, r3
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
 80075a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075a6:	1812      	adds	r2, r2, r0
 80075a8:	eb41 0303 	adc.w	r3, r1, r3
 80075ac:	f04f 0400 	mov.w	r4, #0
 80075b0:	f04f 0500 	mov.w	r5, #0
 80075b4:	00dd      	lsls	r5, r3, #3
 80075b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075ba:	00d4      	lsls	r4, r2, #3
 80075bc:	4622      	mov	r2, r4
 80075be:	462b      	mov	r3, r5
 80075c0:	1814      	adds	r4, r2, r0
 80075c2:	653c      	str	r4, [r7, #80]	; 0x50
 80075c4:	414b      	adcs	r3, r1
 80075c6:	657b      	str	r3, [r7, #84]	; 0x54
 80075c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	1891      	adds	r1, r2, r2
 80075d4:	61b9      	str	r1, [r7, #24]
 80075d6:	415b      	adcs	r3, r3
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80075e2:	f7f9 f809 	bl	80005f8 <__aeabi_uldivmod>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4b6c      	ldr	r3, [pc, #432]	; (800779c <UART_SetConfig+0x38c>)
 80075ec:	fba3 1302 	umull	r1, r3, r3, r2
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	2164      	movs	r1, #100	; 0x64
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	3332      	adds	r3, #50	; 0x32
 80075fe:	4a67      	ldr	r2, [pc, #412]	; (800779c <UART_SetConfig+0x38c>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	f003 0207 	and.w	r2, r3, #7
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4432      	add	r2, r6
 8007610:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007612:	e0b9      	b.n	8007788 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007616:	461c      	mov	r4, r3
 8007618:	f04f 0500 	mov.w	r5, #0
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	1891      	adds	r1, r2, r2
 8007622:	6139      	str	r1, [r7, #16]
 8007624:	415b      	adcs	r3, r3
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800762c:	1912      	adds	r2, r2, r4
 800762e:	eb45 0303 	adc.w	r3, r5, r3
 8007632:	f04f 0000 	mov.w	r0, #0
 8007636:	f04f 0100 	mov.w	r1, #0
 800763a:	00d9      	lsls	r1, r3, #3
 800763c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007640:	00d0      	lsls	r0, r2, #3
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	eb12 0804 	adds.w	r8, r2, r4
 800764a:	eb43 0905 	adc.w	r9, r3, r5
 800764e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	4618      	mov	r0, r3
 8007654:	f04f 0100 	mov.w	r1, #0
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	008b      	lsls	r3, r1, #2
 8007662:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007666:	0082      	lsls	r2, r0, #2
 8007668:	4640      	mov	r0, r8
 800766a:	4649      	mov	r1, r9
 800766c:	f7f8 ffc4 	bl	80005f8 <__aeabi_uldivmod>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4b49      	ldr	r3, [pc, #292]	; (800779c <UART_SetConfig+0x38c>)
 8007676:	fba3 2302 	umull	r2, r3, r3, r2
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	011e      	lsls	r6, r3, #4
 800767e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007680:	4618      	mov	r0, r3
 8007682:	f04f 0100 	mov.w	r1, #0
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	1894      	adds	r4, r2, r2
 800768c:	60bc      	str	r4, [r7, #8]
 800768e:	415b      	adcs	r3, r3
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007696:	1812      	adds	r2, r2, r0
 8007698:	eb41 0303 	adc.w	r3, r1, r3
 800769c:	f04f 0400 	mov.w	r4, #0
 80076a0:	f04f 0500 	mov.w	r5, #0
 80076a4:	00dd      	lsls	r5, r3, #3
 80076a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076aa:	00d4      	lsls	r4, r2, #3
 80076ac:	4622      	mov	r2, r4
 80076ae:	462b      	mov	r3, r5
 80076b0:	1814      	adds	r4, r2, r0
 80076b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80076b4:	414b      	adcs	r3, r1
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	f04f 0100 	mov.w	r1, #0
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	008b      	lsls	r3, r1, #2
 80076cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076d0:	0082      	lsls	r2, r0, #2
 80076d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80076d6:	f7f8 ff8f 	bl	80005f8 <__aeabi_uldivmod>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4b2f      	ldr	r3, [pc, #188]	; (800779c <UART_SetConfig+0x38c>)
 80076e0:	fba3 1302 	umull	r1, r3, r3, r2
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	2164      	movs	r1, #100	; 0x64
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	3332      	adds	r3, #50	; 0x32
 80076f2:	4a2a      	ldr	r2, [pc, #168]	; (800779c <UART_SetConfig+0x38c>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076fe:	441e      	add	r6, r3
 8007700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007702:	4618      	mov	r0, r3
 8007704:	f04f 0100 	mov.w	r1, #0
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	1894      	adds	r4, r2, r2
 800770e:	603c      	str	r4, [r7, #0]
 8007710:	415b      	adcs	r3, r3
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007718:	1812      	adds	r2, r2, r0
 800771a:	eb41 0303 	adc.w	r3, r1, r3
 800771e:	f04f 0400 	mov.w	r4, #0
 8007722:	f04f 0500 	mov.w	r5, #0
 8007726:	00dd      	lsls	r5, r3, #3
 8007728:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800772c:	00d4      	lsls	r4, r2, #3
 800772e:	4622      	mov	r2, r4
 8007730:	462b      	mov	r3, r5
 8007732:	eb12 0a00 	adds.w	sl, r2, r0
 8007736:	eb43 0b01 	adc.w	fp, r3, r1
 800773a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	4618      	mov	r0, r3
 8007740:	f04f 0100 	mov.w	r1, #0
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	008b      	lsls	r3, r1, #2
 800774e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007752:	0082      	lsls	r2, r0, #2
 8007754:	4650      	mov	r0, sl
 8007756:	4659      	mov	r1, fp
 8007758:	f7f8 ff4e 	bl	80005f8 <__aeabi_uldivmod>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4b0e      	ldr	r3, [pc, #56]	; (800779c <UART_SetConfig+0x38c>)
 8007762:	fba3 1302 	umull	r1, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	2164      	movs	r1, #100	; 0x64
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	3332      	adds	r3, #50	; 0x32
 8007774:	4a09      	ldr	r2, [pc, #36]	; (800779c <UART_SetConfig+0x38c>)
 8007776:	fba2 2303 	umull	r2, r3, r2, r3
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	f003 020f 	and.w	r2, r3, #15
 8007780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4432      	add	r2, r6
 8007786:	609a      	str	r2, [r3, #8]
}
 8007788:	bf00      	nop
 800778a:	377c      	adds	r7, #124	; 0x7c
 800778c:	46bd      	mov	sp, r7
 800778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007792:	bf00      	nop
 8007794:	40011000 	.word	0x40011000
 8007798:	40011400 	.word	0x40011400
 800779c:	51eb851f 	.word	0x51eb851f

080077a0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4b20      	ldr	r3, [pc, #128]	; (8007840 <FSMC_NORSRAM_Init+0xa0>)
 80077be:	4013      	ands	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80077ca:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80077d0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80077d6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80077dc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80077e2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80077e8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80077ee:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80077f4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80077fa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007800:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007806:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800780c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b08      	cmp	r3, #8
 800781a:	d103      	bne.n	8007824 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007822:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	fff00080 	.word	0xfff00080

08007844 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007866:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007872:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800787a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007882:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	3b01      	subs	r3, #1
 800788a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800788c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	3b02      	subs	r3, #2
 8007894:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007896:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800789c:	4313      	orrs	r3, r2
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078d8:	d122      	bne.n	8007920 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4b15      	ldr	r3, [pc, #84]	; (800793c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078f6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80078fe:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007906:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800790c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6979      	ldr	r1, [r7, #20]
 800791a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800791e:	e005      	b.n	800792c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	cff00000 	.word	0xcff00000

08007940 <__errno>:
 8007940:	4b01      	ldr	r3, [pc, #4]	; (8007948 <__errno+0x8>)
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20000014 	.word	0x20000014

0800794c <__libc_init_array>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	4d0d      	ldr	r5, [pc, #52]	; (8007984 <__libc_init_array+0x38>)
 8007950:	4c0d      	ldr	r4, [pc, #52]	; (8007988 <__libc_init_array+0x3c>)
 8007952:	1b64      	subs	r4, r4, r5
 8007954:	10a4      	asrs	r4, r4, #2
 8007956:	2600      	movs	r6, #0
 8007958:	42a6      	cmp	r6, r4
 800795a:	d109      	bne.n	8007970 <__libc_init_array+0x24>
 800795c:	4d0b      	ldr	r5, [pc, #44]	; (800798c <__libc_init_array+0x40>)
 800795e:	4c0c      	ldr	r4, [pc, #48]	; (8007990 <__libc_init_array+0x44>)
 8007960:	f000 fc4e 	bl	8008200 <_init>
 8007964:	1b64      	subs	r4, r4, r5
 8007966:	10a4      	asrs	r4, r4, #2
 8007968:	2600      	movs	r6, #0
 800796a:	42a6      	cmp	r6, r4
 800796c:	d105      	bne.n	800797a <__libc_init_array+0x2e>
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	f855 3b04 	ldr.w	r3, [r5], #4
 8007974:	4798      	blx	r3
 8007976:	3601      	adds	r6, #1
 8007978:	e7ee      	b.n	8007958 <__libc_init_array+0xc>
 800797a:	f855 3b04 	ldr.w	r3, [r5], #4
 800797e:	4798      	blx	r3
 8007980:	3601      	adds	r6, #1
 8007982:	e7f2      	b.n	800796a <__libc_init_array+0x1e>
 8007984:	0800b290 	.word	0x0800b290
 8007988:	0800b290 	.word	0x0800b290
 800798c:	0800b290 	.word	0x0800b290
 8007990:	0800b294 	.word	0x0800b294

08007994 <memset>:
 8007994:	4402      	add	r2, r0
 8007996:	4603      	mov	r3, r0
 8007998:	4293      	cmp	r3, r2
 800799a:	d100      	bne.n	800799e <memset+0xa>
 800799c:	4770      	bx	lr
 800799e:	f803 1b01 	strb.w	r1, [r3], #1
 80079a2:	e7f9      	b.n	8007998 <memset+0x4>

080079a4 <siprintf>:
 80079a4:	b40e      	push	{r1, r2, r3}
 80079a6:	b500      	push	{lr}
 80079a8:	b09c      	sub	sp, #112	; 0x70
 80079aa:	ab1d      	add	r3, sp, #116	; 0x74
 80079ac:	9002      	str	r0, [sp, #8]
 80079ae:	9006      	str	r0, [sp, #24]
 80079b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079b4:	4809      	ldr	r0, [pc, #36]	; (80079dc <siprintf+0x38>)
 80079b6:	9107      	str	r1, [sp, #28]
 80079b8:	9104      	str	r1, [sp, #16]
 80079ba:	4909      	ldr	r1, [pc, #36]	; (80079e0 <siprintf+0x3c>)
 80079bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c0:	9105      	str	r1, [sp, #20]
 80079c2:	6800      	ldr	r0, [r0, #0]
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	a902      	add	r1, sp, #8
 80079c8:	f000 f868 	bl	8007a9c <_svfiprintf_r>
 80079cc:	9b02      	ldr	r3, [sp, #8]
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	b01c      	add	sp, #112	; 0x70
 80079d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d8:	b003      	add	sp, #12
 80079da:	4770      	bx	lr
 80079dc:	20000014 	.word	0x20000014
 80079e0:	ffff0208 	.word	0xffff0208

080079e4 <__ssputs_r>:
 80079e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e8:	688e      	ldr	r6, [r1, #8]
 80079ea:	429e      	cmp	r6, r3
 80079ec:	4682      	mov	sl, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	4690      	mov	r8, r2
 80079f2:	461f      	mov	r7, r3
 80079f4:	d838      	bhi.n	8007a68 <__ssputs_r+0x84>
 80079f6:	898a      	ldrh	r2, [r1, #12]
 80079f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079fc:	d032      	beq.n	8007a64 <__ssputs_r+0x80>
 80079fe:	6825      	ldr	r5, [r4, #0]
 8007a00:	6909      	ldr	r1, [r1, #16]
 8007a02:	eba5 0901 	sub.w	r9, r5, r1
 8007a06:	6965      	ldr	r5, [r4, #20]
 8007a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a10:	3301      	adds	r3, #1
 8007a12:	444b      	add	r3, r9
 8007a14:	106d      	asrs	r5, r5, #1
 8007a16:	429d      	cmp	r5, r3
 8007a18:	bf38      	it	cc
 8007a1a:	461d      	movcc	r5, r3
 8007a1c:	0553      	lsls	r3, r2, #21
 8007a1e:	d531      	bpl.n	8007a84 <__ssputs_r+0xa0>
 8007a20:	4629      	mov	r1, r5
 8007a22:	f000 fb47 	bl	80080b4 <_malloc_r>
 8007a26:	4606      	mov	r6, r0
 8007a28:	b950      	cbnz	r0, 8007a40 <__ssputs_r+0x5c>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	f8ca 3000 	str.w	r3, [sl]
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a36:	81a3      	strh	r3, [r4, #12]
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	6921      	ldr	r1, [r4, #16]
 8007a42:	464a      	mov	r2, r9
 8007a44:	f000 fabe 	bl	8007fc4 <memcpy>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	6126      	str	r6, [r4, #16]
 8007a56:	6165      	str	r5, [r4, #20]
 8007a58:	444e      	add	r6, r9
 8007a5a:	eba5 0509 	sub.w	r5, r5, r9
 8007a5e:	6026      	str	r6, [r4, #0]
 8007a60:	60a5      	str	r5, [r4, #8]
 8007a62:	463e      	mov	r6, r7
 8007a64:	42be      	cmp	r6, r7
 8007a66:	d900      	bls.n	8007a6a <__ssputs_r+0x86>
 8007a68:	463e      	mov	r6, r7
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	6820      	ldr	r0, [r4, #0]
 8007a6e:	4641      	mov	r1, r8
 8007a70:	f000 fab6 	bl	8007fe0 <memmove>
 8007a74:	68a3      	ldr	r3, [r4, #8]
 8007a76:	6822      	ldr	r2, [r4, #0]
 8007a78:	1b9b      	subs	r3, r3, r6
 8007a7a:	4432      	add	r2, r6
 8007a7c:	60a3      	str	r3, [r4, #8]
 8007a7e:	6022      	str	r2, [r4, #0]
 8007a80:	2000      	movs	r0, #0
 8007a82:	e7db      	b.n	8007a3c <__ssputs_r+0x58>
 8007a84:	462a      	mov	r2, r5
 8007a86:	f000 fb6f 	bl	8008168 <_realloc_r>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d1e1      	bne.n	8007a54 <__ssputs_r+0x70>
 8007a90:	6921      	ldr	r1, [r4, #16]
 8007a92:	4650      	mov	r0, sl
 8007a94:	f000 fabe 	bl	8008014 <_free_r>
 8007a98:	e7c7      	b.n	8007a2a <__ssputs_r+0x46>
	...

08007a9c <_svfiprintf_r>:
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	4698      	mov	r8, r3
 8007aa2:	898b      	ldrh	r3, [r1, #12]
 8007aa4:	061b      	lsls	r3, r3, #24
 8007aa6:	b09d      	sub	sp, #116	; 0x74
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	460d      	mov	r5, r1
 8007aac:	4614      	mov	r4, r2
 8007aae:	d50e      	bpl.n	8007ace <_svfiprintf_r+0x32>
 8007ab0:	690b      	ldr	r3, [r1, #16]
 8007ab2:	b963      	cbnz	r3, 8007ace <_svfiprintf_r+0x32>
 8007ab4:	2140      	movs	r1, #64	; 0x40
 8007ab6:	f000 fafd 	bl	80080b4 <_malloc_r>
 8007aba:	6028      	str	r0, [r5, #0]
 8007abc:	6128      	str	r0, [r5, #16]
 8007abe:	b920      	cbnz	r0, 8007aca <_svfiprintf_r+0x2e>
 8007ac0:	230c      	movs	r3, #12
 8007ac2:	603b      	str	r3, [r7, #0]
 8007ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac8:	e0d1      	b.n	8007c6e <_svfiprintf_r+0x1d2>
 8007aca:	2340      	movs	r3, #64	; 0x40
 8007acc:	616b      	str	r3, [r5, #20]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad2:	2320      	movs	r3, #32
 8007ad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007adc:	2330      	movs	r3, #48	; 0x30
 8007ade:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c88 <_svfiprintf_r+0x1ec>
 8007ae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae6:	f04f 0901 	mov.w	r9, #1
 8007aea:	4623      	mov	r3, r4
 8007aec:	469a      	mov	sl, r3
 8007aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af2:	b10a      	cbz	r2, 8007af8 <_svfiprintf_r+0x5c>
 8007af4:	2a25      	cmp	r2, #37	; 0x25
 8007af6:	d1f9      	bne.n	8007aec <_svfiprintf_r+0x50>
 8007af8:	ebba 0b04 	subs.w	fp, sl, r4
 8007afc:	d00b      	beq.n	8007b16 <_svfiprintf_r+0x7a>
 8007afe:	465b      	mov	r3, fp
 8007b00:	4622      	mov	r2, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	4638      	mov	r0, r7
 8007b06:	f7ff ff6d 	bl	80079e4 <__ssputs_r>
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	f000 80aa 	beq.w	8007c64 <_svfiprintf_r+0x1c8>
 8007b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b12:	445a      	add	r2, fp
 8007b14:	9209      	str	r2, [sp, #36]	; 0x24
 8007b16:	f89a 3000 	ldrb.w	r3, [sl]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80a2 	beq.w	8007c64 <_svfiprintf_r+0x1c8>
 8007b20:	2300      	movs	r3, #0
 8007b22:	f04f 32ff 	mov.w	r2, #4294967295
 8007b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b2a:	f10a 0a01 	add.w	sl, sl, #1
 8007b2e:	9304      	str	r3, [sp, #16]
 8007b30:	9307      	str	r3, [sp, #28]
 8007b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b36:	931a      	str	r3, [sp, #104]	; 0x68
 8007b38:	4654      	mov	r4, sl
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b40:	4851      	ldr	r0, [pc, #324]	; (8007c88 <_svfiprintf_r+0x1ec>)
 8007b42:	f7f8 fb4d 	bl	80001e0 <memchr>
 8007b46:	9a04      	ldr	r2, [sp, #16]
 8007b48:	b9d8      	cbnz	r0, 8007b82 <_svfiprintf_r+0xe6>
 8007b4a:	06d0      	lsls	r0, r2, #27
 8007b4c:	bf44      	itt	mi
 8007b4e:	2320      	movmi	r3, #32
 8007b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b54:	0711      	lsls	r1, r2, #28
 8007b56:	bf44      	itt	mi
 8007b58:	232b      	movmi	r3, #43	; 0x2b
 8007b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b62:	2b2a      	cmp	r3, #42	; 0x2a
 8007b64:	d015      	beq.n	8007b92 <_svfiprintf_r+0xf6>
 8007b66:	9a07      	ldr	r2, [sp, #28]
 8007b68:	4654      	mov	r4, sl
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	f04f 0c0a 	mov.w	ip, #10
 8007b70:	4621      	mov	r1, r4
 8007b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b76:	3b30      	subs	r3, #48	; 0x30
 8007b78:	2b09      	cmp	r3, #9
 8007b7a:	d94e      	bls.n	8007c1a <_svfiprintf_r+0x17e>
 8007b7c:	b1b0      	cbz	r0, 8007bac <_svfiprintf_r+0x110>
 8007b7e:	9207      	str	r2, [sp, #28]
 8007b80:	e014      	b.n	8007bac <_svfiprintf_r+0x110>
 8007b82:	eba0 0308 	sub.w	r3, r0, r8
 8007b86:	fa09 f303 	lsl.w	r3, r9, r3
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	46a2      	mov	sl, r4
 8007b90:	e7d2      	b.n	8007b38 <_svfiprintf_r+0x9c>
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	1d19      	adds	r1, r3, #4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	9103      	str	r1, [sp, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bfbb      	ittet	lt
 8007b9e:	425b      	neglt	r3, r3
 8007ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba4:	9307      	strge	r3, [sp, #28]
 8007ba6:	9307      	strlt	r3, [sp, #28]
 8007ba8:	bfb8      	it	lt
 8007baa:	9204      	strlt	r2, [sp, #16]
 8007bac:	7823      	ldrb	r3, [r4, #0]
 8007bae:	2b2e      	cmp	r3, #46	; 0x2e
 8007bb0:	d10c      	bne.n	8007bcc <_svfiprintf_r+0x130>
 8007bb2:	7863      	ldrb	r3, [r4, #1]
 8007bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb6:	d135      	bne.n	8007c24 <_svfiprintf_r+0x188>
 8007bb8:	9b03      	ldr	r3, [sp, #12]
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	9203      	str	r2, [sp, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bfb8      	it	lt
 8007bc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bc8:	3402      	adds	r4, #2
 8007bca:	9305      	str	r3, [sp, #20]
 8007bcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c98 <_svfiprintf_r+0x1fc>
 8007bd0:	7821      	ldrb	r1, [r4, #0]
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	4650      	mov	r0, sl
 8007bd6:	f7f8 fb03 	bl	80001e0 <memchr>
 8007bda:	b140      	cbz	r0, 8007bee <_svfiprintf_r+0x152>
 8007bdc:	2340      	movs	r3, #64	; 0x40
 8007bde:	eba0 000a 	sub.w	r0, r0, sl
 8007be2:	fa03 f000 	lsl.w	r0, r3, r0
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	4303      	orrs	r3, r0
 8007bea:	3401      	adds	r4, #1
 8007bec:	9304      	str	r3, [sp, #16]
 8007bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf2:	4826      	ldr	r0, [pc, #152]	; (8007c8c <_svfiprintf_r+0x1f0>)
 8007bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bf8:	2206      	movs	r2, #6
 8007bfa:	f7f8 faf1 	bl	80001e0 <memchr>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d038      	beq.n	8007c74 <_svfiprintf_r+0x1d8>
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <_svfiprintf_r+0x1f4>)
 8007c04:	bb1b      	cbnz	r3, 8007c4e <_svfiprintf_r+0x1b2>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	3307      	adds	r3, #7
 8007c0a:	f023 0307 	bic.w	r3, r3, #7
 8007c0e:	3308      	adds	r3, #8
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c14:	4433      	add	r3, r6
 8007c16:	9309      	str	r3, [sp, #36]	; 0x24
 8007c18:	e767      	b.n	8007aea <_svfiprintf_r+0x4e>
 8007c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c1e:	460c      	mov	r4, r1
 8007c20:	2001      	movs	r0, #1
 8007c22:	e7a5      	b.n	8007b70 <_svfiprintf_r+0xd4>
 8007c24:	2300      	movs	r3, #0
 8007c26:	3401      	adds	r4, #1
 8007c28:	9305      	str	r3, [sp, #20]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	f04f 0c0a 	mov.w	ip, #10
 8007c30:	4620      	mov	r0, r4
 8007c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c36:	3a30      	subs	r2, #48	; 0x30
 8007c38:	2a09      	cmp	r2, #9
 8007c3a:	d903      	bls.n	8007c44 <_svfiprintf_r+0x1a8>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0c5      	beq.n	8007bcc <_svfiprintf_r+0x130>
 8007c40:	9105      	str	r1, [sp, #20]
 8007c42:	e7c3      	b.n	8007bcc <_svfiprintf_r+0x130>
 8007c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c48:	4604      	mov	r4, r0
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e7f0      	b.n	8007c30 <_svfiprintf_r+0x194>
 8007c4e:	ab03      	add	r3, sp, #12
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	462a      	mov	r2, r5
 8007c54:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <_svfiprintf_r+0x1f8>)
 8007c56:	a904      	add	r1, sp, #16
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f3af 8000 	nop.w
 8007c5e:	1c42      	adds	r2, r0, #1
 8007c60:	4606      	mov	r6, r0
 8007c62:	d1d6      	bne.n	8007c12 <_svfiprintf_r+0x176>
 8007c64:	89ab      	ldrh	r3, [r5, #12]
 8007c66:	065b      	lsls	r3, r3, #25
 8007c68:	f53f af2c 	bmi.w	8007ac4 <_svfiprintf_r+0x28>
 8007c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c6e:	b01d      	add	sp, #116	; 0x74
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <_svfiprintf_r+0x1f8>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f000 f87a 	bl	8007d78 <_printf_i>
 8007c84:	e7eb      	b.n	8007c5e <_svfiprintf_r+0x1c2>
 8007c86:	bf00      	nop
 8007c88:	0800b254 	.word	0x0800b254
 8007c8c:	0800b25e 	.word	0x0800b25e
 8007c90:	00000000 	.word	0x00000000
 8007c94:	080079e5 	.word	0x080079e5
 8007c98:	0800b25a 	.word	0x0800b25a

08007c9c <_printf_common>:
 8007c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	4699      	mov	r9, r3
 8007ca4:	688a      	ldr	r2, [r1, #8]
 8007ca6:	690b      	ldr	r3, [r1, #16]
 8007ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cac:	4293      	cmp	r3, r2
 8007cae:	bfb8      	it	lt
 8007cb0:	4613      	movlt	r3, r2
 8007cb2:	6033      	str	r3, [r6, #0]
 8007cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cb8:	4607      	mov	r7, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b10a      	cbz	r2, 8007cc2 <_printf_common+0x26>
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	6033      	str	r3, [r6, #0]
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	0699      	lsls	r1, r3, #26
 8007cc6:	bf42      	ittt	mi
 8007cc8:	6833      	ldrmi	r3, [r6, #0]
 8007cca:	3302      	addmi	r3, #2
 8007ccc:	6033      	strmi	r3, [r6, #0]
 8007cce:	6825      	ldr	r5, [r4, #0]
 8007cd0:	f015 0506 	ands.w	r5, r5, #6
 8007cd4:	d106      	bne.n	8007ce4 <_printf_common+0x48>
 8007cd6:	f104 0a19 	add.w	sl, r4, #25
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	6832      	ldr	r2, [r6, #0]
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	42ab      	cmp	r3, r5
 8007ce2:	dc26      	bgt.n	8007d32 <_printf_common+0x96>
 8007ce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ce8:	1e13      	subs	r3, r2, #0
 8007cea:	6822      	ldr	r2, [r4, #0]
 8007cec:	bf18      	it	ne
 8007cee:	2301      	movne	r3, #1
 8007cf0:	0692      	lsls	r2, r2, #26
 8007cf2:	d42b      	bmi.n	8007d4c <_printf_common+0xb0>
 8007cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	47c0      	blx	r8
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d01e      	beq.n	8007d40 <_printf_common+0xa4>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	68e5      	ldr	r5, [r4, #12]
 8007d06:	6832      	ldr	r2, [r6, #0]
 8007d08:	f003 0306 	and.w	r3, r3, #6
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	bf08      	it	eq
 8007d10:	1aad      	subeq	r5, r5, r2
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	6922      	ldr	r2, [r4, #16]
 8007d16:	bf0c      	ite	eq
 8007d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d1c:	2500      	movne	r5, #0
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	bfc4      	itt	gt
 8007d22:	1a9b      	subgt	r3, r3, r2
 8007d24:	18ed      	addgt	r5, r5, r3
 8007d26:	2600      	movs	r6, #0
 8007d28:	341a      	adds	r4, #26
 8007d2a:	42b5      	cmp	r5, r6
 8007d2c:	d11a      	bne.n	8007d64 <_printf_common+0xc8>
 8007d2e:	2000      	movs	r0, #0
 8007d30:	e008      	b.n	8007d44 <_printf_common+0xa8>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4652      	mov	r2, sl
 8007d36:	4649      	mov	r1, r9
 8007d38:	4638      	mov	r0, r7
 8007d3a:	47c0      	blx	r8
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d103      	bne.n	8007d48 <_printf_common+0xac>
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	3501      	adds	r5, #1
 8007d4a:	e7c6      	b.n	8007cda <_printf_common+0x3e>
 8007d4c:	18e1      	adds	r1, r4, r3
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	2030      	movs	r0, #48	; 0x30
 8007d52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d56:	4422      	add	r2, r4
 8007d58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d60:	3302      	adds	r3, #2
 8007d62:	e7c7      	b.n	8007cf4 <_printf_common+0x58>
 8007d64:	2301      	movs	r3, #1
 8007d66:	4622      	mov	r2, r4
 8007d68:	4649      	mov	r1, r9
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	47c0      	blx	r8
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d0e6      	beq.n	8007d40 <_printf_common+0xa4>
 8007d72:	3601      	adds	r6, #1
 8007d74:	e7d9      	b.n	8007d2a <_printf_common+0x8e>
	...

08007d78 <_printf_i>:
 8007d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	4691      	mov	r9, r2
 8007d80:	7e27      	ldrb	r7, [r4, #24]
 8007d82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d84:	2f78      	cmp	r7, #120	; 0x78
 8007d86:	4680      	mov	r8, r0
 8007d88:	469a      	mov	sl, r3
 8007d8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d8e:	d807      	bhi.n	8007da0 <_printf_i+0x28>
 8007d90:	2f62      	cmp	r7, #98	; 0x62
 8007d92:	d80a      	bhi.n	8007daa <_printf_i+0x32>
 8007d94:	2f00      	cmp	r7, #0
 8007d96:	f000 80d8 	beq.w	8007f4a <_printf_i+0x1d2>
 8007d9a:	2f58      	cmp	r7, #88	; 0x58
 8007d9c:	f000 80a3 	beq.w	8007ee6 <_printf_i+0x16e>
 8007da0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007da4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007da8:	e03a      	b.n	8007e20 <_printf_i+0xa8>
 8007daa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dae:	2b15      	cmp	r3, #21
 8007db0:	d8f6      	bhi.n	8007da0 <_printf_i+0x28>
 8007db2:	a001      	add	r0, pc, #4	; (adr r0, 8007db8 <_printf_i+0x40>)
 8007db4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007db8:	08007e11 	.word	0x08007e11
 8007dbc:	08007e25 	.word	0x08007e25
 8007dc0:	08007da1 	.word	0x08007da1
 8007dc4:	08007da1 	.word	0x08007da1
 8007dc8:	08007da1 	.word	0x08007da1
 8007dcc:	08007da1 	.word	0x08007da1
 8007dd0:	08007e25 	.word	0x08007e25
 8007dd4:	08007da1 	.word	0x08007da1
 8007dd8:	08007da1 	.word	0x08007da1
 8007ddc:	08007da1 	.word	0x08007da1
 8007de0:	08007da1 	.word	0x08007da1
 8007de4:	08007f31 	.word	0x08007f31
 8007de8:	08007e55 	.word	0x08007e55
 8007dec:	08007f13 	.word	0x08007f13
 8007df0:	08007da1 	.word	0x08007da1
 8007df4:	08007da1 	.word	0x08007da1
 8007df8:	08007f53 	.word	0x08007f53
 8007dfc:	08007da1 	.word	0x08007da1
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007da1 	.word	0x08007da1
 8007e08:	08007da1 	.word	0x08007da1
 8007e0c:	08007f1b 	.word	0x08007f1b
 8007e10:	680b      	ldr	r3, [r1, #0]
 8007e12:	1d1a      	adds	r2, r3, #4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	600a      	str	r2, [r1, #0]
 8007e18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0a3      	b.n	8007f6c <_printf_i+0x1f4>
 8007e24:	6825      	ldr	r5, [r4, #0]
 8007e26:	6808      	ldr	r0, [r1, #0]
 8007e28:	062e      	lsls	r6, r5, #24
 8007e2a:	f100 0304 	add.w	r3, r0, #4
 8007e2e:	d50a      	bpl.n	8007e46 <_printf_i+0xce>
 8007e30:	6805      	ldr	r5, [r0, #0]
 8007e32:	600b      	str	r3, [r1, #0]
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	da03      	bge.n	8007e40 <_printf_i+0xc8>
 8007e38:	232d      	movs	r3, #45	; 0x2d
 8007e3a:	426d      	negs	r5, r5
 8007e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e40:	485e      	ldr	r0, [pc, #376]	; (8007fbc <_printf_i+0x244>)
 8007e42:	230a      	movs	r3, #10
 8007e44:	e019      	b.n	8007e7a <_printf_i+0x102>
 8007e46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e4a:	6805      	ldr	r5, [r0, #0]
 8007e4c:	600b      	str	r3, [r1, #0]
 8007e4e:	bf18      	it	ne
 8007e50:	b22d      	sxthne	r5, r5
 8007e52:	e7ef      	b.n	8007e34 <_printf_i+0xbc>
 8007e54:	680b      	ldr	r3, [r1, #0]
 8007e56:	6825      	ldr	r5, [r4, #0]
 8007e58:	1d18      	adds	r0, r3, #4
 8007e5a:	6008      	str	r0, [r1, #0]
 8007e5c:	0628      	lsls	r0, r5, #24
 8007e5e:	d501      	bpl.n	8007e64 <_printf_i+0xec>
 8007e60:	681d      	ldr	r5, [r3, #0]
 8007e62:	e002      	b.n	8007e6a <_printf_i+0xf2>
 8007e64:	0669      	lsls	r1, r5, #25
 8007e66:	d5fb      	bpl.n	8007e60 <_printf_i+0xe8>
 8007e68:	881d      	ldrh	r5, [r3, #0]
 8007e6a:	4854      	ldr	r0, [pc, #336]	; (8007fbc <_printf_i+0x244>)
 8007e6c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e6e:	bf0c      	ite	eq
 8007e70:	2308      	moveq	r3, #8
 8007e72:	230a      	movne	r3, #10
 8007e74:	2100      	movs	r1, #0
 8007e76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e7a:	6866      	ldr	r6, [r4, #4]
 8007e7c:	60a6      	str	r6, [r4, #8]
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	bfa2      	ittt	ge
 8007e82:	6821      	ldrge	r1, [r4, #0]
 8007e84:	f021 0104 	bicge.w	r1, r1, #4
 8007e88:	6021      	strge	r1, [r4, #0]
 8007e8a:	b90d      	cbnz	r5, 8007e90 <_printf_i+0x118>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	d04d      	beq.n	8007f2c <_printf_i+0x1b4>
 8007e90:	4616      	mov	r6, r2
 8007e92:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e96:	fb03 5711 	mls	r7, r3, r1, r5
 8007e9a:	5dc7      	ldrb	r7, [r0, r7]
 8007e9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ea0:	462f      	mov	r7, r5
 8007ea2:	42bb      	cmp	r3, r7
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	d9f4      	bls.n	8007e92 <_printf_i+0x11a>
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d10b      	bne.n	8007ec4 <_printf_i+0x14c>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07df      	lsls	r7, r3, #31
 8007eb0:	d508      	bpl.n	8007ec4 <_printf_i+0x14c>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6861      	ldr	r1, [r4, #4]
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	bfde      	ittt	le
 8007eba:	2330      	movle	r3, #48	; 0x30
 8007ebc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ec0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ec4:	1b92      	subs	r2, r2, r6
 8007ec6:	6122      	str	r2, [r4, #16]
 8007ec8:	f8cd a000 	str.w	sl, [sp]
 8007ecc:	464b      	mov	r3, r9
 8007ece:	aa03      	add	r2, sp, #12
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7ff fee2 	bl	8007c9c <_printf_common>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d14c      	bne.n	8007f76 <_printf_i+0x1fe>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	b004      	add	sp, #16
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	4835      	ldr	r0, [pc, #212]	; (8007fbc <_printf_i+0x244>)
 8007ee8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	680e      	ldr	r6, [r1, #0]
 8007ef0:	061f      	lsls	r7, r3, #24
 8007ef2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ef6:	600e      	str	r6, [r1, #0]
 8007ef8:	d514      	bpl.n	8007f24 <_printf_i+0x1ac>
 8007efa:	07d9      	lsls	r1, r3, #31
 8007efc:	bf44      	itt	mi
 8007efe:	f043 0320 	orrmi.w	r3, r3, #32
 8007f02:	6023      	strmi	r3, [r4, #0]
 8007f04:	b91d      	cbnz	r5, 8007f0e <_printf_i+0x196>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	f023 0320 	bic.w	r3, r3, #32
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	2310      	movs	r3, #16
 8007f10:	e7b0      	b.n	8007e74 <_printf_i+0xfc>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	f043 0320 	orr.w	r3, r3, #32
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	2378      	movs	r3, #120	; 0x78
 8007f1c:	4828      	ldr	r0, [pc, #160]	; (8007fc0 <_printf_i+0x248>)
 8007f1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f22:	e7e3      	b.n	8007eec <_printf_i+0x174>
 8007f24:	065e      	lsls	r6, r3, #25
 8007f26:	bf48      	it	mi
 8007f28:	b2ad      	uxthmi	r5, r5
 8007f2a:	e7e6      	b.n	8007efa <_printf_i+0x182>
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	e7bb      	b.n	8007ea8 <_printf_i+0x130>
 8007f30:	680b      	ldr	r3, [r1, #0]
 8007f32:	6826      	ldr	r6, [r4, #0]
 8007f34:	6960      	ldr	r0, [r4, #20]
 8007f36:	1d1d      	adds	r5, r3, #4
 8007f38:	600d      	str	r5, [r1, #0]
 8007f3a:	0635      	lsls	r5, r6, #24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	d501      	bpl.n	8007f44 <_printf_i+0x1cc>
 8007f40:	6018      	str	r0, [r3, #0]
 8007f42:	e002      	b.n	8007f4a <_printf_i+0x1d2>
 8007f44:	0671      	lsls	r1, r6, #25
 8007f46:	d5fb      	bpl.n	8007f40 <_printf_i+0x1c8>
 8007f48:	8018      	strh	r0, [r3, #0]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6123      	str	r3, [r4, #16]
 8007f4e:	4616      	mov	r6, r2
 8007f50:	e7ba      	b.n	8007ec8 <_printf_i+0x150>
 8007f52:	680b      	ldr	r3, [r1, #0]
 8007f54:	1d1a      	adds	r2, r3, #4
 8007f56:	600a      	str	r2, [r1, #0]
 8007f58:	681e      	ldr	r6, [r3, #0]
 8007f5a:	6862      	ldr	r2, [r4, #4]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7f8 f93e 	bl	80001e0 <memchr>
 8007f64:	b108      	cbz	r0, 8007f6a <_printf_i+0x1f2>
 8007f66:	1b80      	subs	r0, r0, r6
 8007f68:	6060      	str	r0, [r4, #4]
 8007f6a:	6863      	ldr	r3, [r4, #4]
 8007f6c:	6123      	str	r3, [r4, #16]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f74:	e7a8      	b.n	8007ec8 <_printf_i+0x150>
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	4632      	mov	r2, r6
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	47d0      	blx	sl
 8007f80:	3001      	adds	r0, #1
 8007f82:	d0ab      	beq.n	8007edc <_printf_i+0x164>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	079b      	lsls	r3, r3, #30
 8007f88:	d413      	bmi.n	8007fb2 <_printf_i+0x23a>
 8007f8a:	68e0      	ldr	r0, [r4, #12]
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	4298      	cmp	r0, r3
 8007f90:	bfb8      	it	lt
 8007f92:	4618      	movlt	r0, r3
 8007f94:	e7a4      	b.n	8007ee0 <_printf_i+0x168>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4632      	mov	r2, r6
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	47d0      	blx	sl
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d09b      	beq.n	8007edc <_printf_i+0x164>
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	9903      	ldr	r1, [sp, #12]
 8007faa:	1a5b      	subs	r3, r3, r1
 8007fac:	42ab      	cmp	r3, r5
 8007fae:	dcf2      	bgt.n	8007f96 <_printf_i+0x21e>
 8007fb0:	e7eb      	b.n	8007f8a <_printf_i+0x212>
 8007fb2:	2500      	movs	r5, #0
 8007fb4:	f104 0619 	add.w	r6, r4, #25
 8007fb8:	e7f5      	b.n	8007fa6 <_printf_i+0x22e>
 8007fba:	bf00      	nop
 8007fbc:	0800b265 	.word	0x0800b265
 8007fc0:	0800b276 	.word	0x0800b276

08007fc4 <memcpy>:
 8007fc4:	440a      	add	r2, r1
 8007fc6:	4291      	cmp	r1, r2
 8007fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fcc:	d100      	bne.n	8007fd0 <memcpy+0xc>
 8007fce:	4770      	bx	lr
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fda:	4291      	cmp	r1, r2
 8007fdc:	d1f9      	bne.n	8007fd2 <memcpy+0xe>
 8007fde:	bd10      	pop	{r4, pc}

08007fe0 <memmove>:
 8007fe0:	4288      	cmp	r0, r1
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	eb01 0402 	add.w	r4, r1, r2
 8007fe8:	d902      	bls.n	8007ff0 <memmove+0x10>
 8007fea:	4284      	cmp	r4, r0
 8007fec:	4623      	mov	r3, r4
 8007fee:	d807      	bhi.n	8008000 <memmove+0x20>
 8007ff0:	1e43      	subs	r3, r0, #1
 8007ff2:	42a1      	cmp	r1, r4
 8007ff4:	d008      	beq.n	8008008 <memmove+0x28>
 8007ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ffe:	e7f8      	b.n	8007ff2 <memmove+0x12>
 8008000:	4402      	add	r2, r0
 8008002:	4601      	mov	r1, r0
 8008004:	428a      	cmp	r2, r1
 8008006:	d100      	bne.n	800800a <memmove+0x2a>
 8008008:	bd10      	pop	{r4, pc}
 800800a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800800e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008012:	e7f7      	b.n	8008004 <memmove+0x24>

08008014 <_free_r>:
 8008014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008016:	2900      	cmp	r1, #0
 8008018:	d048      	beq.n	80080ac <_free_r+0x98>
 800801a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800801e:	9001      	str	r0, [sp, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f1a1 0404 	sub.w	r4, r1, #4
 8008026:	bfb8      	it	lt
 8008028:	18e4      	addlt	r4, r4, r3
 800802a:	f000 f8d3 	bl	80081d4 <__malloc_lock>
 800802e:	4a20      	ldr	r2, [pc, #128]	; (80080b0 <_free_r+0x9c>)
 8008030:	9801      	ldr	r0, [sp, #4]
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	4615      	mov	r5, r2
 8008036:	b933      	cbnz	r3, 8008046 <_free_r+0x32>
 8008038:	6063      	str	r3, [r4, #4]
 800803a:	6014      	str	r4, [r2, #0]
 800803c:	b003      	add	sp, #12
 800803e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008042:	f000 b8cd 	b.w	80081e0 <__malloc_unlock>
 8008046:	42a3      	cmp	r3, r4
 8008048:	d90b      	bls.n	8008062 <_free_r+0x4e>
 800804a:	6821      	ldr	r1, [r4, #0]
 800804c:	1862      	adds	r2, r4, r1
 800804e:	4293      	cmp	r3, r2
 8008050:	bf04      	itt	eq
 8008052:	681a      	ldreq	r2, [r3, #0]
 8008054:	685b      	ldreq	r3, [r3, #4]
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	bf04      	itt	eq
 800805a:	1852      	addeq	r2, r2, r1
 800805c:	6022      	streq	r2, [r4, #0]
 800805e:	602c      	str	r4, [r5, #0]
 8008060:	e7ec      	b.n	800803c <_free_r+0x28>
 8008062:	461a      	mov	r2, r3
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	b10b      	cbz	r3, 800806c <_free_r+0x58>
 8008068:	42a3      	cmp	r3, r4
 800806a:	d9fa      	bls.n	8008062 <_free_r+0x4e>
 800806c:	6811      	ldr	r1, [r2, #0]
 800806e:	1855      	adds	r5, r2, r1
 8008070:	42a5      	cmp	r5, r4
 8008072:	d10b      	bne.n	800808c <_free_r+0x78>
 8008074:	6824      	ldr	r4, [r4, #0]
 8008076:	4421      	add	r1, r4
 8008078:	1854      	adds	r4, r2, r1
 800807a:	42a3      	cmp	r3, r4
 800807c:	6011      	str	r1, [r2, #0]
 800807e:	d1dd      	bne.n	800803c <_free_r+0x28>
 8008080:	681c      	ldr	r4, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	6053      	str	r3, [r2, #4]
 8008086:	4421      	add	r1, r4
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	e7d7      	b.n	800803c <_free_r+0x28>
 800808c:	d902      	bls.n	8008094 <_free_r+0x80>
 800808e:	230c      	movs	r3, #12
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	e7d3      	b.n	800803c <_free_r+0x28>
 8008094:	6825      	ldr	r5, [r4, #0]
 8008096:	1961      	adds	r1, r4, r5
 8008098:	428b      	cmp	r3, r1
 800809a:	bf04      	itt	eq
 800809c:	6819      	ldreq	r1, [r3, #0]
 800809e:	685b      	ldreq	r3, [r3, #4]
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	bf04      	itt	eq
 80080a4:	1949      	addeq	r1, r1, r5
 80080a6:	6021      	streq	r1, [r4, #0]
 80080a8:	6054      	str	r4, [r2, #4]
 80080aa:	e7c7      	b.n	800803c <_free_r+0x28>
 80080ac:	b003      	add	sp, #12
 80080ae:	bd30      	pop	{r4, r5, pc}
 80080b0:	200000b0 	.word	0x200000b0

080080b4 <_malloc_r>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	1ccd      	adds	r5, r1, #3
 80080b8:	f025 0503 	bic.w	r5, r5, #3
 80080bc:	3508      	adds	r5, #8
 80080be:	2d0c      	cmp	r5, #12
 80080c0:	bf38      	it	cc
 80080c2:	250c      	movcc	r5, #12
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	4606      	mov	r6, r0
 80080c8:	db01      	blt.n	80080ce <_malloc_r+0x1a>
 80080ca:	42a9      	cmp	r1, r5
 80080cc:	d903      	bls.n	80080d6 <_malloc_r+0x22>
 80080ce:	230c      	movs	r3, #12
 80080d0:	6033      	str	r3, [r6, #0]
 80080d2:	2000      	movs	r0, #0
 80080d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d6:	f000 f87d 	bl	80081d4 <__malloc_lock>
 80080da:	4921      	ldr	r1, [pc, #132]	; (8008160 <_malloc_r+0xac>)
 80080dc:	680a      	ldr	r2, [r1, #0]
 80080de:	4614      	mov	r4, r2
 80080e0:	b99c      	cbnz	r4, 800810a <_malloc_r+0x56>
 80080e2:	4f20      	ldr	r7, [pc, #128]	; (8008164 <_malloc_r+0xb0>)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	b923      	cbnz	r3, 80080f2 <_malloc_r+0x3e>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4630      	mov	r0, r6
 80080ec:	f000 f862 	bl	80081b4 <_sbrk_r>
 80080f0:	6038      	str	r0, [r7, #0]
 80080f2:	4629      	mov	r1, r5
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 f85d 	bl	80081b4 <_sbrk_r>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d123      	bne.n	8008146 <_malloc_r+0x92>
 80080fe:	230c      	movs	r3, #12
 8008100:	6033      	str	r3, [r6, #0]
 8008102:	4630      	mov	r0, r6
 8008104:	f000 f86c 	bl	80081e0 <__malloc_unlock>
 8008108:	e7e3      	b.n	80080d2 <_malloc_r+0x1e>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	1b5b      	subs	r3, r3, r5
 800810e:	d417      	bmi.n	8008140 <_malloc_r+0x8c>
 8008110:	2b0b      	cmp	r3, #11
 8008112:	d903      	bls.n	800811c <_malloc_r+0x68>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	441c      	add	r4, r3
 8008118:	6025      	str	r5, [r4, #0]
 800811a:	e004      	b.n	8008126 <_malloc_r+0x72>
 800811c:	6863      	ldr	r3, [r4, #4]
 800811e:	42a2      	cmp	r2, r4
 8008120:	bf0c      	ite	eq
 8008122:	600b      	streq	r3, [r1, #0]
 8008124:	6053      	strne	r3, [r2, #4]
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f85a 	bl	80081e0 <__malloc_unlock>
 800812c:	f104 000b 	add.w	r0, r4, #11
 8008130:	1d23      	adds	r3, r4, #4
 8008132:	f020 0007 	bic.w	r0, r0, #7
 8008136:	1ac2      	subs	r2, r0, r3
 8008138:	d0cc      	beq.n	80080d4 <_malloc_r+0x20>
 800813a:	1a1b      	subs	r3, r3, r0
 800813c:	50a3      	str	r3, [r4, r2]
 800813e:	e7c9      	b.n	80080d4 <_malloc_r+0x20>
 8008140:	4622      	mov	r2, r4
 8008142:	6864      	ldr	r4, [r4, #4]
 8008144:	e7cc      	b.n	80080e0 <_malloc_r+0x2c>
 8008146:	1cc4      	adds	r4, r0, #3
 8008148:	f024 0403 	bic.w	r4, r4, #3
 800814c:	42a0      	cmp	r0, r4
 800814e:	d0e3      	beq.n	8008118 <_malloc_r+0x64>
 8008150:	1a21      	subs	r1, r4, r0
 8008152:	4630      	mov	r0, r6
 8008154:	f000 f82e 	bl	80081b4 <_sbrk_r>
 8008158:	3001      	adds	r0, #1
 800815a:	d1dd      	bne.n	8008118 <_malloc_r+0x64>
 800815c:	e7cf      	b.n	80080fe <_malloc_r+0x4a>
 800815e:	bf00      	nop
 8008160:	200000b0 	.word	0x200000b0
 8008164:	200000b4 	.word	0x200000b4

08008168 <_realloc_r>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	4607      	mov	r7, r0
 800816c:	4614      	mov	r4, r2
 800816e:	460e      	mov	r6, r1
 8008170:	b921      	cbnz	r1, 800817c <_realloc_r+0x14>
 8008172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008176:	4611      	mov	r1, r2
 8008178:	f7ff bf9c 	b.w	80080b4 <_malloc_r>
 800817c:	b922      	cbnz	r2, 8008188 <_realloc_r+0x20>
 800817e:	f7ff ff49 	bl	8008014 <_free_r>
 8008182:	4625      	mov	r5, r4
 8008184:	4628      	mov	r0, r5
 8008186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008188:	f000 f830 	bl	80081ec <_malloc_usable_size_r>
 800818c:	42a0      	cmp	r0, r4
 800818e:	d20f      	bcs.n	80081b0 <_realloc_r+0x48>
 8008190:	4621      	mov	r1, r4
 8008192:	4638      	mov	r0, r7
 8008194:	f7ff ff8e 	bl	80080b4 <_malloc_r>
 8008198:	4605      	mov	r5, r0
 800819a:	2800      	cmp	r0, #0
 800819c:	d0f2      	beq.n	8008184 <_realloc_r+0x1c>
 800819e:	4631      	mov	r1, r6
 80081a0:	4622      	mov	r2, r4
 80081a2:	f7ff ff0f 	bl	8007fc4 <memcpy>
 80081a6:	4631      	mov	r1, r6
 80081a8:	4638      	mov	r0, r7
 80081aa:	f7ff ff33 	bl	8008014 <_free_r>
 80081ae:	e7e9      	b.n	8008184 <_realloc_r+0x1c>
 80081b0:	4635      	mov	r5, r6
 80081b2:	e7e7      	b.n	8008184 <_realloc_r+0x1c>

080081b4 <_sbrk_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d06      	ldr	r5, [pc, #24]	; (80081d0 <_sbrk_r+0x1c>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7fa f926 	bl	8002410 <_sbrk>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_sbrk_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_sbrk_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	20000438 	.word	0x20000438

080081d4 <__malloc_lock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__malloc_lock+0x8>)
 80081d6:	f000 b811 	b.w	80081fc <__retarget_lock_acquire_recursive>
 80081da:	bf00      	nop
 80081dc:	20000440 	.word	0x20000440

080081e0 <__malloc_unlock>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__malloc_unlock+0x8>)
 80081e2:	f000 b80c 	b.w	80081fe <__retarget_lock_release_recursive>
 80081e6:	bf00      	nop
 80081e8:	20000440 	.word	0x20000440

080081ec <_malloc_usable_size_r>:
 80081ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f0:	1f18      	subs	r0, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bfbc      	itt	lt
 80081f6:	580b      	ldrlt	r3, [r1, r0]
 80081f8:	18c0      	addlt	r0, r0, r3
 80081fa:	4770      	bx	lr

080081fc <__retarget_lock_acquire_recursive>:
 80081fc:	4770      	bx	lr

080081fe <__retarget_lock_release_recursive>:
 80081fe:	4770      	bx	lr

08008200 <_init>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	bf00      	nop
 8008204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008206:	bc08      	pop	{r3}
 8008208:	469e      	mov	lr, r3
 800820a:	4770      	bx	lr

0800820c <_fini>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr
